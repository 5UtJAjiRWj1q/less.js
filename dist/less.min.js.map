{"version":3,"file":"less.min.js","sources":["../lib/less-browser/utils.js","../lib/less-browser/browser.js","../lib/less/data/colors.js","../lib/less/data/unit-conversions.js","../lib/less/data/index.js","../lib/less/tree/node.js","../lib/less/tree/color.js","../lib/less/tree/paren.js","../lib/less/tree/combinator.js","../lib/less/tree/element.js","../lib/less/constants.js","../node_modules/clone/clone.js","../lib/less/utils.js","../lib/less/less-error.js","../lib/less/tree/selector.js","../lib/less/tree/value.js","../lib/less/tree/keyword.js","../lib/less/tree/anonymous.js","../lib/less/tree/declaration.js","../lib/less/tree/debug-info.js","../lib/less/tree/comment.js","../lib/less/contexts.js","../lib/less/functions/function-registry.js","../lib/less/functions/default.js","../lib/less/tree/ruleset.js","../lib/less/tree/atrule.js","../lib/less/tree/detached-ruleset.js","../lib/less/tree/unit.js","../lib/less/tree/dimension.js","../lib/less/tree/operation.js","../lib/less/tree/expression.js","../lib/less/functions/function-caller.js","../lib/less/tree/call.js","../lib/less/tree/variable.js","../lib/less/tree/property.js","../lib/less/tree/attribute.js","../lib/less/tree/quoted.js","../lib/less/tree/url.js","../lib/less/tree/media.js","../lib/less/tree/import.js","../lib/less/tree/js-eval-node.js","../lib/less/tree/javascript.js","../lib/less/tree/assignment.js","../lib/less/tree/condition.js","../lib/less/tree/unicode-descriptor.js","../lib/less/tree/negative.js","../lib/less/tree/extend.js","../lib/less/tree/variable-call.js","../lib/less/tree/namespace-value.js","../lib/less/tree/mixin-definition.js","../lib/less/tree/mixin-call.js","../lib/less/tree/index.js","../lib/less/logger.js","../lib/less/environment/environment.js","../lib/less/environment/abstract-file-manager.js","../lib/less/environment/abstract-plugin-loader.js","../lib/less/visitors/visitor.js","../lib/less/visitors/import-sequencer.js","../lib/less/visitors/import-visitor.js","../lib/less/visitors/set-tree-visibility-visitor.js","../lib/less/visitors/extend-visitor.js","../lib/less/visitors/join-selector-visitor.js","../lib/less/visitors/to-css-visitor.js","../lib/less/visitors/index.js","../lib/less/parser/parser-input.js","../lib/less/parser/chunker.js","../lib/less/parser/parser.js","../lib/less/functions/color.js","../lib/less/functions/boolean.js","../lib/less/functions/color-blending.js","../lib/less/functions/list.js","../lib/less/functions/math-helper.js","../lib/less/functions/math.js","../lib/less/functions/number.js","../lib/less/plugin-manager.js","../lib/less/functions/string.js","../lib/less/functions/types.js","../lib/less/functions/index.js","../lib/less/functions/data-uri.js","../lib/less/functions/svg.js","../lib/less/transform-tree.js","../lib/less-browser/file-manager.js","../lib/less/index.js","../lib/less/source-map-output.js","../lib/less/source-map-builder.js","../lib/less/parse-tree.js","../lib/less/import-manager.js","../lib/less/render.js","../lib/less/parse.js","../lib/less-browser/plugin-loader.js","../lib/less-browser/error-reporting.js","../lib/less-browser/bootstrap.js","../lib/less/default-options.js","../lib/less-browser/add-default-options.js","../lib/less-browser/index.js","../lib/less-browser/log-listener.js","../lib/less-browser/cache.js","../lib/less-browser/image-size.js"],"sourcesContent":["\nexport function extractId(href) {\n    return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '')  // Remove protocol & domain\n        .replace(/[\\?\\&]livereload=\\w+/, '')        // Remove LiveReload cachebuster\n        .replace(/^\\//, '')                         // Remove root /\n        .replace(/\\.[a-zA-Z]+$/, '')                // Remove simple extension\n        .replace(/[^\\.\\w-]+/g, '-')                 // Replace illegal characters\n        .replace(/\\./g, ':');                       // Replace dots with colons(for valid id)\n}\n\nexport function addDataAttr(options, tag) {\n    for (const opt in tag.dataset) {\n        if (tag.dataset.hasOwnProperty(opt)) {\n            if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n                options[opt] = tag.dataset[opt];\n            } else {\n                try {\n                    options[opt] = JSON.parse(tag.dataset[opt]);\n                }\n                catch (_) {}\n            }\n        }\n    }\n}\n","import * as utils from './utils';\n\nexport default {\n    createCSS: function (document, styles, sheet) {\n        // Strip the query-string\n        const href = sheet.href || '';\n\n        // If there is no title set, use the filename, minus the extension\n        const id = `less:${sheet.title || utils.extractId(href)}`;\n\n        // If this has already been inserted into the DOM, we may need to replace it\n        const oldStyleNode = document.getElementById(id);\n        let keepOldStyleNode = false;\n\n        // Create a new stylesheet node for insertion or (if necessary) replacement\n        const styleNode = document.createElement('style');\n        styleNode.setAttribute('type', 'text/css');\n        if (sheet.media) {\n            styleNode.setAttribute('media', sheet.media);\n        }\n        styleNode.id = id;\n\n        if (!styleNode.styleSheet) {\n            styleNode.appendChild(document.createTextNode(styles));\n\n            // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n            keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n        }\n\n        const head = document.getElementsByTagName('head')[0];\n\n        // If there is no oldStyleNode, just append; otherwise, only append if we need\n        // to replace oldStyleNode with an updated stylesheet\n        if (oldStyleNode === null || keepOldStyleNode === false) {\n            const nextEl = sheet && sheet.nextSibling || null;\n            if (nextEl) {\n                nextEl.parentNode.insertBefore(styleNode, nextEl);\n            } else {\n                head.appendChild(styleNode);\n            }\n        }\n        if (oldStyleNode && keepOldStyleNode === false) {\n            oldStyleNode.parentNode.removeChild(oldStyleNode);\n        }\n\n        // For IE.\n        // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n        // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n        if (styleNode.styleSheet) {\n            try {\n                styleNode.styleSheet.cssText = styles;\n            } catch (e) {\n                throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n            }\n        }\n    },\n    currentScript: function(window) {\n        const document = window.document;\n        return document.currentScript || (() => {\n            const scripts = document.getElementsByTagName('script');\n            return scripts[scripts.length - 1];\n        })();\n    }\n};\n","export default {\n    'aliceblue':'#f0f8ff',\n    'antiquewhite':'#faebd7',\n    'aqua':'#00ffff',\n    'aquamarine':'#7fffd4',\n    'azure':'#f0ffff',\n    'beige':'#f5f5dc',\n    'bisque':'#ffe4c4',\n    'black':'#000000',\n    'blanchedalmond':'#ffebcd',\n    'blue':'#0000ff',\n    'blueviolet':'#8a2be2',\n    'brown':'#a52a2a',\n    'burlywood':'#deb887',\n    'cadetblue':'#5f9ea0',\n    'chartreuse':'#7fff00',\n    'chocolate':'#d2691e',\n    'coral':'#ff7f50',\n    'cornflowerblue':'#6495ed',\n    'cornsilk':'#fff8dc',\n    'crimson':'#dc143c',\n    'cyan':'#00ffff',\n    'darkblue':'#00008b',\n    'darkcyan':'#008b8b',\n    'darkgoldenrod':'#b8860b',\n    'darkgray':'#a9a9a9',\n    'darkgrey':'#a9a9a9',\n    'darkgreen':'#006400',\n    'darkkhaki':'#bdb76b',\n    'darkmagenta':'#8b008b',\n    'darkolivegreen':'#556b2f',\n    'darkorange':'#ff8c00',\n    'darkorchid':'#9932cc',\n    'darkred':'#8b0000',\n    'darksalmon':'#e9967a',\n    'darkseagreen':'#8fbc8f',\n    'darkslateblue':'#483d8b',\n    'darkslategray':'#2f4f4f',\n    'darkslategrey':'#2f4f4f',\n    'darkturquoise':'#00ced1',\n    'darkviolet':'#9400d3',\n    'deeppink':'#ff1493',\n    'deepskyblue':'#00bfff',\n    'dimgray':'#696969',\n    'dimgrey':'#696969',\n    'dodgerblue':'#1e90ff',\n    'firebrick':'#b22222',\n    'floralwhite':'#fffaf0',\n    'forestgreen':'#228b22',\n    'fuchsia':'#ff00ff',\n    'gainsboro':'#dcdcdc',\n    'ghostwhite':'#f8f8ff',\n    'gold':'#ffd700',\n    'goldenrod':'#daa520',\n    'gray':'#808080',\n    'grey':'#808080',\n    'green':'#008000',\n    'greenyellow':'#adff2f',\n    'honeydew':'#f0fff0',\n    'hotpink':'#ff69b4',\n    'indianred':'#cd5c5c',\n    'indigo':'#4b0082',\n    'ivory':'#fffff0',\n    'khaki':'#f0e68c',\n    'lavender':'#e6e6fa',\n    'lavenderblush':'#fff0f5',\n    'lawngreen':'#7cfc00',\n    'lemonchiffon':'#fffacd',\n    'lightblue':'#add8e6',\n    'lightcoral':'#f08080',\n    'lightcyan':'#e0ffff',\n    'lightgoldenrodyellow':'#fafad2',\n    'lightgray':'#d3d3d3',\n    'lightgrey':'#d3d3d3',\n    'lightgreen':'#90ee90',\n    'lightpink':'#ffb6c1',\n    'lightsalmon':'#ffa07a',\n    'lightseagreen':'#20b2aa',\n    'lightskyblue':'#87cefa',\n    'lightslategray':'#778899',\n    'lightslategrey':'#778899',\n    'lightsteelblue':'#b0c4de',\n    'lightyellow':'#ffffe0',\n    'lime':'#00ff00',\n    'limegreen':'#32cd32',\n    'linen':'#faf0e6',\n    'magenta':'#ff00ff',\n    'maroon':'#800000',\n    'mediumaquamarine':'#66cdaa',\n    'mediumblue':'#0000cd',\n    'mediumorchid':'#ba55d3',\n    'mediumpurple':'#9370d8',\n    'mediumseagreen':'#3cb371',\n    'mediumslateblue':'#7b68ee',\n    'mediumspringgreen':'#00fa9a',\n    'mediumturquoise':'#48d1cc',\n    'mediumvioletred':'#c71585',\n    'midnightblue':'#191970',\n    'mintcream':'#f5fffa',\n    'mistyrose':'#ffe4e1',\n    'moccasin':'#ffe4b5',\n    'navajowhite':'#ffdead',\n    'navy':'#000080',\n    'oldlace':'#fdf5e6',\n    'olive':'#808000',\n    'olivedrab':'#6b8e23',\n    'orange':'#ffa500',\n    'orangered':'#ff4500',\n    'orchid':'#da70d6',\n    'palegoldenrod':'#eee8aa',\n    'palegreen':'#98fb98',\n    'paleturquoise':'#afeeee',\n    'palevioletred':'#d87093',\n    'papayawhip':'#ffefd5',\n    'peachpuff':'#ffdab9',\n    'peru':'#cd853f',\n    'pink':'#ffc0cb',\n    'plum':'#dda0dd',\n    'powderblue':'#b0e0e6',\n    'purple':'#800080',\n    'rebeccapurple':'#663399',\n    'red':'#ff0000',\n    'rosybrown':'#bc8f8f',\n    'royalblue':'#4169e1',\n    'saddlebrown':'#8b4513',\n    'salmon':'#fa8072',\n    'sandybrown':'#f4a460',\n    'seagreen':'#2e8b57',\n    'seashell':'#fff5ee',\n    'sienna':'#a0522d',\n    'silver':'#c0c0c0',\n    'skyblue':'#87ceeb',\n    'slateblue':'#6a5acd',\n    'slategray':'#708090',\n    'slategrey':'#708090',\n    'snow':'#fffafa',\n    'springgreen':'#00ff7f',\n    'steelblue':'#4682b4',\n    'tan':'#d2b48c',\n    'teal':'#008080',\n    'thistle':'#d8bfd8',\n    'tomato':'#ff6347',\n    'turquoise':'#40e0d0',\n    'violet':'#ee82ee',\n    'wheat':'#f5deb3',\n    'white':'#ffffff',\n    'whitesmoke':'#f5f5f5',\n    'yellow':'#ffff00',\n    'yellowgreen':'#9acd32'\n};","export default {\n    length: {\n        'm': 1,\n        'cm': 0.01,\n        'mm': 0.001,\n        'in': 0.0254,\n        'px': 0.0254 / 96,\n        'pt': 0.0254 / 72,\n        'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n        's': 1,\n        'ms': 0.001\n    },\n    angle: {\n        'rad': 1 / (2 * Math.PI),\n        'deg': 1 / 360,\n        'grad': 1 / 400,\n        'turn': 1\n    }\n};","import colors from './colors';\nimport unitConversions from './unit-conversions';\n\nexport default { colors, unitConversions };\n","class Node {\n    constructor() {\n        this.parent = null;\n        this.visibilityBlocks = undefined;\n        this.nodeVisible = undefined;\n        this.rootNode = null;\n        this.parsed = null;\n\n        const self = this;\n        Object.defineProperty(this, 'currentFileInfo', {\n            get: function() { return self.fileInfo(); }\n        });\n        Object.defineProperty(this, 'index', {\n            get: function() { return self.getIndex(); }\n        });\n\n    }\n\n    setParent(nodes, parent) {\n        function set(node) {\n            if (node && node instanceof Node) {\n                node.parent = parent;\n            }\n        }\n        if (Array.isArray(nodes)) {\n            nodes.forEach(set);\n        }\n        else {\n            set(nodes);\n        }\n    }\n\n    getIndex() {\n        return this._index || (this.parent && this.parent.getIndex()) || 0;\n    }\n\n    fileInfo() {\n        return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\n    }\n\n    isRulesetLike() {\n        return false;\n    }\n\n    toCSS(context) {\n        const strs = [];\n        this.genCSS(context, {\n            add: function(chunk, fileInfo, index) {\n                strs.push(chunk);\n            },\n            isEmpty: function () {\n                return strs.length === 0;\n            }\n        });\n        return strs.join('');\n    }\n\n    genCSS(context, output) {\n        output.add(this.value);\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval() { return this; }\n\n    _operate(context, op, a, b) {\n        switch (op) {\n            case '+': return a + b;\n            case '-': return a - b;\n            case '*': return a * b;\n            case '/': return a / b;\n        }\n    }\n\n    fround(context, value) {\n        const precision = context && context.numPrecision;\n        // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n        return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\n    }\n\n    // Returns true if this node represents root of ast imported by reference\n    blocksVisibility() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        return this.visibilityBlocks !== 0;\n    }\n\n    addVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks + 1;\n    }\n\n    removeVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n            this.visibilityBlocks = 0;\n        }\n        this.visibilityBlocks = this.visibilityBlocks - 1;\n    }\n\n    // Turns on node visibility - if called node will be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureVisibility() {\n        this.nodeVisible = true;\n    }\n\n    // Turns off node visibility - if called node will NOT be shown in output regardless\n    // of whether it comes from import by reference or not\n    ensureInvisibility() {\n        this.nodeVisible = false;\n    }\n\n    // return values:\n    // false - the node must not be visible\n    // true - the node must be visible\n    // undefined or null - the node has the same visibility as its parent\n    isVisible() {\n        return this.nodeVisible;\n    }\n\n    visibilityInfo() {\n        return {\n            visibilityBlocks: this.visibilityBlocks,\n            nodeVisible: this.nodeVisible\n        };\n    }\n\n    copyVisibilityInfo(info) {\n        if (!info) {\n            return;\n        }\n        this.visibilityBlocks = info.visibilityBlocks;\n        this.nodeVisible = info.nodeVisible;\n    }\n}\n\nNode.compare = (a, b) => {\n    /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n\n    if ((a.compare) &&\n        // for \"symmetric results\" force toCSS-based comparison\n        // of Quoted or Anonymous if either value is one of those\n        !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n        return a.compare(b);\n    } else if (b.compare) {\n        return -b.compare(a);\n    } else if (a.type !== b.type) {\n        return undefined;\n    }\n\n    a = a.value;\n    b = b.value;\n    if (!Array.isArray(a)) {\n        return a === b ? 0 : undefined;\n    }\n    if (a.length !== b.length) {\n        return undefined;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (Node.compare(a[i], b[i]) !== 0) {\n            return undefined;\n        }\n    }\n    return 0;\n};\n\nNode.numericCompare = (a, b) => a  <  b ? -1\n    : a === b ?  0\n        : a  >  b ?  1 : undefined;\nexport default Node;\n","import Node from './node';\nimport colors from '../data/colors';\n\n//\n// RGB Colors - #ff0014, #eee\n//\nclass Color extends Node {\n    constructor(rgb, a, originalForm) {\n        super();\n\n        const self = this;\n        //\n        // The end goal here, is to parse the arguments\n        // into an integer triplet, such as `128, 255, 0`\n        //\n        // This facilitates operations and conversions.\n        //\n        if (Array.isArray(rgb)) {\n            this.rgb = rgb;\n        } else if (rgb.length >= 6) {\n            this.rgb = [];\n            rgb.match(/.{2}/g).map((c, i) => {\n                if (i < 3) {\n                    self.rgb.push(parseInt(c, 16));\n                } else {\n                    self.alpha = (parseInt(c, 16)) / 255;\n                }\n            });\n        } else {\n            this.rgb = [];\n            rgb.split('').map((c, i) => {\n                if (i < 3) {\n                    self.rgb.push(parseInt(c + c, 16));\n                } else {\n                    self.alpha = (parseInt(c + c, 16)) / 255;\n                }\n            });\n        }\n        this.alpha = this.alpha || (typeof a === 'number' ? a : 1);\n        if (typeof originalForm !== 'undefined') {\n            this.value = originalForm;\n        }\n    }\n\n    luma() {\n        let r = this.rgb[0] / 255;\n        let g = this.rgb[1] / 255;\n        let b = this.rgb[2] / 255;\n\n        r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n        g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n        b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    }\n\n    toCSS(context, doNotCompress) {\n        const compress = context && context.compress && !doNotCompress;\n        let color;\n        let alpha;\n        let colorFunction;\n        let args = [];\n\n        // `value` is set if this color was originally\n        // converted from a named color string so we need\n        // to respect this and try to output named color too.\n        alpha = this.fround(context, this.alpha);\n\n        if (this.value) {\n            if (this.value.indexOf('rgb') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'rgba';\n                }\n            } else if (this.value.indexOf('hsl') === 0) {\n                if (alpha < 1) {\n                    colorFunction = 'hsla';\n                } else {\n                    colorFunction = 'hsl';\n                }\n            } else {\n                return this.value;\n            }\n        } else {\n            if (alpha < 1) {\n                colorFunction = 'rgba';\n            }\n        }\n\n        switch (colorFunction) {\n            case 'rgba':\n                args = this.rgb.map(c => clamp(Math.round(c), 255)).concat(clamp(alpha, 1));\n                break;\n            case 'hsla':\n                args.push(clamp(alpha, 1));\n            case 'hsl':\n                color = this.toHSL();\n                args = [\n                    this.fround(context, color.h),\n                    `${this.fround(context, color.s * 100)}%`,\n                    `${this.fround(context, color.l * 100)}%`\n                ].concat(args);\n        }\n\n        if (colorFunction) {\n            // Values are capped between `0` and `255`, rounded and zero-padded.\n            return `${colorFunction}(${args.join(`,${compress ? '' : ' '}`)})`;\n        }\n\n        color = this.toRGB();\n\n        if (compress) {\n            const splitcolor = color.split('');\n\n            // Convert color to short format\n            if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n                color = `#${splitcolor[1]}${splitcolor[3]}${splitcolor[5]}`;\n            }\n        }\n\n        return color;\n    }\n\n    //\n    // Operations have to be done per-channel, if not,\n    // channels will spill onto each other. Once we have\n    // our result, in the form of an integer triplet,\n    // we create a new Color node to hold the result.\n    //\n    operate(context, op, other) {\n        const rgb = new Array(3);\n        const alpha = this.alpha * (1 - other.alpha) + other.alpha;\n        for (let c = 0; c < 3; c++) {\n            rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n        }\n        return new Color(rgb, alpha);\n    }\n\n    toRGB() {\n        return toHex(this.rgb);\n    }\n\n    toHSL() {\n        const r = this.rgb[0] / 255;\n        const g = this.rgb[1] / 255;\n        const b = this.rgb[2] / 255;\n        const a = this.alpha;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const l = (max + min) / 2;\n        const d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2;               break;\n                case b: h = (r - g) / d + 4;               break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, l, a };\n    }\n\n    // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n    toHSV() {\n        const r = this.rgb[0] / 255;\n        const g = this.rgb[1] / 255;\n        const b = this.rgb[2] / 255;\n        const a = this.alpha;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const v = max;\n\n        const d = max - min;\n        if (max === 0) {\n            s = 0;\n        } else {\n            s = d / max;\n        }\n\n        if (max === min) {\n            h = 0;\n        } else {\n            switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, v, a };\n    }\n\n    toARGB() {\n        return toHex([this.alpha * 255].concat(this.rgb));\n    }\n\n    compare(x) {\n        return (x.rgb &&\n            x.rgb[0] === this.rgb[0] &&\n            x.rgb[1] === this.rgb[1] &&\n            x.rgb[2] === this.rgb[2] &&\n            x.alpha  === this.alpha) ? 0 : undefined;\n    }\n}\n\nColor.prototype.type = 'Color';\n\nfunction clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n}\n\nfunction toHex(v) {\n    return `#${v.map(c => {\n        c = clamp(Math.round(c), 255);\n        return (c < 16 ? '0' : '') + c.toString(16);\n    }).join('')}`;\n}\n\nColor.fromKeyword = keyword => {\n    let c;\n    const key = keyword.toLowerCase();\n    if (colors.hasOwnProperty(key)) {\n        c = new Color(colors[key].slice(1));\n    }\n    else if (key === 'transparent') {\n        c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n        c.value = keyword;\n        return c;\n    }\n};\nexport default Color;\n","import Node from './node';\n\nclass Paren extends Node {\n    constructor(node) {\n        super();\n\n        this.value = node;\n    }\n\n    genCSS(context, output) {\n        output.add('(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    }\n\n    eval(context) {\n        return new Paren(this.value.eval(context));\n    }\n}\n\nParen.prototype.type = 'Paren';\nexport default Paren;\n","import Node from './node';\nconst _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n};\n\nclass Combinator extends Node {\n    constructor(value) {\n        super();\n\n        if (value === ' ') {\n            this.value = ' ';\n            this.emptyOrWhitespace = true;\n        } else {\n            this.value = value ? value.trim() : '';\n            this.emptyOrWhitespace = this.value === '';\n        }\n    }\n\n    genCSS(context, output) {\n        const spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n        output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n    }\n}\n\nCombinator.prototype.type = 'Combinator';\n\nexport default Combinator;\n","import Node from './node';\nimport Paren from './paren';\nimport Combinator from './combinator';\n\nclass Element extends Node {\n    constructor(combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.combinator = combinator instanceof Combinator ?\n            combinator : new Combinator(combinator);\n\n        if (typeof value === 'string') {\n            this.value = value.trim();\n        } else if (value) {\n            this.value = value;\n        } else {\n            this.value = '';\n        }\n        this.isVariable = isVariable;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.combinator, this);\n    }\n\n    accept(visitor) {\n        const value = this.value;\n        this.combinator = visitor.visit(this.combinator);\n        if (typeof value === 'object') {\n            this.value = visitor.visit(value);\n        }\n    }\n\n    eval(context) {\n        return new Element(this.combinator,\n            this.value.eval ? this.value.eval(context) : this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    }\n\n    clone() {\n        return new Element(this.combinator,\n            this.value,\n            this.isVariable,\n            this.getIndex(),\n            this.fileInfo(), this.visibilityInfo());\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n    }\n\n    toCSS(context = {}) {\n        let value = this.value;\n        const firstSelector = context.firstSelector;\n        if (value instanceof Paren) {\n            // selector in parens should not be affected by outer selector\n            // flags (breaks only interpolated selectors - see #1973)\n            context.firstSelector = true;\n        }\n        value = value.toCSS ? value.toCSS(context) : value;\n        context.firstSelector = firstSelector;\n        if (value === '' && this.combinator.value.charAt(0) === '&') {\n            return '';\n        } else {\n            return this.combinator.toCSS(context) + value;\n        }\n    }\n}\n\nElement.prototype.type = 'Element';\nexport default Element;\n","\nexport const Math = {\n    ALWAYS: 0,\n    PARENS_DIVISION: 1,\n    PARENS: 2,\n    STRICT_LEGACY: 3\n};\n\nexport const RewriteUrls = {\n    OFF: 0,\n    LOCAL: 1,\n    ALL: 2\n};","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","/* jshint proto: true */\nimport * as Constants from './constants';\nimport CloneHelper from 'clone';\n\nexport function getLocation(index, inputStream) {\n    let n = index + 1;\n    let line = null;\n    let column = -1;\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n        column++;\n    }\n\n    if (typeof index === 'number') {\n        line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n    }\n\n    return {\n        line,\n        column\n    };\n}\n\nexport function copyArray(arr) {\n    let i;\n    const length = arr.length;\n    const copy = new Array(length);\n\n    for (i = 0; i < length; i++) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\n\nexport function clone(obj) {\n    const cloned = {};\n    for (const prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n            cloned[prop] = obj[prop];\n        }\n    }\n    return cloned;\n}\n\nexport function defaults(obj1, obj2) {\n    let newObj = obj2 || {};\n    if (!obj2._defaults) {\n        newObj = {};\n        const defaults = CloneHelper(obj1);\n        newObj._defaults = defaults;\n        const cloned = obj2 ? CloneHelper(obj2) : {};\n        Object.assign(newObj, defaults, cloned);\n    }\n    return newObj;\n}\n\nexport function copyOptions(obj1, obj2) {\n    if (obj2 && obj2._defaults) {\n        return obj2;\n    }\n    const opts = defaults(obj1, obj2);\n    if (opts.strictMath) {\n        opts.math = Constants.Math.STRICT_LEGACY;\n    }\n    // Back compat with changed relativeUrls option\n    if (opts.relativeUrls) {\n        opts.rewriteUrls = Constants.RewriteUrls.ALL;\n    }\n    if (typeof opts.math === 'string') {\n        switch (opts.math.toLowerCase()) {\n            case 'always':\n                opts.math = Constants.Math.ALWAYS;\n                break;\n            case 'parens-division':\n                opts.math = Constants.Math.PARENS_DIVISION;\n                break;\n            case 'strict':\n            case 'parens':\n                opts.math = Constants.Math.PARENS;\n                break;\n            case 'strict-legacy':\n                opts.math = Constants.Math.STRICT_LEGACY;\n        }\n    }\n    if (typeof opts.rewriteUrls === 'string') {\n        switch (opts.rewriteUrls.toLowerCase()) {\n            case 'off':\n                opts.rewriteUrls = Constants.RewriteUrls.OFF;\n                break;\n            case 'local':\n                opts.rewriteUrls = Constants.RewriteUrls.LOCAL;\n                break;\n            case 'all':\n                opts.rewriteUrls = Constants.RewriteUrls.ALL;\n                break;\n        }\n    }\n    return opts;\n}\n\nexport function merge(obj1, obj2) {\n    for (const prop in obj2) {\n        if (obj2.hasOwnProperty(prop)) {\n            obj1[prop] = obj2[prop];\n        }\n    }\n    return obj1;\n}\n\nexport function flattenArray(arr, result = []) {\n    for (let i = 0, length = arr.length; i < length; i++) {\n        const value = arr[i];\n        if (Array.isArray(value)) {\n            flattenArray(value, result);\n        } else {\n            if (value !== undefined) {\n                result.push(value);\n            }\n        }\n    }\n    return result;\n}","import * as utils from './utils';\n/**\n * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n * Besides standard .message it keeps some additional data like a path to the file where the error\n * occurred along with line and column numbers.\n *\n * @class\n * @extends Error\n * @type {module.LessError}\n *\n * @prop {string} type\n * @prop {string} filename\n * @prop {number} index\n * @prop {number} line\n * @prop {number} column\n * @prop {number} callLine\n * @prop {number} callExtract\n * @prop {string[]} extract\n *\n * @param {Object} e              - An error object to wrap around or just a descriptive object\n * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n * @param {string} [currentFilename]\n */\nconst LessError = function LessError(e, fileContentMap, currentFilename) {\n    Error.call(this);\n\n    const filename = e.filename || currentFilename;\n\n    this.message = e.message;\n    this.stack = e.stack;\n\n    if (fileContentMap && filename) {\n        const input = fileContentMap.contents[filename];\n        const loc = utils.getLocation(e.index, input);\n        const line = loc.line;\n        const col  = loc.column;\n        const callLine = e.call && utils.getLocation(e.call, input).line;\n        const lines = input ? input.split('\\n') : '';\n\n        this.type = e.type || 'Syntax';\n        this.filename = filename;\n        this.index = e.index;\n        this.line = typeof line === 'number' ? line + 1 : null;\n        this.column = col;\n\n        if (!this.line && this.stack) {\n            const found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n\n            if (found) {\n                if (found[2]) {\n                    this.line = parseInt(found[2]) - 2;\n                }\n                if (found[3]) {\n                    this.column = parseInt(found[3]);\n                }\n            }\n        }\n\n        this.callLine = callLine + 1;\n        this.callExtract = lines[callLine];\n\n        this.extract = [\n            lines[this.line - 2],\n            lines[this.line - 1],\n            lines[this.line]\n        ];\n    }\n\n};\n\nif (typeof Object.create === 'undefined') {\n    const F = () => {};\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n} else {\n    LessError.prototype = Object.create(Error.prototype);\n}\n\nLessError.prototype.constructor = LessError;\n\n/**\n * An overridden version of the default Object.prototype.toString\n * which uses additional information to create a helpful message.\n *\n * @param {Object} options\n * @returns {string}\n */\nLessError.prototype.toString = function(options = {}) {\n    let message = '';\n    const extract = this.extract || [];\n    let error = [];\n    let stylize = str => str;\n    if (options.stylize) {\n        const type = typeof options.stylize;\n        if (type !== 'function') {\n            throw Error(`options.stylize should be a function, got a ${type}!`);\n        }\n        stylize = options.stylize;\n    }\n\n    if (this.line !== null) {\n        if (typeof extract[0] === 'string') {\n            error.push(stylize(`${this.line - 1} ${extract[0]}`, 'grey'));\n        }\n\n        if (typeof extract[1] === 'string') {\n            let errorTxt = `${this.line} `;\n            if (extract[1]) {\n                errorTxt += extract[1].slice(0, this.column) +\n                    stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\n                        extract[1].slice(this.column + 1), 'red'), 'inverse');\n            }\n            error.push(errorTxt);\n        }\n\n        if (typeof extract[2] === 'string') {\n            error.push(stylize(`${this.line + 1} ${extract[2]}`, 'grey'));\n        }\n        error = `${error.join('\\n') + stylize('', 'reset')}\\n`;\n    }\n\n    message += stylize(`${this.type}Error: ${this.message}`, 'red');\n    if (this.filename) {\n        message += stylize(' in ', 'red') + this.filename;\n    }\n    if (this.line) {\n        message += stylize(` on line ${this.line}, column ${this.column + 1}:`, 'grey');\n    }\n\n    message += `\\n${error}`;\n\n    if (this.callLine) {\n        message += `${stylize('from ', 'red') + (this.filename || '')}/n`;\n        message += `${stylize(this.callLine, 'grey')} ${this.callExtract}/n`;\n    }\n\n    return message;\n};\n\nexport default LessError;","import Node from './node';\nimport Element from './element';\nimport LessError from '../less-error';\n\nclass Selector extends Node {\n    constructor(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.extendList = extendList;\n        this.condition = condition;\n        this.evaldCondition = !condition;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.elements = this.getElements(elements);\n        this.mixinElements_ = undefined;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.elements, this);\n    }\n\n    accept(visitor) {\n        if (this.elements) {\n            this.elements = visitor.visitArray(this.elements);\n        }\n        if (this.extendList) {\n            this.extendList = visitor.visitArray(this.extendList);\n        }\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    }\n\n    createDerived(elements, extendList, evaldCondition) {\n        elements = this.getElements(elements);\n        const newSelector = new Selector(elements, extendList || this.extendList,\n            null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n        newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\n        newSelector.mediaEmpty = this.mediaEmpty;\n        return newSelector;\n    }\n\n    getElements(els) {\n        if (!els) {\n            return [new Element('', '&', false, this._index, this._fileInfo)];\n        }\n        if (typeof els === 'string') {\n            this.parse.parseNode(\n                els, \n                ['selector'],\n                this._index, \n                this._fileInfo, \n                function(err, result) {\n                    if (err) {\n                        throw new LessError({\n                            index: err.index,\n                            message: err.message\n                        }, this.parse.imports, this._fileInfo.filename);\n                    }\n                    els = result[0].elements;\n                });\n        }\n        return els;\n    }\n\n    createEmptySelectors() {\n        const el = new Element('', '&', false, this._index, this._fileInfo);\n        const sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n        sels[0].mediaEmpty = true;\n        return sels;\n    }\n\n    match(other) {\n        const elements = this.elements;\n        const len = elements.length;\n        let olen;\n        let i;\n\n        other = other.mixinElements();\n        olen = other.length;\n        if (olen === 0 || len < olen) {\n            return 0;\n        } else {\n            for (i = 0; i < olen; i++) {\n                if (elements[i].value !== other[i]) {\n                    return 0;\n                }\n            }\n        }\n\n        return olen; // return number of matched elements\n    }\n\n    mixinElements() {\n        if (this.mixinElements_) {\n            return this.mixinElements_;\n        }\n\n        let elements = this.elements.map( v => v.combinator.value + (v.value.value || v.value)).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n\n        if (elements) {\n            if (elements[0] === '&') {\n                elements.shift();\n            }\n        } else {\n            elements = [];\n        }\n\n        return (this.mixinElements_ = elements);\n    }\n\n    isJustParentSelector() {\n        return !this.mediaEmpty &&\n            this.elements.length === 1 &&\n            this.elements[0].value === '&' &&\n            (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n    }\n\n    eval(context) {\n        const evaldCondition = this.condition && this.condition.eval(context);\n        let elements = this.elements;\n        let extendList = this.extendList;\n\n        elements = elements && elements.map(e => e.eval(context));\n        extendList = extendList && extendList.map(extend => extend.eval(context));\n\n        return this.createDerived(elements, extendList, evaldCondition);\n    }\n\n    genCSS(context, output) {\n        let i;\n        let element;\n        if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n            output.add(' ', this.fileInfo(), this.getIndex());\n        }\n        for (i = 0; i < this.elements.length; i++) {\n            element = this.elements[i];\n            element.genCSS(context, output);\n        }\n    }\n\n    getIsOutput() {\n        return this.evaldCondition;\n    }\n}\n\nSelector.prototype.type = 'Selector';\nexport default Selector;\n","import Node from './node';\n\nclass Value extends Node {\n    constructor(value) {\n        super();\n\n        if (!value) {\n            throw new Error('Value requires an array argument');\n        }\n        if (!Array.isArray(value)) {\n            this.value = [ value ];\n        }\n        else {\n            this.value = value;\n        }\n    }\n\n    accept(visitor) {\n        if (this.value) {\n            this.value = visitor.visitArray(this.value);\n        }\n    }\n\n    eval(context) {\n        if (this.value.length === 1) {\n            return this.value[0].eval(context);\n        } else {\n            return new Value(this.value.map(v => v.eval(context)));\n        }\n    }\n\n    genCSS(context, output) {\n        let i;\n        for (i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (i + 1 < this.value.length) {\n                output.add((context && context.compress) ? ',' : ', ');\n            }\n        }\n    }\n}\n\nValue.prototype.type = 'Value';\nexport default Value;\n","import Node from './node';\n\nclass Keyword extends Node {\n    constructor(value) {\n        super();\n\n        this.value = value;\n    }\n\n    genCSS(context, output) {\n        if (this.value === '%') { throw { type: 'Syntax', message: 'Invalid % without number' }; }\n        output.add(this.value);\n    }\n}\n\nKeyword.prototype.type = 'Keyword';\n\nKeyword.True = new Keyword('true');\nKeyword.False = new Keyword('false');\n\nexport default Keyword;\n","import Node from './node';\n\nclass Anonymous extends Node {\n    constructor(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n        super();\n\n        this.value = value;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.mapLines = mapLines;\n        this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n        this.allowRoot = true;\n        this.copyVisibilityInfo(visibilityInfo);\n    }\n\n    eval() {\n        return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n    }\n\n    compare(other) {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n    }\n\n    isRulesetLike() {\n        return this.rulesetLike;\n    }\n\n    genCSS(context, output) {\n        this.nodeVisible = Boolean(this.value);\n        if (this.nodeVisible) {\n            output.add(this.value, this._fileInfo, this._index, this.mapLines);\n        }\n    }\n}\n\nAnonymous.prototype.type = 'Anonymous';\nexport default Anonymous;\n","import Node from './node';\nimport Value from './value';\nimport Keyword from './keyword';\nimport Anonymous from './anonymous';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nclass Declaration extends Node {\n    constructor(name, value, important, merge, index, currentFileInfo, inline, variable) {\n        super();\n\n        this.name = name;\n        this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\n        this.important = important ? ` ${important.trim()}` : '';\n        this.merge = merge;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.inline = inline || false;\n        this.variable = (variable !== undefined) ? variable\n            : (name.charAt && (name.charAt(0) === '@'));\n        this.allowRoot = true;\n        this.setParent(this.value, this);\n    }\n\n    genCSS(context, output) {\n        output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n        try {\n            this.value.genCSS(context, output);\n        }\n        catch (e) {\n            e.index = this._index;\n            e.filename = this._fileInfo.filename;\n            throw e;\n        }\n        output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\n    }\n\n    eval(context) {\n        let mathBypass = false;\n        let prevMath;\n        let name = this.name;\n        let evaldValue;\n        let variable = this.variable;\n        if (typeof name !== 'string') {\n            // expand 'primitive' name directly to get\n            // things faster (~10% for benchmark.less):\n            name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                name[0].value : evalName(context, name);\n            variable = false; // never treat expanded interpolation as new variable name\n        }\n\n        // @todo remove when parens-division is default\n        if (name === 'font' && context.math === MATH.ALWAYS) {\n            mathBypass = true;\n            prevMath = context.math;\n            context.math = MATH.PARENS_DIVISION;\n        }\n        try {\n            context.importantScope.push({});\n            evaldValue = this.value.eval(context);\n\n            if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n                throw { message: 'Rulesets cannot be evaluated on a property.',\n                    index: this.getIndex(), filename: this.fileInfo().filename };\n            }\n            let important = this.important;\n            const importantResult = context.importantScope.pop();\n            if (!important && importantResult.important) {\n                important = importantResult.important;\n            }\n\n            return new Declaration(name,\n                evaldValue,\n                important,\n                this.merge,\n                this.getIndex(), this.fileInfo(), this.inline,\n                variable);\n        }\n        catch (e) {\n            if (typeof e.index !== 'number') {\n                e.index = this.getIndex();\n                e.filename = this.fileInfo().filename;\n            }\n            throw e;\n        }\n        finally {\n            if (mathBypass) {\n                context.math = prevMath;\n            }\n        }\n    }\n\n    makeImportant() {\n        return new Declaration(this.name,\n            this.value,\n            '!important',\n            this.merge,\n            this.getIndex(), this.fileInfo(), this.inline);\n    }\n}\n\nfunction evalName(context, name) {\n    let value = '';\n    let i;\n    const n = name.length;\n    const output = {add: function (s) {value += s;}};\n    for (i = 0; i < n; i++) {\n        name[i].eval(context).genCSS(context, output);\n    }\n    return value;\n}\n\nDeclaration.prototype.type = 'Declaration';\nexport default Declaration;","const debugInfo = (context, ctx, lineSeparator) => {\n    let result = '';\n    if (context.dumpLineNumbers && !context.compress) {\n        switch (context.dumpLineNumbers) {\n            case 'comments':\n                result = debugInfo.asComment(ctx);\n                break;\n            case 'mediaquery':\n                result = debugInfo.asMediaQuery(ctx);\n                break;\n            case 'all':\n                result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\n                break;\n        }\n    }\n    return result;\n};\n\ndebugInfo.asComment = ctx => `/* line ${ctx.debugInfo.lineNumber}, ${ctx.debugInfo.fileName} */\\n`;\n\ndebugInfo.asMediaQuery = ctx => {\n    let filenameWithProtocol = ctx.debugInfo.fileName;\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n        filenameWithProtocol = `file://${filenameWithProtocol}`;\n    }\n    return `@media -sass-debug-info{filename{font-family:${filenameWithProtocol.replace(/([.:\\/\\\\])/g, a => {\n        if (a == '\\\\') {\n            a = '\\/';\n        }\n        return `\\\\${a}`;\n    })}}line{font-family:\\\\00003${ctx.debugInfo.lineNumber}}}\\n`;\n};\n\nexport default debugInfo;\n","import Node from './node';\nimport getDebugInfo from './debug-info';\n\nclass Comment extends Node {\n    constructor(value, isLineComment, index, currentFileInfo) {\n        super();\n\n        this.value = value;\n        this.isLineComment = isLineComment;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.allowRoot = true;\n    }\n\n    genCSS(context, output) {\n        if (this.debugInfo) {\n            output.add(getDebugInfo(context, this), this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n    }\n\n    isSilent(context) {\n        const isCompressed = context.compress && this.value[2] !== '!';\n        return this.isLineComment || isCompressed;\n    }\n}\n\nComment.prototype.type = 'Comment';\nexport default Comment;\n","const contexts = {};\nexport default contexts;\nimport * as Constants from './constants';\n\nconst copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) { return; }\n\n    for (let i = 0; i < propertiesToCopy.length; i++) {\n        if (original.hasOwnProperty(propertiesToCopy[i])) {\n            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n        }\n    }\n};\n\n/*\n parse is used whilst parsing\n */\nconst parseCopyProperties = [\n    // options\n    'paths',            // option - unmodified - paths to search for imports on\n    'rewriteUrls',      // option - whether to adjust URL's to be relative\n    'rootpath',         // option - rootpath to append to URL's\n    'strictImports',    // option -\n    'insecure',         // option - whether to allow imports from insecure ssl hosts\n    'dumpLineNumbers',  // option - whether to dump line numbers\n    'compress',         // option - whether to compress\n    'syncImport',       // option - whether to import synchronously\n    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.\n    'mime',             // browser only - mime type for sheet import\n    'useFileCache',     // browser only - whether to use the per file session cache\n    // context\n    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.\n    // Used by the import manager to stop multiple import visitors being created.\n    'pluginManager'     // Used as the plugin manager for the session\n];\n\ncontexts.Parse = function(options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n};\n\nconst evalCopyProperties = [\n    'paths',             // additional include paths\n    'compress',          // whether to compress\n    'math',              // whether math has to be within parenthesis\n    'strictUnits',       // whether units need to evaluate correctly\n    'sourceMap',         // whether to output a source map\n    'importMultiple',    // whether we are currently importing multiple copies\n    'urlArgs',           // whether to add args into url tokens\n    'javascriptEnabled', // option - whether Inline JavaScript is enabled. if undefined, defaults to false\n    'pluginManager',     // Used as the plugin manager for the session\n    'importantScope',    // used to bubble up !important statements\n    'rewriteUrls'        // option - whether to adjust URL's to be relative\n];\n\nfunction isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n}\n\nfunction isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n}\n\ncontexts.Eval = class {\n    constructor(options, frames) {\n        copyFromOriginal(options, this, evalCopyProperties);\n\n        if (typeof this.paths === 'string') { this.paths = [this.paths]; }\n\n        this.frames = frames || [];\n        this.importantScope = this.importantScope || [];\n        this.inCalc = false;\n        this.mathOn = true;\n    }\n\n    enterCalc() {\n        if (!this.calcStack) {\n            this.calcStack = [];\n        }\n        this.calcStack.push(true);\n        this.inCalc = true;\n    }\n\n    exitCalc() {\n        this.calcStack.pop();\n        if (!this.calcStack) {\n            this.inCalc = false;\n        }\n    }\n\n    inParenthesis() {\n        if (!this.parensStack) {\n            this.parensStack = [];\n        }\n        this.parensStack.push(true);\n    };\n\n    outOfParenthesis() {\n        this.parensStack.pop();\n    };\n\n    isMathOn(op) {\n        if (!this.mathOn) {\n            return false;\n        }\n        if (op === '/' && this.math !== Constants.Math.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n            return false;\n        }\n        if (this.math > Constants.Math.PARENS_DIVISION) {\n            return this.parensStack && this.parensStack.length;\n        }\n        return true;\n    }\n\n    pathRequiresRewrite(path) {\n        const isRelative = this.rewriteUrls === Constants.RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n\n        return isRelative(path);\n    }\n\n    rewritePath(path, rootpath) {\n        let newPath;\n\n        rootpath = rootpath || '';\n        newPath = this.normalizePath(rootpath + path);\n\n        // If a path was explicit relative and the rootpath was not an absolute path\n        // we must ensure that the new path is also explicit relative.\n        if (isPathLocalRelative(path) &&\n            isPathRelative(rootpath) &&\n            isPathLocalRelative(newPath) === false) {\n            newPath = `./${newPath}`;\n        }\n\n        return newPath;\n    }\n\n    normalizePath(path) {\n        const segments = path.split('/').reverse();\n        let segment;\n\n        path = [];\n        while (segments.length !== 0) {\n            segment = segments.pop();\n            switch ( segment ) {\n                case '.':\n                    break;\n                case '..':\n                    if ((path.length === 0) || (path[path.length - 1] === '..')) {\n                        path.push( segment );\n                    } else {\n                        path.pop();\n                    }\n                    break;\n                default:\n                    path.push(segment);\n                    break;\n            }\n        }\n\n        return path.join('/');\n    }\n}\n","function makeRegistry( base ) {\n    return {\n        _data: {},\n        add: function(name, func) {\n            // precautionary case conversion, as later querying of\n            // the registry by function-caller uses lower case as well.\n            name = name.toLowerCase();\n\n            if (this._data.hasOwnProperty(name)) {\n                // TODO warn\n            }\n            this._data[name] = func;\n        },\n        addMultiple: function(functions) {\n            Object.keys(functions).forEach(\n                name => {\n                    this.add(name, functions[name]);\n                });\n        },\n        get: function(name) {\n            return this._data[name] || ( base && base.get( name ));\n        },\n        getLocalFunctions: function() {\n            return this._data;\n        },\n        inherit: function() {\n            return makeRegistry( this );\n        },\n        create: function(base) {\n            return makeRegistry(base);\n        }\n    };\n}\n\nexport default makeRegistry( null );","import Keyword from '../tree/keyword';\n\nconst defaultFunc = {\n    eval: function () {\n        const v = this.value_;\n        const e = this.error_;\n        if (e) {\n            throw e;\n        }\n        if (v != null) {\n            return v ? Keyword.True : Keyword.False;\n        }\n    },\n    value: function (v) {\n        this.value_ = v;\n    },\n    error: function (e) {\n        this.error_ = e;\n    },\n    reset: function () {\n        this.value_ = this.error_ = null;\n    }\n};\n\nexport default defaultFunc;\n","import Node from './node';\nimport Declaration from './declaration';\nimport Keyword from './keyword';\nimport Comment from './comment';\nimport Paren from './paren';\nimport Selector from './selector';\nimport Element from './element';\nimport Anonymous from './anonymous';\nimport contexts from '../contexts';\nimport globalFunctionRegistry from '../functions/function-registry';\nimport defaultFunc from '../functions/default';\nimport getDebugInfo from './debug-info';\nimport * as utils from '../utils';\n\nclass Ruleset extends Node {\n    constructor(selectors, rules, strictImports, visibilityInfo) {\n        super();\n\n        this.selectors = selectors;\n        this.rules = rules;\n        this._lookups = {};\n        this._variables = null;\n        this._properties = null;\n        this.strictImports = strictImports;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n\n        this.setParent(this.selectors, this);\n        this.setParent(this.rules, this);\n\n    }\n\n    isRulesetLike() {\n        return true;\n    }\n\n    accept(visitor) {\n        if (this.paths) {\n            this.paths = visitor.visitArray(this.paths, true);\n        } else if (this.selectors) {\n            this.selectors = visitor.visitArray(this.selectors);\n        }\n        if (this.rules && this.rules.length) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    }\n\n    eval(context) {\n        const that = this;\n        let selectors;\n        let selCnt;\n        let selector;\n        let i;\n        let hasVariable;\n        let hasOnePassingSelector = false;\n\n        if (this.selectors && (selCnt = this.selectors.length)) {\n            selectors = new Array(selCnt);\n            defaultFunc.error({\n                type: 'Syntax',\n                message: 'it is currently only allowed in parametric mixin guards,'\n            });\n\n            for (i = 0; i < selCnt; i++) {\n                selector = this.selectors[i].eval(context);\n                for (var j = 0; j < selector.elements.length; j++) {\n                    if (selector.elements[j].isVariable) {\n                        hasVariable = true;\n                        break;\n                    }\n                }\n                selectors[i] = selector;\n                if (selector.evaldCondition) {\n                    hasOnePassingSelector = true;\n                }\n            }\n\n            if (hasVariable) {\n                const toParseSelectors = new Array(selCnt);\n                for (i = 0; i < selCnt; i++) {\n                    selector = selectors[i];\n                    toParseSelectors[i] = selector.toCSS(context);\n                }\n                this.parse.parseNode(\n                    toParseSelectors.join(','),\n                    [\"selectors\"], \n                    selectors[0].getIndex(), \n                    selectors[0].fileInfo(), \n                    (err, result) => {\n                        if (result) {\n                            selectors = utils.flattenArray(result);\n                        }\n                    });\n            }\n\n            defaultFunc.reset();\n        } else {\n            hasOnePassingSelector = true;\n        }\n\n        let rules = this.rules ? utils.copyArray(this.rules) : null;\n        const ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\n        let rule;\n        let subRule;\n\n        ruleset.originalRuleset = this;\n        ruleset.root = this.root;\n        ruleset.firstRoot = this.firstRoot;\n        ruleset.allowImports = this.allowImports;\n\n        if (this.debugInfo) {\n            ruleset.debugInfo = this.debugInfo;\n        }\n\n        if (!hasOnePassingSelector) {\n            rules.length = 0;\n        }\n\n        // inherit a function registry from the frames stack when possible;\n        // otherwise from the global registry\n        ruleset.functionRegistry = (frames => {\n            let i = 0;\n            const n = frames.length;\n            let found;\n            for ( ; i !== n ; ++i ) {\n                found = frames[ i ].functionRegistry;\n                if ( found ) { return found; }\n            }\n            return globalFunctionRegistry;\n        })(context.frames).inherit();\n\n        // push the current ruleset to the frames stack\n        const ctxFrames = context.frames;\n        ctxFrames.unshift(ruleset);\n\n        // currrent selectors\n        let ctxSelectors = context.selectors;\n        if (!ctxSelectors) {\n            context.selectors = ctxSelectors = [];\n        }\n        ctxSelectors.unshift(this.selectors);\n\n        // Evaluate imports\n        if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n            ruleset.evalImports(context);\n        }\n\n        // Store the frames around mixin definitions,\n        // so they can be evaluated like closures when the time comes.\n        const rsRules = ruleset.rules;\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.evalFirst) {\n                rsRules[i] = rule.eval(context);\n            }\n        }\n\n        const mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n\n        // Evaluate mixin calls.\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (rule.type === 'MixinCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).filter(r => {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope if the variable is\n                        // already there. consider returning false here\n                        // but we need a way to \"return\" variable from mixins\n                        return !(ruleset.variable(r.name));\n                    }\n                    return true;\n                });\n                rsRules.splice(...[i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            } else if (rule.type ===  'VariableCall') {\n                /* jshint loopfunc:true */\n                rules = rule.eval(context).rules.filter(r => {\n                    if ((r instanceof Declaration) && r.variable) {\n                        // do not pollute the scope at all\n                        return false;\n                    }\n                    return true;\n                });\n                rsRules.splice(...[i, 1].concat(rules));\n                i += rules.length - 1;\n                ruleset.resetCache();\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            if (!rule.evalFirst) {\n                rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n            }\n        }\n\n        // Evaluate everything else\n        for (i = 0; (rule = rsRules[i]); i++) {\n            // for rulesets, check if it is a css guard and can be removed\n            if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n                // check if it can be folded in (e.g. & where)\n                if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                    rsRules.splice(i--, 1);\n\n                    for (var j = 0; (subRule = rule.rules[j]); j++) {\n                        if (subRule instanceof Node) {\n                            subRule.copyVisibilityInfo(rule.visibilityInfo());\n                            if (!(subRule instanceof Declaration) || !subRule.variable) {\n                                rsRules.splice(++i, 0, subRule);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Pop the stack\n        ctxFrames.shift();\n        ctxSelectors.shift();\n\n        if (context.mediaBlocks) {\n            for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n                context.mediaBlocks[i].bubbleSelectors(selectors);\n            }\n        }\n\n        return ruleset;\n    }\n\n    evalImports(context) {\n        const rules = this.rules;\n        let i;\n        let importRules;\n        if (!rules) { return; }\n\n        for (i = 0; i < rules.length; i++) {\n            if (rules[i].type === 'Import') {\n                importRules = rules[i].eval(context);\n                if (importRules && (importRules.length || importRules.length === 0)) {\n                    rules.splice(...[i, 1].concat(importRules));\n                    i += importRules.length - 1;\n                } else {\n                    rules.splice(i, 1, importRules);\n                }\n                this.resetCache();\n            }\n        }\n    }\n\n    makeImportant() {\n        const result = new Ruleset(this.selectors, this.rules.map(r => {\n            if (r.makeImportant) {\n                return r.makeImportant();\n            } else {\n                return r;\n            }\n        }), this.strictImports, this.visibilityInfo());\n\n        return result;\n    }\n\n    matchArgs(args) {\n        return !args || args.length === 0;\n    }\n\n    // lets you call a css selector with a guard\n    matchCondition(args, context) {\n        const lastSelector = this.selectors[this.selectors.length - 1];\n        if (!lastSelector.evaldCondition) {\n            return false;\n        }\n        if (lastSelector.condition &&\n            !lastSelector.condition.eval(\n                new contexts.Eval(context,\n                    context.frames))) {\n            return false;\n        }\n        return true;\n    }\n\n    resetCache() {\n        this._rulesets = null;\n        this._variables = null;\n        this._properties = null;\n        this._lookups = {};\n    }\n\n    variables() {\n        if (!this._variables) {\n            this._variables = !this.rules ? {} : this.rules.reduce((hash, r) => {\n                if (r instanceof Declaration && r.variable === true) {\n                    hash[r.name] = r;\n                }\n                // when evaluating variables in an import statement, imports have not been eval'd\n                // so we need to go inside import statements.\n                // guard against root being a string (in the case of inlined less)\n                if (r.type === 'Import' && r.root && r.root.variables) {\n                    const vars = r.root.variables();\n                    for (const name in vars) {\n                        if (vars.hasOwnProperty(name)) {\n                            hash[name] = r.root.variable(name);\n                        }\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._variables;\n    }\n\n    properties() {\n        if (!this._properties) {\n            this._properties = !this.rules ? {} : this.rules.reduce((hash, r) => {\n                if (r instanceof Declaration && r.variable !== true) {\n                    const name = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\n                        r.name[0].value : r.name;\n                    // Properties don't overwrite as they can merge\n                    if (!hash[`$${name}`]) {\n                        hash[`$${name}`] = [ r ];\n                    }\n                    else {\n                        hash[`$${name}`].push(r);\n                    }\n                }\n                return hash;\n            }, {});\n        }\n        return this._properties;\n    }\n\n    variable(name) {\n        const decl = this.variables()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    }\n\n    property(name) {\n        const decl = this.properties()[name];\n        if (decl) {\n            return this.parseValue(decl);\n        }\n    }\n\n    lastDeclaration() {\n        for (let i = this.rules.length; i > 0; i--) {\n            const decl = this.rules[i - 1];\n            if (decl instanceof Declaration) {\n                return this.parseValue(decl);\n            }\n        }\n    }\n\n    parseValue(toParse) {\n        const self = this;\n        function transformDeclaration(decl) {\n            if (decl.value instanceof Anonymous && !decl.parsed) {\n                if (typeof decl.value.value === 'string') {\n                    this.parse.parseNode(\n                        decl.value.value,\n                        ['value', 'important'], \n                        decl.value.getIndex(), \n                        decl.fileInfo(), \n                        (err, result) => {\n                            if (err) {\n                                decl.parsed = true;\n                            }\n                            if (result) {\n                                decl.value = result[0];\n                                decl.important = result[1] || '';\n                                decl.parsed = true;\n                            }\n                        });\n                } else {\n                    decl.parsed = true;\n                }\n\n                return decl;\n            }\n            else {\n                return decl;\n            }\n        }\n        if (!Array.isArray(toParse)) {\n            return transformDeclaration.call(self, toParse);\n        }\n        else {\n            const nodes = [];\n            toParse.forEach(n => {\n                nodes.push(transformDeclaration.call(self, n));\n            });\n            return nodes;\n        }\n    }\n\n    rulesets() {\n        if (!this.rules) { return []; }\n\n        const filtRules = [];\n        const rules = this.rules;\n        let i;\n        let rule;\n\n        for (i = 0; (rule = rules[i]); i++) {\n            if (rule.isRuleset) {\n                filtRules.push(rule);\n            }\n        }\n\n        return filtRules;\n    }\n\n    prependRule(rule) {\n        const rules = this.rules;\n        if (rules) {\n            rules.unshift(rule);\n        } else {\n            this.rules = [ rule ];\n        }\n        this.setParent(rule, this);\n    }\n\n    find(selector, self = this, filter) {\n        const rules = [];\n        let match;\n        let foundMixins;\n        const key = selector.toCSS();\n\n        if (key in this._lookups) { return this._lookups[key]; }\n\n        this.rulesets().forEach(rule => {\n            if (rule !== self) {\n                for (let j = 0; j < rule.selectors.length; j++) {\n                    match = selector.match(rule.selectors[j]);\n                    if (match) {\n                        if (selector.elements.length > match) {\n                            if (!filter || filter(rule)) {\n                                foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                                for (let i = 0; i < foundMixins.length; ++i) {\n                                    foundMixins[i].path.push(rule);\n                                }\n                                Array.prototype.push.apply(rules, foundMixins);\n                            }\n                        } else {\n                            rules.push({ rule, path: []});\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n        this._lookups[key] = rules;\n        return rules;\n    }\n\n    genCSS(context, output) {\n        let i;\n        let j;\n        const charsetRuleNodes = [];\n        let ruleNodes = [];\n\n        let // Line number debugging\n            debugInfo;\n\n        let rule;\n        let path;\n\n        context.tabLevel = (context.tabLevel || 0);\n\n        if (!this.root) {\n            context.tabLevel++;\n        }\n\n        const tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\n        const tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\n        let sep;\n\n        let charsetNodeIndex = 0;\n        let importNodeIndex = 0;\n        for (i = 0; (rule = this.rules[i]); i++) {\n            if (rule instanceof Comment) {\n                if (importNodeIndex === i) {\n                    importNodeIndex++;\n                }\n                ruleNodes.push(rule);\n            } else if (rule.isCharset && rule.isCharset()) {\n                ruleNodes.splice(charsetNodeIndex, 0, rule);\n                charsetNodeIndex++;\n                importNodeIndex++;\n            } else if (rule.type === 'Import') {\n                ruleNodes.splice(importNodeIndex, 0, rule);\n                importNodeIndex++;\n            } else {\n                ruleNodes.push(rule);\n            }\n        }\n        ruleNodes = charsetRuleNodes.concat(ruleNodes);\n\n        // If this is the root node, we don't render\n        // a selector, or {}.\n        if (!this.root) {\n            debugInfo = getDebugInfo(context, this, tabSetStr);\n\n            if (debugInfo) {\n                output.add(debugInfo);\n                output.add(tabSetStr);\n            }\n\n            const paths = this.paths;\n            const pathCnt = paths.length;\n            let pathSubCnt;\n\n            sep = context.compress ? ',' : (`,\\n${tabSetStr}`);\n\n            for (i = 0; i < pathCnt; i++) {\n                path = paths[i];\n                if (!(pathSubCnt = path.length)) { continue; }\n                if (i > 0) { output.add(sep); }\n\n                context.firstSelector = true;\n                path[0].genCSS(context, output);\n\n                context.firstSelector = false;\n                for (j = 1; j < pathSubCnt; j++) {\n                    path[j].genCSS(context, output);\n                }\n            }\n\n            output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n        }\n\n        // Compile rules and rulesets\n        for (i = 0; (rule = ruleNodes[i]); i++) {\n\n            if (i + 1 === ruleNodes.length) {\n                context.lastRule = true;\n            }\n\n            const currentLastRule = context.lastRule;\n            if (rule.isRulesetLike(rule)) {\n                context.lastRule = false;\n            }\n\n            if (rule.genCSS) {\n                rule.genCSS(context, output);\n            } else if (rule.value) {\n                output.add(rule.value.toString());\n            }\n\n            context.lastRule = currentLastRule;\n\n            if (!context.lastRule && rule.isVisible()) {\n                output.add(context.compress ? '' : (`\\n${tabRuleStr}`));\n            } else {\n                context.lastRule = false;\n            }\n        }\n\n        if (!this.root) {\n            output.add((context.compress ? '}' : `\\n${tabSetStr}}`));\n            context.tabLevel--;\n        }\n\n        if (!output.isEmpty() && !context.compress && this.firstRoot) {\n            output.add('\\n');\n        }\n    }\n\n    joinSelectors(paths, context, selectors) {\n        for (let s = 0; s < selectors.length; s++) {\n            this.joinSelector(paths, context, selectors[s]);\n        }\n    }\n\n    joinSelector(paths, context, selector) {\n        function createParenthesis(elementsToPak, originalElement) {\n            let replacementParen;\n            let j;\n            if (elementsToPak.length === 0) {\n                replacementParen = new Paren(elementsToPak[0]);\n            } else {\n                const insideParent = new Array(elementsToPak.length);\n                for (j = 0; j < elementsToPak.length; j++) {\n                    insideParent[j] = new Element(\n                        null,\n                        elementsToPak[j],\n                        originalElement.isVariable,\n                        originalElement._index,\n                        originalElement._fileInfo\n                    );\n                }\n                replacementParen = new Paren(new Selector(insideParent));\n            }\n            return replacementParen;\n        }\n\n        function createSelector(containedElement, originalElement) {\n            let element;\n            let selector;\n            element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            selector = new Selector([element]);\n            return selector;\n        }\n\n        // joins selector path from `beginningPath` with selector path in `addPath`\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns concatenated path\n        function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n            let newSelectorPath;\n            let lastSelector;\n            let newJoinedSelector;\n            // our new selector path\n            newSelectorPath = [];\n\n            // construct the joined selector - if & is the first thing this will be empty,\n            // if not newJoinedSelector will be the last set of elements in the selector\n            if (beginningPath.length > 0) {\n                newSelectorPath = utils.copyArray(beginningPath);\n                lastSelector = newSelectorPath.pop();\n                newJoinedSelector = originalSelector.createDerived(utils.copyArray(lastSelector.elements));\n            }\n            else {\n                newJoinedSelector = originalSelector.createDerived([]);\n            }\n\n            if (addPath.length > 0) {\n                // /deep/ is a CSS4 selector - (removed, so should deprecate)\n                // that is valid without anything in front of it\n                // so if the & does not have a combinator that is \"\" or \" \" then\n                // and there is a combinator on the parent, then grab that.\n                // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n                let combinator = replacedElement.combinator;\n\n                const parentEl = addPath[0].elements[0];\n                if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                    combinator = parentEl.combinator;\n                }\n                // join the elements so far with the first part of the parent\n                newJoinedSelector.elements.push(new Element(\n                    combinator,\n                    parentEl.value,\n                    replacedElement.isVariable,\n                    replacedElement._index,\n                    replacedElement._fileInfo\n                ));\n                newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n            }\n\n            // now add the joined selector - but only if it is not empty\n            if (newJoinedSelector.elements.length !== 0) {\n                newSelectorPath.push(newJoinedSelector);\n            }\n\n            // put together the parent selectors after the join (e.g. the rest of the parent)\n            if (addPath.length > 1) {\n                let restOfPath = addPath.slice(1);\n                restOfPath = restOfPath.map(selector => selector.createDerived(selector.elements, []));\n                newSelectorPath = newSelectorPath.concat(restOfPath);\n            }\n            return newSelectorPath;\n        }\n\n        // joins selector path from `beginningPath` with every selector path in `addPaths` array\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns array with all concatenated paths\n        function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {\n            let j;\n            for (j = 0; j < beginningPath.length; j++) {\n                const newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n                result.push(newSelectorPath);\n            }\n            return result;\n        }\n\n        function mergeElementsOnToSelectors(elements, selectors) {\n            let i;\n            let sel;\n\n            if (elements.length === 0) {\n                return ;\n            }\n            if (selectors.length === 0) {\n                selectors.push([ new Selector(elements) ]);\n                return;\n            }\n\n            for (i = 0; (sel = selectors[i]); i++) {\n                // if the previous thing in sel is a parent this needs to join on to it\n                if (sel.length > 0) {\n                    sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n                }\n                else {\n                    sel.push(new Selector(elements));\n                }\n            }\n        }\n\n        // replace all parent selectors inside `inSelector` by content of `context` array\n        // resulting selectors are returned inside `paths` array\n        // returns true if `inSelector` contained at least one parent selector\n        function replaceParentSelector(paths, context, inSelector) {\n            // The paths are [[Selector]]\n            // The first list is a list of comma separated selectors\n            // The inner list is a list of inheritance separated selectors\n            // e.g.\n            // .a, .b {\n            //   .c {\n            //   }\n            // }\n            // == [[.a] [.c]] [[.b] [.c]]\n            //\n            let i;\n\n            let j;\n            let k;\n            let currentElements;\n            let newSelectors;\n            let selectorsMultiplied;\n            let sel;\n            let el;\n            let hadParentSelector = false;\n            let length;\n            let lastSelector;\n            function findNestedSelector(element) {\n                let maybeSelector;\n                if (!(element.value instanceof Paren)) {\n                    return null;\n                }\n\n                maybeSelector = element.value.value;\n                if (!(maybeSelector instanceof Selector)) {\n                    return null;\n                }\n\n                return maybeSelector;\n            }\n\n            // the elements from the current selector so far\n            currentElements = [];\n            // the current list of new selectors to add to the path.\n            // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n            // by the parents\n            newSelectors = [\n                []\n            ];\n\n            for (i = 0; (el = inSelector.elements[i]); i++) {\n                // non parent reference elements just get added\n                if (el.value !== '&') {\n                    const nestedSelector = findNestedSelector(el);\n                    if (nestedSelector != null) {\n                        // merge the current list of non parent selector elements\n                        // on to the current list of selectors to add\n                        mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                        const nestedPaths = [];\n                        let replaced;\n                        const replacedNewSelectors = [];\n                        replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                        hadParentSelector = hadParentSelector || replaced;\n                        // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                        for (k = 0; k < nestedPaths.length; k++) {\n                            const replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                            addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                        }\n                        newSelectors = replacedNewSelectors;\n                        currentElements = [];\n                    } else {\n                        currentElements.push(el);\n                    }\n\n                } else {\n                    hadParentSelector = true;\n                    // the new list of selectors to add\n                    selectorsMultiplied = [];\n\n                    // merge the current list of non parent selector elements\n                    // on to the current list of selectors to add\n                    mergeElementsOnToSelectors(currentElements, newSelectors);\n\n                    // loop through our current selectors\n                    for (j = 0; j < newSelectors.length; j++) {\n                        sel = newSelectors[j];\n                        // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                        // whether there are parents or not\n                        if (context.length === 0) {\n                            // the combinator used on el should now be applied to the next element instead so that\n                            // it is not lost\n                            if (sel.length > 0) {\n                                sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                            }\n                            selectorsMultiplied.push(sel);\n                        }\n                        else {\n                            // and the parent selectors\n                            for (k = 0; k < context.length; k++) {\n                                // We need to put the current selectors\n                                // then join the last selector's elements on to the parents selectors\n                                const newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                                // add that to our new set of selectors\n                                selectorsMultiplied.push(newSelectorPath);\n                            }\n                        }\n                    }\n\n                    // our new selectors has been multiplied, so reset the state\n                    newSelectors = selectorsMultiplied;\n                    currentElements = [];\n                }\n            }\n\n            // if we have any elements left over (e.g. .a& .b == .b)\n            // add them on to all the current selectors\n            mergeElementsOnToSelectors(currentElements, newSelectors);\n\n            for (i = 0; i < newSelectors.length; i++) {\n                length = newSelectors[i].length;\n                if (length > 0) {\n                    paths.push(newSelectors[i]);\n                    lastSelector = newSelectors[i][length - 1];\n                    newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                }\n            }\n\n            return hadParentSelector;\n        }\n\n        function deriveSelector(visibilityInfo, deriveFrom) {\n            const newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n            newSelector.copyVisibilityInfo(visibilityInfo);\n            return newSelector;\n        }\n\n        // joinSelector code follows\n        let i;\n\n        let newPaths;\n        let hadParentSelector;\n\n        newPaths = [];\n        hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n        if (!hadParentSelector) {\n            if (context.length > 0) {\n                newPaths = [];\n                for (i = 0; i < context.length; i++) {\n\n                    const concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n\n                    concatenated.push(selector);\n                    newPaths.push(concatenated);\n                }\n            }\n            else {\n                newPaths = [[selector]];\n            }\n        }\n\n        for (i = 0; i < newPaths.length; i++) {\n            paths.push(newPaths[i]);\n        }\n    }\n}\n\nRuleset.prototype.type = 'Ruleset';\nRuleset.prototype.isRuleset = true;\nexport default Ruleset;\n","import Node from './node';\nimport Selector from './selector';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\n\nclass AtRule extends Node {\n    constructor(\n        name,\n        value,\n        rules,\n        index,\n        currentFileInfo,\n        debugInfo,\n        isRooted,\n        visibilityInfo\n    ) {\n        super();\n\n        let i;\n\n        this.name  = name;\n        this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\n        if (rules) {\n            if (Array.isArray(rules)) {\n                this.rules = rules;\n            } else {\n                this.rules = [rules];\n                this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\n            }\n            for (i = 0; i < this.rules.length; i++) {\n                this.rules[i].allowImports = true;\n            }\n            this.setParent(this.rules, this);\n        }\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.debugInfo = debugInfo;\n        this.isRooted = isRooted || false;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    }\n\n    accept(visitor) {\n        const value = this.value;\n        const rules = this.rules;\n        if (rules) {\n            this.rules = visitor.visitArray(rules);\n        }\n        if (value) {\n            this.value = visitor.visit(value);\n        }\n    }\n\n    isRulesetLike() {\n        return this.rules || !this.isCharset();\n    }\n\n    isCharset() {\n        return '@charset' === this.name;\n    }\n\n    genCSS(context, output) {\n        const value = this.value;\n        const rules = this.rules;\n        output.add(this.name, this.fileInfo(), this.getIndex());\n        if (value) {\n            output.add(' ');\n            value.genCSS(context, output);\n        }\n        if (rules) {\n            this.outputRuleset(context, output, rules);\n        } else {\n            output.add(';');\n        }\n    }\n\n    eval(context) {\n        let mediaPathBackup;\n        let mediaBlocksBackup;\n        let value = this.value;\n        let rules = this.rules;\n\n        // media stored inside other atrule should not bubble over it\n        // backpup media bubbling information\n        mediaPathBackup = context.mediaPath;\n        mediaBlocksBackup = context.mediaBlocks;\n        // deleted media bubbling information\n        context.mediaPath = [];\n        context.mediaBlocks = [];\n\n        if (value) {\n            value = value.eval(context);\n        }\n        if (rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            rules = [rules[0].eval(context)];\n            rules[0].root = true;\n        }\n        // restore media bubbling information\n        context.mediaPath = mediaPathBackup;\n        context.mediaBlocks = mediaBlocksBackup;\n\n        return new AtRule(this.name, value, rules,\n            this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n    }\n\n    variable(name) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.variable.call(this.rules[0], name);\n        }\n    }\n\n    find(...args) {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.find.apply(this.rules[0], args);\n        }\n    }\n\n    rulesets() {\n        if (this.rules) {\n            // assuming that there is only one rule at this point - that is how parser constructs the rule\n            return Ruleset.prototype.rulesets.apply(this.rules[0]);\n        }\n    }\n\n    outputRuleset(context, output, rules) {\n        const ruleCnt = rules.length;\n        let i;\n        context.tabLevel = (context.tabLevel | 0) + 1;\n\n        // Compressed\n        if (context.compress) {\n            output.add('{');\n            for (i = 0; i < ruleCnt; i++) {\n                rules[i].genCSS(context, output);\n            }\n            output.add('}');\n            context.tabLevel--;\n            return;\n        }\n\n        // Non-compressed\n        const tabSetStr = `\\n${Array(context.tabLevel).join('  ')}`;\n\n        const tabRuleStr = `${tabSetStr}  `;\n        if (!ruleCnt) {\n            output.add(` {${tabSetStr}}`);\n        } else {\n            output.add(` {${tabRuleStr}`);\n            rules[0].genCSS(context, output);\n            for (i = 1; i < ruleCnt; i++) {\n                output.add(tabRuleStr);\n                rules[i].genCSS(context, output);\n            }\n            output.add(`${tabSetStr}}`);\n        }\n\n        context.tabLevel--;\n    }\n}\n\nAtRule.prototype.type = 'AtRule';\nexport default AtRule;\n","import Node from './node';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nclass DetachedRuleset extends Node {\n    constructor(ruleset, frames) {\n        super();\n\n        this.ruleset = ruleset;\n        this.frames = frames;\n        this.setParent(this.ruleset, this);\n    }\n\n    accept(visitor) {\n        this.ruleset = visitor.visit(this.ruleset);\n    }\n\n    eval(context) {\n        const frames = this.frames || utils.copyArray(context.frames);\n        return new DetachedRuleset(this.ruleset, frames);\n    }\n\n    callEval(context) {\n        return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n    }\n}\n\nDetachedRuleset.prototype.type = 'DetachedRuleset';\nDetachedRuleset.prototype.evalFirst = true;\nexport default DetachedRuleset;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport * as utils from '../utils';\n\nclass Unit extends Node {\n    constructor(numerator, denominator, backupUnit) {\n        super();\n\n        this.numerator = numerator ? utils.copyArray(numerator).sort() : [];\n        this.denominator = denominator ? utils.copyArray(denominator).sort() : [];\n        if (backupUnit) {\n            this.backupUnit = backupUnit;\n        } else if (numerator && numerator.length) {\n            this.backupUnit = numerator[0];\n        }\n    }\n\n    clone() {\n        return new Unit(utils.copyArray(this.numerator), utils.copyArray(this.denominator), this.backupUnit);\n    }\n\n    genCSS(context, output) {\n        // Dimension checks the unit is singular and throws an error if in strict math mode.\n        const strictUnits = context && context.strictUnits;\n        if (this.numerator.length === 1) {\n            output.add(this.numerator[0]); // the ideal situation\n        } else if (!strictUnits && this.backupUnit) {\n            output.add(this.backupUnit);\n        } else if (!strictUnits && this.denominator.length) {\n            output.add(this.denominator[0]);\n        }\n    }\n\n    toString() {\n        let i;\n        let returnStr = this.numerator.join('*');\n        for (i = 0; i < this.denominator.length; i++) {\n            returnStr += `/${this.denominator[i]}`;\n        }\n        return returnStr;\n    }\n\n    compare(other) {\n        return this.is(other.toString()) ? 0 : undefined;\n    }\n\n    is(unitString) {\n        return this.toString().toUpperCase() === unitString.toUpperCase();\n    }\n\n    isLength() {\n        return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n    }\n\n    isEmpty() {\n        return this.numerator.length === 0 && this.denominator.length === 0;\n    }\n\n    isSingular() {\n        return this.numerator.length <= 1 && this.denominator.length === 0;\n    }\n\n    map(callback) {\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            this.numerator[i] = callback(this.numerator[i], false);\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            this.denominator[i] = callback(this.denominator[i], true);\n        }\n    }\n\n    usedUnits() {\n        let group;\n        const result = {};\n        let mapUnit;\n        let groupName;\n\n        mapUnit = atomicUnit => {\n            /* jshint loopfunc:true */\n            if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n                result[groupName] = atomicUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in unitConversions) {\n            if (unitConversions.hasOwnProperty(groupName)) {\n                group = unitConversions[groupName];\n\n                this.map(mapUnit);\n            }\n        }\n\n        return result;\n    }\n\n    cancel() {\n        const counter = {};\n        let atomicUnit;\n        let i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n            atomicUnit = this.numerator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n            atomicUnit = this.denominator[i];\n            counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n        }\n\n        this.numerator = [];\n        this.denominator = [];\n\n        for (atomicUnit in counter) {\n            if (counter.hasOwnProperty(atomicUnit)) {\n                const count = counter[atomicUnit];\n\n                if (count > 0) {\n                    for (i = 0; i < count; i++) {\n                        this.numerator.push(atomicUnit);\n                    }\n                } else if (count < 0) {\n                    for (i = 0; i < -count; i++) {\n                        this.denominator.push(atomicUnit);\n                    }\n                }\n            }\n        }\n\n        this.numerator.sort();\n        this.denominator.sort();\n    }\n}\n\nUnit.prototype.type = 'Unit';\nexport default Unit;\n","import Node from './node';\nimport unitConversions from '../data/unit-conversions';\nimport Unit from './unit';\nimport Color from './color';\n\n//\n// A number with a unit\n//\nclass Dimension extends Node {\n    constructor(value, unit) {\n        super();\n\n        this.value = parseFloat(value);\n        if (isNaN(this.value)) {\n            throw new Error('Dimension is not a number.');\n        }\n        this.unit = (unit && unit instanceof Unit) ? unit :\n            new Unit(unit ? [unit] : undefined);\n        this.setParent(this.unit, this);\n    }\n\n    accept(visitor) {\n        this.unit = visitor.visit(this.unit);\n    }\n\n    eval(context) {\n        return this;\n    }\n\n    toColor() {\n        return new Color([this.value, this.value, this.value]);\n    }\n\n    genCSS(context, output) {\n        if ((context && context.strictUnits) && !this.unit.isSingular()) {\n            throw new Error(`Multiple units in dimension. Correct the units or use the unit function. Bad unit: ${this.unit.toString()}`);\n        }\n\n        const value = this.fround(context, this.value);\n        let strValue = String(value);\n\n        if (value !== 0 && value < 0.000001 && value > -0.000001) {\n            // would be output 1e-6 etc.\n            strValue = value.toFixed(20).replace(/0+$/, '');\n        }\n\n        if (context && context.compress) {\n            // Zero values doesn't need a unit\n            if (value === 0 && this.unit.isLength()) {\n                output.add(strValue);\n                return;\n            }\n\n            // Float values doesn't need a leading zero\n            if (value > 0 && value < 1) {\n                strValue = (strValue).substr(1);\n            }\n        }\n\n        output.add(strValue);\n        this.unit.genCSS(context, output);\n    }\n\n    // In an operation between two Dimensions,\n    // we default to the first Dimension's unit,\n    // so `1px + 2` will yield `3px`.\n    operate(context, op, other) {\n        /* jshint noempty:false */\n        let value = this._operate(context, op, this.value, other.value);\n\n        let unit = this.unit.clone();\n\n        if (op === '+' || op === '-') {\n            if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n                unit = other.unit.clone();\n                if (this.unit.backupUnit) {\n                    unit.backupUnit = this.unit.backupUnit;\n                }\n            } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {\n                // do nothing\n            } else {\n                other = other.convertTo(this.unit.usedUnits());\n\n                if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                    throw new Error(`Incompatible units. Change the units or use the unit function. ` + \n                        `Bad units: '${unit.toString()}' and '${other.unit.toString()}'.`);\n                }\n\n                value = this._operate(context, op, this.value, other.value);\n            }\n        } else if (op === '*') {\n            unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n            unit.cancel();\n        } else if (op === '/') {\n            unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n            unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n            unit.cancel();\n        }\n        return new Dimension(value, unit);\n    }\n\n    compare(other) {\n        let a;\n        let b;\n\n        if (!(other instanceof Dimension)) {\n            return undefined;\n        }\n\n        if (this.unit.isEmpty() || other.unit.isEmpty()) {\n            a = this;\n            b = other;\n        } else {\n            a = this.unify();\n            b = other.unify();\n            if (a.unit.compare(b.unit) !== 0) {\n                return undefined;\n            }\n        }\n\n        return Node.numericCompare(a.value, b.value);\n    }\n\n    unify() {\n        return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n    }\n\n    convertTo(conversions) {\n        let value = this.value;\n        const unit = this.unit.clone();\n        let i;\n        let groupName;\n        let group;\n        let targetUnit;\n        let derivedConversions = {};\n        let applyUnit;\n\n        if (typeof conversions === 'string') {\n            for (i in unitConversions) {\n                if (unitConversions[i].hasOwnProperty(conversions)) {\n                    derivedConversions = {};\n                    derivedConversions[i] = conversions;\n                }\n            }\n            conversions = derivedConversions;\n        }\n        applyUnit = (atomicUnit, denominator) => {\n            /* jshint loopfunc:true */\n            if (group.hasOwnProperty(atomicUnit)) {\n                if (denominator) {\n                    value = value / (group[atomicUnit] / group[targetUnit]);\n                } else {\n                    value = value * (group[atomicUnit] / group[targetUnit]);\n                }\n\n                return targetUnit;\n            }\n\n            return atomicUnit;\n        };\n\n        for (groupName in conversions) {\n            if (conversions.hasOwnProperty(groupName)) {\n                targetUnit = conversions[groupName];\n                group = unitConversions[groupName];\n\n                unit.map(applyUnit);\n            }\n        }\n\n        unit.cancel();\n\n        return new Dimension(value, unit);\n    }\n}\n\nDimension.prototype.type = 'Dimension';\nexport default Dimension;\n","import Node from './node';\nimport Color from './color';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\n\nclass Operation extends Node {\n    constructor(op, operands, isSpaced) {\n        super();\n\n        this.op = op.trim();\n        this.operands = operands;\n        this.isSpaced = isSpaced;\n    }\n\n    accept(visitor) {\n        this.operands = visitor.visitArray(this.operands);\n    }\n\n    eval(context) {\n        let a = this.operands[0].eval(context);\n        let b = this.operands[1].eval(context);\n        let op;\n\n        if (context.isMathOn(this.op)) {\n            op = this.op === './' ? '/' : this.op;\n            if (a instanceof Dimension && b instanceof Color) {\n                a = a.toColor();\n            }\n            if (b instanceof Dimension && a instanceof Color) {\n                b = b.toColor();\n            }\n            if (!a.operate) {\n                if (a instanceof Operation && a.op === '/' && context.math === MATH.PARENS_DIVISION) {\n                    return new Operation(this.op, [a, b], this.isSpaced);\n                }\n                throw { type: 'Operation',\n                    message: 'Operation on an invalid type' };\n            }\n\n            return a.operate(context, op, b);\n        } else {\n            return new Operation(this.op, [a, b], this.isSpaced);\n        }\n    }\n\n    genCSS(context, output) {\n        this.operands[0].genCSS(context, output);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        output.add(this.op);\n        if (this.isSpaced) {\n            output.add(' ');\n        }\n        this.operands[1].genCSS(context, output);\n    }\n}\n\nOperation.prototype.type = 'Operation';\nexport default Operation;\n","import Node from './node';\nimport Paren from './paren';\nimport Comment from './comment';\nimport Dimension from './dimension';\nimport * as Constants from '../constants';\nconst MATH = Constants.Math;\n\nclass Expression extends Node {\n    constructor(value, noSpacing) {\n        super();\n\n        this.value = value;\n        this.noSpacing = noSpacing;\n        if (!value) {\n            throw new Error('Expression requires an array parameter');\n        }\n    }\n\n    accept(visitor) {\n        this.value = visitor.visitArray(this.value);\n    }\n\n    eval(context) {\n        let returnValue;\n        const mathOn = context.isMathOn();\n\n        const inParenthesis = this.parens && \n            (context.math !== MATH.STRICT_LEGACY || !this.parensInOp);\n\n        let doubleParen = false;\n        if (inParenthesis) {\n            context.inParenthesis();\n        }\n        if (this.value.length > 1) {\n            returnValue = new Expression(this.value.map(e => {\n                if (!e.eval) {\n                    return e;\n                }\n                return e.eval(context);\n            }), this.noSpacing);\n        } else if (this.value.length === 1) {\n            if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n                doubleParen = true;\n            }\n            returnValue = this.value[0].eval(context);\n        } else {\n            returnValue = this;\n        }\n        if (inParenthesis) {\n            context.outOfParenthesis();\n        }\n        if (this.parens && this.parensInOp && !mathOn && !doubleParen \n            && (!(returnValue instanceof Dimension))) {\n            returnValue = new Paren(returnValue);\n        }\n        return returnValue;\n    }\n\n    genCSS(context, output) {\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].genCSS(context, output);\n            if (!this.noSpacing && i + 1 < this.value.length) {\n                output.add(' ');\n            }\n        }\n    }\n\n    throwAwayComments() {\n        this.value = this.value.filter(v => !(v instanceof Comment));\n    }\n}\n\nExpression.prototype.type = 'Expression';\nexport default Expression;\n","import Expression from '../tree/expression';\n\nclass functionCaller {\n    constructor(name, context, index, currentFileInfo) {\n        this.name = name.toLowerCase();\n        this.index = index;\n        this.context = context;\n        this.currentFileInfo = currentFileInfo;\n\n        this.func = context.frames[0].functionRegistry.get(this.name);\n    }\n\n    isValid() {\n        return Boolean(this.func);\n    }\n\n    call(args) {\n        // This code is terrible and should be replaced as per this issue...\n        // https://github.com/less/less.js/issues/2477\n        if (Array.isArray(args)) {\n            args = args.filter(item => {\n                if (item.type === 'Comment') {\n                    return false;\n                }\n                return true;\n            })\n                .map(item => {\n                    if (item.type === 'Expression') {\n                        const subNodes = item.value.filter(item => {\n                            if (item.type === 'Comment') {\n                                return false;\n                            }\n                            return true;\n                        });\n                        if (subNodes.length === 1) {\n                            return subNodes[0];\n                        } else {\n                            return new Expression(subNodes);\n                        }\n                    }\n                    return item;\n                });\n        }\n\n        return this.func(...args);\n    }\n}\n\nexport default functionCaller;\n","import Node from './node';\nimport Anonymous from './anonymous';\nimport FunctionCaller from '../functions/function-caller';\n\n//\n// A function call node.\n//\nclass Call extends Node {\n    constructor(name, args, index, currentFileInfo) {\n        super();\n\n        this.name = name;\n        this.args = args;\n        this.calc = name === 'calc';\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    accept(visitor) {\n        if (this.args) {\n            this.args = visitor.visitArray(this.args);\n        }\n    }\n\n    //\n    // When evaluating a function call,\n    // we either find the function in the functionRegistry,\n    // in which case we call it, passing the  evaluated arguments,\n    // if this returns null or we cannot find the function, we\n    // simply print it out as it appeared originally [2].\n    //\n    // The reason why we evaluate the arguments, is in the case where\n    // we try to pass a variable to a function, like: `saturate(@color)`.\n    // The function should receive the value, not the variable.\n    //\n    eval(context) {\n        /**\n         * Turn off math for calc(), and switch back on for evaluating nested functions\n         */\n        const currentMathContext = context.mathOn;\n        context.mathOn = !this.calc;\n        if (this.calc || context.inCalc) {\n            context.enterCalc();\n        }\n        const args = this.args.map(a => a.eval(context));\n        if (this.calc || context.inCalc) {\n            context.exitCalc();\n        }\n        context.mathOn = currentMathContext;\n\n        let result;\n        const funcCaller = new FunctionCaller(this.name, context, this.getIndex(), this.fileInfo());\n\n        if (funcCaller.isValid()) {\n            try {\n                result = funcCaller.call(args);\n            } catch (e) {\n                throw { \n                    type: e.type || 'Runtime',\n                    message: `error evaluating function \\`${this.name}\\`${e.message ? `: ${e.message}` : ''}`,\n                    index: this.getIndex(), \n                    filename: this.fileInfo().filename,\n                    line: e.lineNumber,\n                    column: e.columnNumber\n                };\n            }\n\n            if (result !== null && result !== undefined) {\n                // Results that that are not nodes are cast as Anonymous nodes\n                // Falsy values or booleans are returned as empty nodes\n                if (!(result instanceof Node)) {\n                    if (!result || result === true) {\n                        result = new Anonymous(null); \n                    }\n                    else {\n                        result = new Anonymous(result.toString()); \n                    }\n                    \n                }\n                result._index = this._index;\n                result._fileInfo = this._fileInfo;\n                return result;\n            }\n\n        }\n\n        return new Call(this.name, args, this.getIndex(), this.fileInfo());\n    }\n\n    genCSS(context, output) {\n        output.add(`${this.name}(`, this.fileInfo(), this.getIndex());\n\n        for (let i = 0; i < this.args.length; i++) {\n            this.args[i].genCSS(context, output);\n            if (i + 1 < this.args.length) {\n                output.add(', ');\n            }\n        }\n\n        output.add(')');\n    }\n}\n\nCall.prototype.type = 'Call';\nexport default Call;\n","import Node from './node';\nimport Call from './call';\n\nclass Variable extends Node {\n    constructor(name, index, currentFileInfo) {\n        super();\n\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        let variable;\n        let name = this.name;\n\n        if (name.indexOf('@@') === 0) {\n            name = `@${new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value}`;\n        }\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive variable definition for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        variable = this.find(context.frames, frame => {\n            const v = frame.variable(name);\n            if (v) {\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                // If in calc, wrap vars in a function call to cascade evaluate args first\n                if (context.inCalc) {\n                    return (new Call('_SELF', [v.value])).eval(context);\n                }\n                else {\n                    return v.value.eval(context);\n                }\n            }\n        });\n        if (variable) {\n            this.evaluating = false;\n            return variable;\n        } else {\n            throw { type: 'Name',\n                message: `variable ${name} is undefined`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n    }\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n}\n\nVariable.prototype.type = 'Variable';\nexport default Variable;\n","import Node from './node';\nimport Declaration from './declaration';\n\nclass Property extends Node {\n    constructor(name, index, currentFileInfo) {\n        super();\n\n        this.name = name;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        let property;\n        const name = this.name;\n        // TODO: shorten this reference\n        const mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n\n        if (this.evaluating) {\n            throw { type: 'Name',\n                message: `Recursive property reference for ${name}`,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        this.evaluating = true;\n\n        property = this.find(context.frames, frame => {\n            let v;\n            const vArr = frame.property(name);\n            if (vArr) {\n                for (let i = 0; i < vArr.length; i++) {\n                    v = vArr[i];\n\n                    vArr[i] = new Declaration(v.name,\n                        v.value,\n                        v.important,\n                        v.merge,\n                        v.index,\n                        v.currentFileInfo,\n                        v.inline,\n                        v.variable\n                    );\n                }\n                mergeRules(vArr);\n\n                v = vArr[vArr.length - 1];\n                if (v.important) {\n                    const importantScope = context.importantScope[context.importantScope.length - 1];\n                    importantScope.important = v.important;\n                }\n                v = v.value.eval(context);\n                return v;\n            }\n        });\n        if (property) {\n            this.evaluating = false;\n            return property;\n        } else {\n            throw { type: 'Name',\n                message: `Property '${name}' is undefined`,\n                filename: this.currentFileInfo.filename,\n                index: this.index };\n        }\n    }\n\n    find(obj, fun) {\n        for (let i = 0, r; i < obj.length; i++) {\n            r = fun.call(obj, obj[i]);\n            if (r) { return r; }\n        }\n        return null;\n    }\n}\n\nProperty.prototype.type = 'Property';\nexport default Property;\n","import Node from './node';\n\nclass Attribute extends Node {\n    constructor(key, op, value) {\n        super();\n\n        this.key = key;\n        this.op = op;\n        this.value = value;\n    }\n\n    eval(context) {\n        return new Attribute(this.key.eval ? this.key.eval(context) : this.key,\n            this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\n    }\n\n    genCSS(context, output) {\n        output.add(this.toCSS(context));\n    }\n\n    toCSS(context) {\n        let value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n        if (this.op) {\n            value += this.op;\n            value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n        }\n\n        return `[${value}]`;\n    }\n}\n\nAttribute.prototype.type = 'Attribute';\nexport default Attribute;\n","import Node from './node';\nimport Variable from './variable';\nimport Property from './property';\n\n\nclass Quoted extends Node {\n    constructor(str, content, escaped, index, currentFileInfo) {\n        super();\n\n        this.escaped = (escaped == null) ? true : escaped;\n        this.value = content || '';\n        this.quote = str.charAt(0);\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.variableRegex = /@\\{([\\w-]+)\\}/g;\n        this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n        this.allowRoot = escaped;\n    }\n\n    genCSS(context, output) {\n        if (!this.escaped) {\n            output.add(this.quote, this.fileInfo(), this.getIndex());\n        }\n        output.add(this.value);\n        if (!this.escaped) {\n            output.add(this.quote);\n        }\n    }\n\n    containsVariables() {\n        return this.value.match(this.variableRegex);\n    }\n\n    eval(context) {\n        const that = this;\n        let value = this.value;\n        const variableReplacement = (_, name) => {\n            const v = new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        const propertyReplacement = (_, name) => {\n            const v = new Property(`$${name}`, that.getIndex(), that.fileInfo()).eval(context, true);\n            return (v instanceof Quoted) ? v.value : v.toCSS();\n        };\n        function iterativeReplace(value, regexp, replacementFnc) {\n            let evaluatedValue = value;\n            do {\n                value = evaluatedValue.toString();\n                evaluatedValue = value.replace(regexp, replacementFnc);\n            } while (value !== evaluatedValue);\n            return evaluatedValue;\n        }\n        value = iterativeReplace(value, this.variableRegex, variableReplacement);\n        value = iterativeReplace(value, this.propRegex, propertyReplacement);\n\n        return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n    }\n\n    compare(other) {\n        // when comparing quoted strings allow the quote to differ\n        if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n            return Node.numericCompare(this.value, other.value);\n        } else {\n            return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n        }\n    }\n}\n\nQuoted.prototype.type = 'Quoted';\nexport default Quoted;\n","import Node from './node';\n\nclass URL extends Node {\n    constructor(val, index, currentFileInfo, isEvald) {\n        super();\n\n        this.value = val;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.isEvald = isEvald;\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    genCSS(context, output) {\n        output.add('url(');\n        this.value.genCSS(context, output);\n        output.add(')');\n    }\n\n    eval(context) {\n        const val = this.value.eval(context);\n        let rootpath;\n\n        if (!this.isEvald) {\n            // Add the rootpath if the URL requires a rewrite\n            rootpath = this.fileInfo() && this.fileInfo().rootpath;\n            if (typeof rootpath === 'string' &&\n                typeof val.value === 'string' &&\n                context.pathRequiresRewrite(val.value)) {\n                if (!val.quote) {\n                    rootpath = escapePath(rootpath);\n                }\n                val.value = context.rewritePath(val.value, rootpath);\n            } else {\n                val.value = context.normalizePath(val.value);\n            }\n\n            // Add url args if enabled\n            if (context.urlArgs) {\n                if (!val.value.match(/^\\s*data:/)) {\n                    const delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                    const urlArgs = delimiter + context.urlArgs;\n                    if (val.value.indexOf('#') !== -1) {\n                        val.value = val.value.replace('#', `${urlArgs}#`);\n                    } else {\n                        val.value += urlArgs;\n                    }\n                }\n            }\n        }\n\n        return new URL(val, this.getIndex(), this.fileInfo(), true);\n    }\n}\n\nURL.prototype.type = 'Url';\n\nfunction escapePath(path) {\n    return path.replace(/[\\(\\)'\"\\s]/g, match => `\\\\${match}`);\n}\n\nexport default URL;\n","import Ruleset from './ruleset';\nimport Value from './value';\nimport Selector from './selector';\nimport Anonymous from './anonymous';\nimport Expression from './expression';\nimport AtRule from './atrule';\nimport * as utils from '../utils';\n\nclass Media extends AtRule {\n    constructor(value, features, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n\n        const selectors = (new Selector([], null, null, this._index, this._fileInfo)).createEmptySelectors();\n\n        this.features = new Value(features);\n        this.rules = [new Ruleset(selectors, value)];\n        this.rules[0].allowImports = true;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n        this.setParent(selectors, this);\n        this.setParent(this.features, this);\n        this.setParent(this.rules, this);\n    }\n\n    isRulesetLike() {\n        return true;\n    }\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        if (this.rules) {\n            this.rules = visitor.visitArray(this.rules);\n        }\n    }\n\n    genCSS(context, output) {\n        output.add('@media ', this._fileInfo, this._index);\n        this.features.genCSS(context, output);\n        this.outputRuleset(context, output, this.rules);\n    }\n\n    eval(context) {\n        if (!context.mediaBlocks) {\n            context.mediaBlocks = [];\n            context.mediaPath = [];\n        }\n\n        const media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n        if (this.debugInfo) {\n            this.rules[0].debugInfo = this.debugInfo;\n            media.debugInfo = this.debugInfo;\n        }\n        \n        media.features = this.features.eval(context);\n\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n\n        context.mediaPath.pop();\n\n        return context.mediaPath.length === 0 ? media.evalTop(context) :\n            media.evalNested(context);\n    }\n\n    evalTop(context) {\n        let result = this;\n\n        // Render all dependent Media blocks.\n        if (context.mediaBlocks.length > 1) {\n            const selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\n            result = new Ruleset(selectors, context.mediaBlocks);\n            result.multiMedia = true;\n            result.copyVisibilityInfo(this.visibilityInfo());\n            this.setParent(result, this);\n        }\n\n        delete context.mediaBlocks;\n        delete context.mediaPath;\n\n        return result;\n    }\n\n    evalNested(context) {\n        let i;\n        let value;\n        const path = context.mediaPath.concat([this]);\n\n        // Extract the media-query conditions separated with `,` (OR).\n        for (i = 0; i < path.length; i++) {\n            value = path[i].features instanceof Value ?\n                path[i].features.value : path[i].features;\n            path[i] = Array.isArray(value) ? value : [value];\n        }\n\n        // Trace all permutations to generate the resulting media-query.\n        //\n        // (a, b and c) with nested (d, e) ->\n        //    a and d\n        //    a and e\n        //    b and c and d\n        //    b and c and e\n        this.features = new Value(this.permute(path).map(path => {\n            path = path.map(fragment => fragment.toCSS ? fragment : new Anonymous(fragment));\n\n            for (i = path.length - 1; i > 0; i--) {\n                path.splice(i, 0, new Anonymous('and'));\n            }\n\n            return new Expression(path);\n        }));\n        this.setParent(this.features, this);\n\n        // Fake a tree-node that doesn't output anything.\n        return new Ruleset([], []);\n    }\n\n    permute(arr) {\n        if (arr.length === 0) {\n            return [];\n        } else if (arr.length === 1) {\n            return arr[0];\n        } else {\n            const result = [];\n            const rest = this.permute(arr.slice(1));\n            for (let i = 0; i < rest.length; i++) {\n                for (let j = 0; j < arr[0].length; j++) {\n                    result.push([arr[0][j]].concat(rest[i]));\n                }\n            }\n            return result;\n        }\n    }\n\n    bubbleSelectors(selectors) {\n        if (!selectors) {\n            return;\n        }\n        this.rules = [new Ruleset(utils.copyArray(selectors), [this.rules[0]])];\n        this.setParent(this.rules, this);\n    }\n}\n\nMedia.prototype.type = 'Media';\nexport default Media;\n","import Node from './node';\nimport Media from './media';\nimport URL from './url';\nimport Quoted from './quoted';\nimport Ruleset from './ruleset';\nimport Anonymous from './anonymous';\nimport * as utils from '../utils';\nimport LessError from '../less-error';\n\n//\n// CSS @import node\n//\n// The general strategy here is that we don't want to wait\n// for the parsing to be completed, before we start importing\n// the file. That's because in the context of a browser,\n// most of the time will be spent waiting for the server to respond.\n//\n// On creation, we push the import path to our import queue, though\n// `import,push`, we also pass it a callback, which it'll call once\n// the file has been fetched, and parsed.\n//\nclass Import extends Node {\n    constructor(path, features, options, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.options = options;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.path = path;\n        this.features = features;\n        this.allowRoot = true;\n\n        if (this.options.less !== undefined || this.options.inline) {\n            this.css = !this.options.less || this.options.inline;\n        } else {\n            const pathValue = this.getPath();\n            if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n                this.css = true;\n            }\n        }\n        this.copyVisibilityInfo(visibilityInfo);\n        this.setParent(this.features, this);\n        this.setParent(this.path, this);\n    }\n\n    accept(visitor) {\n        if (this.features) {\n            this.features = visitor.visit(this.features);\n        }\n        this.path = visitor.visit(this.path);\n        if (!this.options.isPlugin && !this.options.inline && this.root) {\n            this.root = visitor.visit(this.root);\n        }\n    }\n\n    genCSS(context, output) {\n        if (this.css && this.path._fileInfo.reference === undefined) {\n            output.add('@import ', this._fileInfo, this._index);\n            this.path.genCSS(context, output);\n            if (this.features) {\n                output.add(' ');\n                this.features.genCSS(context, output);\n            }\n            output.add(';');\n        }\n    }\n\n    getPath() {\n        return (this.path instanceof URL) ?\n            this.path.value.value : this.path.value;\n    }\n\n    isVariableImport() {\n        let path = this.path;\n        if (path instanceof URL) {\n            path = path.value;\n        }\n        if (path instanceof Quoted) {\n            return path.containsVariables();\n        }\n\n        return true;\n    }\n\n    evalForImport(context) {\n        let path = this.path;\n\n        if (path instanceof URL) {\n            path = path.value;\n        }\n\n        return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n    }\n\n    evalPath(context) {\n        const path = this.path.eval(context);\n        const fileInfo = this._fileInfo;\n\n        if (!(path instanceof URL)) {\n            // Add the rootpath if the URL requires a rewrite\n            const pathValue = path.value;\n            if (fileInfo &&\n                pathValue &&\n                context.pathRequiresRewrite(pathValue)) {\n                path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n            } else {\n                path.value = context.normalizePath(path.value);\n            }\n        }\n\n        return path;\n    }\n\n    eval(context) {\n        const result = this.doEval(context);\n        if (this.options.reference || this.blocksVisibility()) {\n            if (result.length || result.length === 0) {\n                result.forEach(node => {\n                    node.addVisibilityBlock();\n                }\n                );\n            } else {\n                result.addVisibilityBlock();\n            }\n        }\n        return result;\n    }\n\n    doEval(context) {\n        let ruleset;\n        let registry;\n        const features = this.features && this.features.eval(context);\n\n        if (this.options.isPlugin) {\n            if (this.root && this.root.eval) {\n                try {\n                    this.root.eval(context);\n                }\n                catch (e) {\n                    e.message = 'Plugin error during evaluation';\n                    throw new LessError(e, this.root.imports, this.root.filename);\n                }\n            }\n            registry = context.frames[0] && context.frames[0].functionRegistry;\n            if ( registry && this.root && this.root.functions ) {\n                registry.addMultiple( this.root.functions );\n            }\n\n            return [];\n        }\n\n        if (this.skip) {\n            if (typeof this.skip === 'function') {\n                this.skip = this.skip();\n            }\n            if (this.skip) {\n                return [];\n            }\n        }\n        if (this.options.inline) {\n            const contents = new Anonymous(this.root, 0,\n                {\n                    filename: this.importedFilename,\n                    reference: this.path._fileInfo && this.path._fileInfo.reference\n                }, true, true);\n\n            return this.features ? new Media([contents], this.features.value) : [contents];\n        } else if (this.css) {\n            const newImport = new Import(this.evalPath(context), features, this.options, this._index);\n            if (!newImport.css && this.error) {\n                throw this.error;\n            }\n            return newImport;\n        } else {\n            ruleset = new Ruleset(null, utils.copyArray(this.root.rules));\n            ruleset.evalImports(context);\n\n            return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n        }\n    }\n}\n\nImport.prototype.type = 'Import';\nexport default Import;\n","import Node from './node';\nimport Variable from './variable';\n\nclass JsEvalNode extends Node {\n    evaluateJavaScript(expression, context) {\n        let result;\n        const that = this;\n        const evalContext = {};\n\n        if (!context.javascriptEnabled) {\n            throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        expression = expression.replace(/@\\{([\\w-]+)\\}/g, (_, name) => that.jsify(new Variable(`@${name}`, that.getIndex(), that.fileInfo()).eval(context)));\n\n        try {\n            expression = new Function(`return (${expression})`);\n        } catch (e) {\n            throw { message: `JavaScript evaluation error: ${e.message} from \\`${expression}\\`` ,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n\n        const variables = context.frames[0].variables();\n        for (const k in variables) {\n            if (variables.hasOwnProperty(k)) {\n                /* jshint loopfunc:true */\n                evalContext[k.slice(1)] = {\n                    value: variables[k].value,\n                    toJS: function () {\n                        return this.value.eval(context).toCSS();\n                    }\n                };\n            }\n        }\n\n        try {\n            result = expression.call(evalContext);\n        } catch (e) {\n            throw { message: `JavaScript evaluation error: '${e.name}: ${e.message.replace(/[\"]/g, '\\'')}'` ,\n                filename: this.fileInfo().filename,\n                index: this.getIndex() };\n        }\n        return result;\n    }\n\n    jsify(obj) {\n        if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n            return `[${obj.value.map(v => v.toCSS()).join(', ')}]`;\n        } else {\n            return obj.toCSS();\n        }\n    }\n}\n\nexport default JsEvalNode;\n","import JsEvalNode from './js-eval-node';\nimport Dimension from './dimension';\nimport Quoted from './quoted';\nimport Anonymous from './anonymous';\n\nclass JavaScript extends JsEvalNode {\n    constructor(string, escaped, index, currentFileInfo) {\n        super();\n\n        this.escaped = escaped;\n        this.expression = string;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n    }\n\n    eval(context) {\n        const result = this.evaluateJavaScript(this.expression, context);\n        const type = typeof result;\n\n        if (type === 'number' && !isNaN(result)) {\n            return new Dimension(result);\n        } else if (type === 'string') {\n            return new Quoted(`\"${result}\"`, result, this.escaped, this._index);\n        } else if (Array.isArray(result)) {\n            return new Anonymous(result.join(', '));\n        } else {\n            return new Anonymous(result);\n        }\n    }\n}\n\nJavaScript.prototype.type = 'JavaScript';\nexport default JavaScript;\n","import Node from './node';\n\nclass Assignment extends Node {\n    constructor(key, val) {\n        super();\n\n        this.key = key;\n        this.value = val;\n    }\n\n    accept(visitor) {\n        this.value = visitor.visit(this.value);\n    }\n\n    eval(context) {\n        if (this.value.eval) {\n            return new Assignment(this.key, this.value.eval(context));\n        }\n        return this;\n    }\n\n    genCSS(context, output) {\n        output.add(`${this.key}=`);\n        if (this.value.genCSS) {\n            this.value.genCSS(context, output);\n        } else {\n            output.add(this.value);\n        }\n    }\n}\n\nAssignment.prototype.type = 'Assignment';\nexport default Assignment;\n","import Node from './node';\n\nclass Condition extends Node {\n    constructor(op, l, r, i, negate) {\n        super();\n\n        this.op = op.trim();\n        this.lvalue = l;\n        this.rvalue = r;\n        this._index = i;\n        this.negate = negate;\n    }\n\n    accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.rvalue = visitor.visit(this.rvalue);\n    }\n\n    eval(context) {\n        const result = ((op, a, b) => {\n            switch (op) {\n                case 'and': return a && b;\n                case 'or':  return a || b;\n                default:\n                    switch (Node.compare(a, b)) {\n                        case -1:\n                            return op === '<' || op === '=<' || op === '<=';\n                        case 0:\n                            return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                        case 1:\n                            return op === '>' || op === '>=';\n                        default:\n                            return false;\n                    }\n            }\n        })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n        return this.negate ? !result : result;\n    }\n}\n\nCondition.prototype.type = 'Condition';\nexport default Condition;\n","import Node from './node';\n\nclass UnicodeDescriptor extends Node {\n    constructor(value) {\n        super();\n\n        this.value = value;\n    }\n}\n\nUnicodeDescriptor.prototype.type = 'UnicodeDescriptor';\n\nexport default UnicodeDescriptor;\n","import Node from './node';\nimport Operation from './operation';\nimport Dimension from './dimension';\n\nclass Negative extends Node {\n    constructor(node) {\n        super();\n\n        this.value = node;\n    }\n\n    genCSS(context, output) {\n        output.add('-');\n        this.value.genCSS(context, output);\n    }\n\n    eval(context) {\n        if (context.isMathOn()) {\n            return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\n        }\n        return new Negative(this.value.eval(context));\n    }\n}\n\nNegative.prototype.type = 'Negative';\nexport default Negative;\n","import Node from './node';\nimport Selector from './selector';\n\nclass Extend extends Node {\n    constructor(selector, option, index, currentFileInfo, visibilityInfo) {\n        super();\n\n        this.selector = selector;\n        this.option = option;\n        this.object_id = Extend.next_id++;\n        this.parent_ids = [this.object_id];\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n\n        switch (option) {\n            case 'all':\n                this.allowBefore = true;\n                this.allowAfter = true;\n                break;\n            default:\n                this.allowBefore = false;\n                this.allowAfter = false;\n                break;\n        }\n        this.setParent(this.selector, this);\n    }\n\n    accept(visitor) {\n        this.selector = visitor.visit(this.selector);\n    }\n\n    eval(context) {\n        return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    }\n\n    clone(context) {\n        return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n    }\n\n    // it concatenates (joins) all selectors in selector array\n    findSelfSelectors(selectors) {\n        let selfElements = [];\n        let i;\n        let selectorElements;\n\n        for (i = 0; i < selectors.length; i++) {\n            selectorElements = selectors[i].elements;\n            // duplicate the logic in genCSS function inside the selector node.\n            // future TODO - move both logics into the selector joiner visitor\n            if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n                selectorElements[0].combinator.value = ' ';\n            }\n            selfElements = selfElements.concat(selectors[i].elements);\n        }\n\n        this.selfSelectors = [new Selector(selfElements)];\n        this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n    }\n}\n\nExtend.next_id = 0;\n\nExtend.prototype.type = 'Extend';\nexport default Extend;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport DetachedRuleset from './detached-ruleset';\nimport LessError from '../less-error';\n\nclass VariableCall extends Node {\n    constructor(variable, index, currentFileInfo) {\n        super();\n\n        this.variable = variable;\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.allowRoot = true;\n    }\n\n    eval(context) {\n        let rules;\n        let detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\n        const error = new LessError({message: `Could not evaluate variable call ${this.variable}`});\n\n        if (!detachedRuleset.ruleset) {\n            if (detachedRuleset.rules) {\n                rules = detachedRuleset;\n            }\n            else if (Array.isArray(detachedRuleset)) {\n                rules = new Ruleset('', detachedRuleset);\n            }\n            else if (Array.isArray(detachedRuleset.value)) {\n                rules = new Ruleset('', detachedRuleset.value);\n            }\n            else {\n                throw error;\n            }\n            detachedRuleset = new DetachedRuleset(rules);\n        }\n\n        if (detachedRuleset.ruleset) {\n            return detachedRuleset.callEval(context);\n        }\n        throw error;\n    }\n}\n\nVariableCall.prototype.type = 'VariableCall';\nexport default VariableCall;\n","import Node from './node';\nimport Variable from './variable';\nimport Ruleset from './ruleset';\nimport Selector from './selector';\n\nclass NamespaceValue extends Node {\n    constructor(ruleCall, lookups, index, fileInfo) {\n        super();\n\n        this.value = ruleCall;\n        this.lookups = lookups;\n        this._index = index;\n        this._fileInfo = fileInfo;\n    }\n\n    eval(context) {\n        let i;\n        let j;\n        let name;\n        let rules = this.value.eval(context);\n\n        for (i = 0; i < this.lookups.length; i++) {\n            name = this.lookups[i];\n\n            /**\n             * Eval'd DRs return rulesets.\n             * Eval'd mixins return rules, so let's make a ruleset if we need it.\n             * We need to do this because of late parsing of values\n             */\n            if (Array.isArray(rules)) {\n                rules = new Ruleset([new Selector()], rules);\n            }\n\n            if (name === '') {\n                rules = rules.lastDeclaration();\n            }\n            else if (name.charAt(0) === '@') {\n                if (name.charAt(1) === '@') {\n                    name = `@${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                if (rules.variables) {\n                    rules = rules.variable(name);\n                }\n                \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `variable ${name} not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n            }\n            else {\n                if (name.substring(0, 2) === '$@') {\n                    name = `$${new Variable(name.substr(1)).eval(context).value}`;\n                }\n                else {\n                    name = name.charAt(0) === '$' ? name : `$${name}`;\n                }\n                if (rules.properties) {\n                    rules = rules.property(name);\n                }\n            \n                if (!rules) {\n                    throw { type: 'Name',\n                        message: `property \"${name.substr(1)}\" not found`,\n                        filename: this.fileInfo().filename,\n                        index: this.getIndex() };\n                }\n                // Properties are an array of values, since a ruleset can have multiple props.\n                // We pick the last one (the \"cascaded\" value)\n                rules = rules[rules.length - 1];\n            }\n\n            if (rules.value) {\n                rules = rules.eval(context).value;\n            }\n            if (rules.ruleset) {\n                rules = rules.ruleset.eval(context);\n            }\n        }\n        return rules;\n    }\n}\n\nNamespaceValue.prototype.type = 'NamespaceValue';\nexport default NamespaceValue;\n","import Selector from './selector';\nimport Element from './element';\nimport Ruleset from './ruleset';\nimport Declaration from './declaration';\nimport DetachedRuleset from './detached-ruleset';\nimport Expression from './expression';\nimport contexts from '../contexts';\nimport * as utils from '../utils';\n\nclass Definition extends Ruleset {\n    constructor(name, params, rules, condition, variadic, frames, visibilityInfo) {\n        super();\n\n        this.name = name || 'anonymous mixin';\n        this.selectors = [new Selector([new Element(null, name, false, this._index, this._fileInfo)])];\n        this.params = params;\n        this.condition = condition;\n        this.variadic = variadic;\n        this.arity = params.length;\n        this.rules = rules;\n        this._lookups = {};\n        const optionalParameters = [];\n        this.required = params.reduce((count, p) => {\n            if (!p.name || (p.name && !p.value)) {\n                return count + 1;\n            }\n            else {\n                optionalParameters.push(p.name);\n                return count;\n            }\n        }, 0);\n        this.optionalParameters = optionalParameters;\n        this.frames = frames;\n        this.copyVisibilityInfo(visibilityInfo);\n        this.allowRoot = true;\n    }\n\n    accept(visitor) {\n        if (this.params && this.params.length) {\n            this.params = visitor.visitArray(this.params);\n        }\n        this.rules = visitor.visitArray(this.rules);\n        if (this.condition) {\n            this.condition = visitor.visit(this.condition);\n        }\n    }\n\n    evalParams(context, mixinEnv, args, evaldArguments) {\n        /* jshint boss:true */\n        const frame = new Ruleset(null, null);\n\n        let varargs;\n        let arg;\n        const params = utils.copyArray(this.params);\n        let i;\n        let j;\n        let val;\n        let name;\n        let isNamedFound;\n        let argIndex;\n        let argsLength = 0;\n\n        if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n            frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n        }\n        mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n        if (args) {\n            args = utils.copyArray(args);\n            argsLength = args.length;\n\n            for (i = 0; i < argsLength; i++) {\n                arg = args[i];\n                if (name = (arg && arg.name)) {\n                    isNamedFound = false;\n                    for (j = 0; j < params.length; j++) {\n                        if (!evaldArguments[j] && name === params[j].name) {\n                            evaldArguments[j] = arg.value.eval(context);\n                            frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                            isNamedFound = true;\n                            break;\n                        }\n                    }\n                    if (isNamedFound) {\n                        args.splice(i, 1);\n                        i--;\n                        continue;\n                    } else {\n                        throw { type: 'Runtime', message: `Named argument for ${this.name} ${args[i].name} not found` };\n                    }\n                }\n            }\n        }\n        argIndex = 0;\n        for (i = 0; i < params.length; i++) {\n            if (evaldArguments[i]) { continue; }\n\n            arg = args && args[argIndex];\n\n            if (name = params[i].name) {\n                if (params[i].variadic) {\n                    varargs = [];\n                    for (j = argIndex; j < argsLength; j++) {\n                        varargs.push(args[j].value.eval(context));\n                    }\n                    frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n                } else {\n                    val = arg && arg.value;\n                    if (val) {\n                        // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                        if (Array.isArray(val)) {\n                            val = new DetachedRuleset(new Ruleset('', val));\n                        }\n                        else {\n                            val = val.eval(context);\n                        }\n                    } else if (params[i].value) {\n                        val = params[i].value.eval(mixinEnv);\n                        frame.resetCache();\n                    } else {\n                        throw { type: 'Runtime', message: `wrong number of arguments for ${this.name} (${argsLength} for ${this.arity})` };\n                    }\n\n                    frame.prependRule(new Declaration(name, val));\n                    evaldArguments[i] = val;\n                }\n            }\n\n            if (params[i].variadic && args) {\n                for (j = argIndex; j < argsLength; j++) {\n                    evaldArguments[j] = args[j].value.eval(context);\n                }\n            }\n            argIndex++;\n        }\n\n        return frame;\n    }\n\n    makeImportant() {\n        const rules = !this.rules ? this.rules : this.rules.map(r => {\n            if (r.makeImportant) {\n                return r.makeImportant(true);\n            } else {\n                return r;\n            }\n        });\n        const result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n        return result;\n    }\n\n    eval(context) {\n        return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || utils.copyArray(context.frames));\n    }\n\n    evalCall(context, args, important) {\n        const _arguments = [];\n        const mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\n        const frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\n        let rules;\n        let ruleset;\n\n        frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n\n        rules = utils.copyArray(this.rules);\n\n        ruleset = new Ruleset(null, rules);\n        ruleset.originalRuleset = this;\n        ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n        if (important) {\n            ruleset = ruleset.makeImportant();\n        }\n        return ruleset;\n    }\n\n    matchCondition(args, context) {\n        if (this.condition && !this.condition.eval(\n            new contexts.Eval(context,\n                [this.evalParams(context, /* the parameter variables */\n                    new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n                    .concat(this.frames || []) // the parent namespace/mixin frames\n                    .concat(context.frames)))) { // the current environment frames\n            return false;\n        }\n        return true;\n    }\n\n    matchArgs(args, context) {\n        const allArgsCnt = (args && args.length) || 0;\n        let len;\n        const optionalParameters = this.optionalParameters;\n        const requiredArgsCnt = !args ? 0 : args.reduce((count, p) => {\n            if (optionalParameters.indexOf(p.name) < 0) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0);\n\n        if (!this.variadic) {\n            if (requiredArgsCnt < this.required) {\n                return false;\n            }\n            if (allArgsCnt > this.params.length) {\n                return false;\n            }\n        } else {\n            if (requiredArgsCnt < (this.required - 1)) {\n                return false;\n            }\n        }\n\n        // check patterns\n        len = Math.min(requiredArgsCnt, this.arity);\n\n        for (let i = 0; i < len; i++) {\n            if (!this.params[i].name && !this.params[i].variadic) {\n                if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n\nDefinition.prototype.type = 'MixinDefinition';\nDefinition.prototype.evalFirst = true;\nexport default Definition;\n","import Node from './node';\nimport Selector from './selector';\nimport MixinDefinition from './mixin-definition';\nimport defaultFunc from '../functions/default';\n\nclass MixinCall extends Node {\n    constructor(elements, args, index, currentFileInfo, important) {\n        super();\n\n        this.selector = new Selector(elements);\n        this.arguments = args || [];\n        this._index = index;\n        this._fileInfo = currentFileInfo;\n        this.important = important;\n        this.allowRoot = true;\n        this.setParent(this.selector, this);\n    }\n\n    accept(visitor) {\n        if (this.selector) {\n            this.selector = visitor.visit(this.selector);\n        }\n        if (this.arguments.length) {\n            this.arguments = visitor.visitArray(this.arguments);\n        }\n    }\n\n    eval(context) {\n        let mixins;\n        let mixin;\n        let mixinPath;\n        const args = [];\n        let arg;\n        let argValue;\n        const rules = [];\n        let match = false;\n        let i;\n        let m;\n        let f;\n        let isRecursive;\n        let isOneFound;\n        const candidates = [];\n        let candidate;\n        const conditionResult = [];\n        let defaultResult;\n        const defFalseEitherCase = -1;\n        const defNone = 0;\n        const defTrue = 1;\n        const defFalse = 2;\n        let count;\n        let originalRuleset;\n        let noArgumentsFilter;\n\n        this.selector = this.selector.eval(context);\n\n        function calcDefGroup(mixin, mixinPath) {\n            let f;\n            let p;\n            let namespace;\n\n            for (f = 0; f < 2; f++) {\n                conditionResult[f] = true;\n                defaultFunc.value(f);\n                for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                    namespace = mixinPath[p];\n                    if (namespace.matchCondition) {\n                        conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                    }\n                }\n                if (mixin.matchCondition) {\n                    conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n                }\n            }\n            if (conditionResult[0] || conditionResult[1]) {\n                if (conditionResult[0] != conditionResult[1]) {\n                    return conditionResult[1] ?\n                        defTrue : defFalse;\n                }\n\n                return defNone;\n            }\n            return defFalseEitherCase;\n        }\n\n        for (i = 0; i < this.arguments.length; i++) {\n            arg = this.arguments[i];\n            argValue = arg.value.eval(context);\n            if (arg.expand && Array.isArray(argValue.value)) {\n                argValue = argValue.value;\n                for (m = 0; m < argValue.length; m++) {\n                    args.push({value: argValue[m]});\n                }\n            } else {\n                args.push({name: arg.name, value: argValue});\n            }\n        }\n\n        noArgumentsFilter = rule => rule.matchArgs(null, context);\n\n        for (i = 0; i < context.frames.length; i++) {\n            if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n                isOneFound = true;\n\n                // To make `default()` function independent of definition order we have two \"subpasses\" here.\n                // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n                // and build candidate list with corresponding flags. Then, when we know all possible matches,\n                // we make a final decision.\n\n                for (m = 0; m < mixins.length; m++) {\n                    mixin = mixins[m].rule;\n                    mixinPath = mixins[m].path;\n                    isRecursive = false;\n                    for (f = 0; f < context.frames.length; f++) {\n                        if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                            isRecursive = true;\n                            break;\n                        }\n                    }\n                    if (isRecursive) {\n                        continue;\n                    }\n\n                    if (mixin.matchArgs(args, context)) {\n                        candidate = {mixin, group: calcDefGroup(mixin, mixinPath)};\n\n                        if (candidate.group !== defFalseEitherCase) {\n                            candidates.push(candidate);\n                        }\n\n                        match = true;\n                    }\n                }\n\n                defaultFunc.reset();\n\n                count = [0, 0, 0];\n                for (m = 0; m < candidates.length; m++) {\n                    count[candidates[m].group]++;\n                }\n\n                if (count[defNone] > 0) {\n                    defaultResult = defFalse;\n                } else {\n                    defaultResult = defTrue;\n                    if ((count[defTrue] + count[defFalse]) > 1) {\n                        throw { type: 'Runtime',\n                            message: `Ambiguous use of \\`default()\\` found when matching for \\`${this.format(args)}\\``,\n                            index: this.getIndex(), filename: this.fileInfo().filename };\n                    }\n                }\n\n                for (m = 0; m < candidates.length; m++) {\n                    candidate = candidates[m].group;\n                    if ((candidate === defNone) || (candidate === defaultResult)) {\n                        try {\n                            mixin = candidates[m].mixin;\n                            if (!(mixin instanceof MixinDefinition)) {\n                                originalRuleset = mixin.originalRuleset || mixin;\n                                mixin = new MixinDefinition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                                mixin.originalRuleset = originalRuleset;\n                            }\n                            const newRules = mixin.evalCall(context, args, this.important).rules;\n                            this._setVisibilityToReplacement(newRules);\n                            Array.prototype.push.apply(rules, newRules);\n                        } catch (e) {\n                            throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\n                        }\n                    }\n                }\n\n                if (match) {\n                    return rules;\n                }\n            }\n        }\n        if (isOneFound) {\n            throw { type:    'Runtime',\n                message: `No matching definition was found for \\`${this.format(args)}\\``,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        } else {\n            throw { type:    'Name',\n                message: `${this.selector.toCSS().trim()} is undefined`,\n                index:   this.getIndex(), filename: this.fileInfo().filename };\n        }\n    }\n\n    _setVisibilityToReplacement(replacement) {\n        let i;\n        let rule;\n        if (this.blocksVisibility()) {\n            for (i = 0; i < replacement.length; i++) {\n                rule = replacement[i];\n                rule.addVisibilityBlock();\n            }\n        }\n    }\n\n    format(args) {\n        return `${this.selector.toCSS().trim()}(${args ? args.map(a => {\n            let argValue = '';\n            if (a.name) {\n                argValue += `${a.name}:`;\n            }\n            if (a.value.toCSS) {\n                argValue += a.value.toCSS();\n            } else {\n                argValue += '???';\n            }\n            return argValue;\n        }).join(', ') : ''})`;\n    }\n}\n\nMixinCall.prototype.type = 'MixinCall';\nexport default MixinCall;\n","const tree = Object.create(null);\n\nimport Node from './node';\nimport Color from './color';\nimport AtRule from './atrule';\nimport DetachedRuleset from './detached-ruleset';\nimport Operation from './operation';\nimport Dimension from './dimension';\nimport Unit from './unit';\nimport Keyword from './keyword';\nimport Variable from './variable';\nimport Property from './property';\nimport Ruleset from './ruleset';\nimport Element from './element';\nimport Attribute from './attribute';\nimport Combinator from './combinator';\nimport Selector from './selector';\nimport Quoted from './quoted';\nimport Expression from './expression';\nimport Declaration from './declaration';\nimport Call from './call';\nimport URL from './url';\nimport Import from './import';\nimport Comment from './comment';\nimport Anonymous from './anonymous';\nimport Value from './value';\nimport JavaScript from './javascript';\nimport Assignment from './assignment';\nimport Condition from './condition';\nimport Paren from './paren';\nimport Media from './media';\nimport UnicodeDescriptor from './unicode-descriptor';\nimport Negative from './negative';\nimport Extend from './extend';\nimport VariableCall from './variable-call';\nimport NamespaceValue from './namespace-value';\n\n// mixins\nimport MixinCall from './mixin-call';\nimport MixinDefinition from './mixin-definition';\n\nexport default {\n    Node, Color, AtRule, DetachedRuleset, Operation,\n    Dimension, Unit, Keyword, Variable, Property,\n    Ruleset, Element, Attribute, Combinator, Selector,\n    Quoted, Expression, Declaration, Call, URL, Import,\n    Comment, Anonymous, Value, JavaScript, Assignment,\n    Condition, Paren, Media, UnicodeDescriptor, Negative,\n    Extend, VariableCall, NamespaceValue,\n    mixin: {\n        Call: MixinCall,\n        Definition: MixinDefinition\n    }\n};","export default {\n    error: function(msg) {\n        this._fireEvent('error', msg);\n    },\n    warn: function(msg) {\n        this._fireEvent('warn', msg);\n    },\n    info: function(msg) {\n        this._fireEvent('info', msg);\n    },\n    debug: function(msg) {\n        this._fireEvent('debug', msg);\n    },\n    addListener: function(listener) {\n        this._listeners.push(listener);\n    },\n    removeListener: function(listener) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            if (this._listeners[i] === listener) {\n                this._listeners.splice(i, 1);\n                return;\n            }\n        }\n    },\n    _fireEvent: function(type, msg) {\n        for (let i = 0; i < this._listeners.length; i++) {\n            const logFunction = this._listeners[i][type];\n            if (logFunction) {\n                logFunction(msg);\n            }\n        }\n    },\n    _listeners: []\n};\n","/**\n * @todo Document why this abstraction exists, and the relationship between\n *       environment, file managers, and plugin manager\n */\n\nimport logger from '../logger';\n\nclass environment {\n    constructor(externalEnvironment, fileManagers) {\n        this.fileManagers = fileManagers || [];\n        externalEnvironment = externalEnvironment || {};\n\n        const optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\n        const requiredFunctions = [];\n        const functions = requiredFunctions.concat(optionalFunctions);\n\n        for (let i = 0; i < functions.length; i++) {\n            const propName = functions[i];\n            const environmentFunc = externalEnvironment[propName];\n            if (environmentFunc) {\n                this[propName] = environmentFunc.bind(externalEnvironment);\n            } else if (i < requiredFunctions.length) {\n                this.warn(`missing required function in environment - ${propName}`);\n            }\n        }\n    }\n\n    getFileManager(filename, currentDirectory, options, environment, isSync) {\n\n        if (!filename) {\n            logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n        }\n        if (currentDirectory == null) {\n            logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n        }\n\n        let fileManagers = this.fileManagers;\n        if (options.pluginManager) {\n            fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n        }\n        for (let i = fileManagers.length - 1; i >= 0 ; i--) {\n            const fileManager = fileManagers[i];\n            if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n                return fileManager;\n            }\n        }\n        return null;\n    }\n\n    addFileManager(fileManager) {\n        this.fileManagers.push(fileManager);\n    }\n\n    clearFileManagers() {\n        this.fileManagers = [];\n    }\n}\n\nexport default environment;\n","class AbstractFileManager {\n    getPath(filename) {\n        let j = filename.lastIndexOf('?');\n        if (j > 0) {\n            filename = filename.slice(0, j);\n        }\n        j = filename.lastIndexOf('/');\n        if (j < 0) {\n            j = filename.lastIndexOf('\\\\');\n        }\n        if (j < 0) {\n            return '';\n        }\n        return filename.slice(0, j + 1);\n    }\n\n    tryAppendExtension(path, ext) {\n        return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n    }\n\n    tryAppendLessExtension(path) {\n        return this.tryAppendExtension(path, '.less');\n    };\n\n    supportsSync() { return false; }\n\n    alwaysMakePathsAbsolute() { return false; }\n\n    isPathAbsolute(filename) {\n        return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n    }\n    // TODO: pull out / replace?\n    join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return basePath + laterPath;\n    };\n\n    pathDiff(url, baseUrl) {\n        // diff between two paths to create a relative path\n        const urlParts = this.extractUrlParts(url);\n        const baseUrlParts = this.extractUrlParts(baseUrl);\n\n        let i;\n        let max;\n        let urlDirectories;\n        let baseUrlDirectories;\n        let diff = '';\n        if (urlParts.hostPart !== baseUrlParts.hostPart) {\n            return '';\n        }\n        max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n        for (i = 0; i < max; i++) {\n            if (baseUrlParts.directories[i] !== urlParts.directories[i]) { break; }\n        }\n        baseUrlDirectories = baseUrlParts.directories.slice(i);\n        urlDirectories = urlParts.directories.slice(i);\n        for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n            diff += '../';\n        }\n        for (i = 0; i < urlDirectories.length - 1; i++) {\n            diff += `${urlDirectories[i]}/`;\n        }\n        return diff;\n    };\n    // helper function, not part of API\n    extractUrlParts(url, baseUrl) {\n        // urlParts[1] = protocol://hostname/ OR /\n        // urlParts[2] = / if path relative to host base\n        // urlParts[3] = directories\n        // urlParts[4] = filename\n        // urlParts[5] = parameters\n\n        const urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\n\n        const urlParts = url.match(urlPartsRegex);\n        const returner = {};\n        let rawDirectories = [];\n        const directories = [];\n        let i;\n        let baseUrlParts;\n\n        if (!urlParts) {\n            throw new Error(`Could not parse sheet href - '${url}'`);\n        }\n\n        // Stylesheets in IE don't always return the full path\n        if (baseUrl && (!urlParts[1] || urlParts[2])) {\n            baseUrlParts = baseUrl.match(urlPartsRegex);\n            if (!baseUrlParts) {\n                throw new Error(`Could not parse page url - '${baseUrl}'`);\n            }\n            urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n            if (!urlParts[2]) {\n                urlParts[3] = baseUrlParts[3] + urlParts[3];\n            }\n        }\n\n        if (urlParts[3]) {\n            rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\n\n            // collapse '..' and skip '.'\n            for (i = 0; i < rawDirectories.length; i++) {\n\n                if (rawDirectories[i] === '..') {\n                    directories.pop();\n                }\n                else if (rawDirectories[i] !== '.') {\n                    directories.push(rawDirectories[i]);\n                }\n            \n            }\n        }\n\n        returner.hostPart = urlParts[1];\n        returner.directories = directories;\n        returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n        returner.path = (urlParts[1] || '') + directories.join('/');\n        returner.filename = urlParts[4];\n        returner.fileUrl = returner.path + (urlParts[4] || '');\n        returner.url = returner.fileUrl + (urlParts[5] || '');\n        return returner;\n    };\n}\n\nexport default AbstractFileManager;\n","import functionRegistry from '../functions/function-registry';\nimport LessError from '../less-error';\n\nclass AbstractPluginLoader {\n    constructor() {\n        // Implemented by Node.js plugin loader\n        this.require = () => null\n    }\n\n    evalPlugin(contents, context, imports, pluginOptions, fileInfo) {\n        let loader;\n        let registry;\n        let pluginObj;\n        let localModule;\n        let pluginManager;\n        let filename;\n        let result;\n\n        pluginManager = context.pluginManager;\n\n        if (fileInfo) {\n            if (typeof fileInfo === 'string') {\n                filename = fileInfo;\n            }\n            else {\n                filename = fileInfo.filename;\n            }\n        }\n        const shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\n\n        if (filename) {\n            pluginObj = pluginManager.get(filename);\n\n            if (pluginObj) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                if (result) {\n                    return result;\n                }\n                try {\n                    if (pluginObj.use) {\n                        pluginObj.use.call(this.context, pluginObj);\n                    }\n                }\n                catch (e) {\n                    e.message = e.message || 'Error during @plugin call';\n                    return new LessError(e, imports, filename);\n                }\n                return pluginObj;\n            }\n        }\n        localModule = {\n            exports: {},\n            pluginManager,\n            fileInfo\n        };\n        registry = functionRegistry.create();\n\n        const registerPlugin = obj => {\n            pluginObj = obj;\n        };\n\n        try {\n            loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n            loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n        }\n        catch (e) {\n            return new LessError(e, imports, filename);\n        }\n\n        if (!pluginObj) {\n            pluginObj = localModule.exports;\n        }\n        pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n\n        if (pluginObj instanceof LessError) {\n            return pluginObj;\n        }\n\n        if (pluginObj) {\n            pluginObj.imports = imports;\n            pluginObj.filename = filename;\n\n            // For < 3.x (or unspecified minVersion) - setOptions() before install()\n            if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n                result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n                if (result) {\n                    return result;\n                }\n            }\n\n            // Run on first load\n            pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n            pluginObj.functions = registry.getLocalFunctions();\n\n            // Need to call setOptions again because the pluginObj might have functions\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n            if (result) {\n                return result;\n            }\n\n            // Run every @plugin call\n            try {\n                if (pluginObj.use) {\n                    pluginObj.use.call(this.context, pluginObj);\n                }\n            }\n            catch (e) {\n                e.message = e.message || 'Error during @plugin call';\n                return new LessError(e, imports, filename);\n            }\n\n        }\n        else {\n            return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n        }\n\n        return pluginObj;\n    }\n\n    trySetOptions(plugin, filename, name, options) {\n        if (options && !plugin.setOptions) {\n            return new LessError({\n                message: `Options have been provided but the plugin ${name} does not support any options.`\n            });\n        }\n        try {\n            plugin.setOptions && plugin.setOptions(options);\n        }\n        catch (e) {\n            return new LessError(e);\n        }\n    }\n\n    validatePlugin(plugin, filename, name) {\n        if (plugin) {\n            // support plugins being a function\n            // so that the plugin can be more usable programmatically\n            if (typeof plugin === 'function') {\n                plugin = new plugin();\n            }\n\n            if (plugin.minVersion) {\n                if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                    return new LessError({\n                        message: `Plugin ${name} requires version ${this.versionToString(plugin.minVersion)}`\n                    });\n                }\n            }\n            return plugin;\n        }\n        return null;\n    }\n\n    compareVersion(aVersion, bVersion) {\n        if (typeof aVersion === 'string') {\n            aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n            aVersion.shift();\n        }\n        for (let i = 0; i < aVersion.length; i++) {\n            if (aVersion[i] !== bVersion[i]) {\n                return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n            }\n        }\n        return 0;\n    }\n\n    versionToString(version) {\n        let versionString = '';\n        for (let i = 0; i < version.length; i++) {\n            versionString += (versionString ? '.' : '') + version[i];\n        }\n        return versionString;\n    }\n\n    printUsage(plugins) {\n        for (let i = 0; i < plugins.length; i++) {\n            const plugin = plugins[i];\n            if (plugin.printUsage) {\n                plugin.printUsage();\n            }\n        }\n    }\n}\n\nexport default AbstractPluginLoader;\n\n","import tree from '../tree';\nconst _visitArgs = { visitDeeper: true };\nlet _hasIndexed = false;\n\nfunction _noop(node) {\n    return node;\n}\n\nfunction indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    let key;\n\n    let child;\n    for (key in parent) { \n        /* eslint guard-for-in: 0 */\n        child = parent[key];\n        switch (typeof child) {\n            case 'function':\n                // ignore bound functions directly on tree which do not have a prototype\n                // or aren't nodes\n                if (child.prototype && child.prototype.type) {\n                    child.prototype.typeIndex = ticker++;\n                }\n                break;\n            case 'object':\n                ticker = indexNodeTypes(child, ticker);\n                break;\n        \n        }\n    }\n    return ticker;\n}\n\nclass Visitor {\n    constructor(implementation) {\n        this._implementation = implementation;\n        this._visitInCache = {};\n        this._visitOutCache = {};\n\n        if (!_hasIndexed) {\n            indexNodeTypes(tree, 1);\n            _hasIndexed = true;\n        }\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n\n        const nodeTypeIndex = node.typeIndex;\n        if (!nodeTypeIndex) {\n            // MixinCall args aren't a node type?\n            if (node.value && node.value.typeIndex) {\n                this.visit(node.value);\n            }\n            return node;\n        }\n\n        const impl = this._implementation;\n        let func = this._visitInCache[nodeTypeIndex];\n        let funcOut = this._visitOutCache[nodeTypeIndex];\n        const visitArgs = _visitArgs;\n        let fnName;\n\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n            fnName = `visit${node.type}`;\n            func = impl[fnName] || _noop;\n            funcOut = impl[`${fnName}Out`] || _noop;\n            this._visitInCache[nodeTypeIndex] = func;\n            this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n            const newNode = func.call(impl, node, visitArgs);\n            if (node && impl.isReplacing) {\n                node = newNode;\n            }\n        }\n\n        if (visitArgs.visitDeeper && node && node.accept) {\n            node.accept(this);\n        }\n\n        if (funcOut != _noop) {\n            funcOut.call(impl, node);\n        }\n\n        return node;\n    }\n\n    visitArray(nodes, nonReplacing) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n\n        // Non-replacing\n        if (nonReplacing || !this._implementation.isReplacing) {\n            for (i = 0; i < cnt; i++) {\n                this.visit(nodes[i]);\n            }\n            return nodes;\n        }\n\n        // Replacing\n        const out = [];\n        for (i = 0; i < cnt; i++) {\n            const evald = this.visit(nodes[i]);\n            if (evald === undefined) { continue; }\n            if (!evald.splice) {\n                out.push(evald);\n            } else if (evald.length) {\n                this.flatten(evald, out);\n            }\n        }\n        return out;\n    }\n\n    flatten(arr, out) {\n        if (!out) {\n            out = [];\n        }\n\n        let cnt;\n        let i;\n        let item;\n        let nestedCnt;\n        let j;\n        let nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n            item = arr[i];\n            if (item === undefined) {\n                continue;\n            }\n            if (!item.splice) {\n                out.push(item);\n                continue;\n            }\n\n            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                nestedItem = item[j];\n                if (nestedItem === undefined) {\n                    continue;\n                }\n                if (!nestedItem.splice) {\n                    out.push(nestedItem);\n                } else if (nestedItem.length) {\n                    this.flatten(nestedItem, out);\n                }\n            }\n        }\n\n        return out;\n    }\n}\n\nexport default Visitor;\n","class ImportSequencer {\n    constructor(onSequencerEmpty) {\n        this.imports = [];\n        this.variableImports = [];\n        this._onSequencerEmpty = onSequencerEmpty;\n        this._currentDepth = 0;\n    }\n\n    addImport(callback) {\n        const importSequencer = this;\n\n        const importItem = {\n            callback,\n            args: null,\n            isReady: false\n        };\n\n        this.imports.push(importItem);\n        return function(...args) {\n            importItem.args = Array.prototype.slice.call(args, 0);\n            importItem.isReady = true;\n            importSequencer.tryRun();\n        };\n    }\n\n    addVariableImport(callback) {\n        this.variableImports.push(callback);\n    }\n\n    tryRun() {\n        this._currentDepth++;\n        try {\n            while (true) {\n                while (this.imports.length > 0) {\n                    const importItem = this.imports[0];\n                    if (!importItem.isReady) {\n                        return;\n                    }\n                    this.imports = this.imports.slice(1);\n                    importItem.callback.apply(null, importItem.args);\n                }\n                if (this.variableImports.length === 0) {\n                    break;\n                }\n                const variableImport = this.variableImports[0];\n                this.variableImports = this.variableImports.slice(1);\n                variableImport();\n            }\n        } finally {\n            this._currentDepth--;\n        }\n        if (this._currentDepth === 0 && this._onSequencerEmpty) {\n            this._onSequencerEmpty();\n        }\n    }\n}\n\nexport default ImportSequencer;\n","import contexts from '../contexts';\nimport Visitor from './visitor';\nimport ImportSequencer from './import-sequencer';\nimport * as utils from '../utils';\n\nconst ImportVisitor = function(importer, finish) {\n\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n};\n\nImportVisitor.prototype = {\n    isReplacing: false,\n    run: function (root) {\n        try {\n            // process the contents\n            this._visitor.visit(root);\n        }\n        catch (e) {\n            this.error = e;\n        }\n\n        this.isFinished = true;\n        this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function() {\n        if (!this.isFinished) {\n            return;\n        }\n        this._finish(this.error);\n    },\n    visitImport: function (importNode, visitArgs) {\n        const inlineCSS = importNode.options.inline;\n\n        if (!importNode.css || inlineCSS) {\n\n            const context = new contexts.Eval(this.context, utils.copyArray(this.context.frames));\n            const importParent = context.frames[0];\n\n            this.importCount++;\n            if (importNode.isVariableImport()) {\n                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n            } else {\n                this.processImportNode(importNode, context, importParent);\n            }\n        }\n        visitArgs.visitDeeper = false;\n    },\n    processImportNode: function(importNode, context, importParent) {\n        let evaldImportNode;\n        const inlineCSS = importNode.options.inline;\n\n        try {\n            evaldImportNode = importNode.evalForImport(context);\n        } catch (e) {\n            if (!e.filename) { e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename; }\n            // attempt to eval properly and treat as css\n            importNode.css = true;\n            // if that fails, this error will be thrown\n            importNode.error = e;\n        }\n\n        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n            if (evaldImportNode.options.multiple) {\n                context.importMultiple = true;\n            }\n\n            // try appending if we haven't determined if it is css or not\n            const tryAppendLessExtension = evaldImportNode.css === undefined;\n\n            for (let i = 0; i < importParent.rules.length; i++) {\n                if (importParent.rules[i] === importNode) {\n                    importParent.rules[i] = evaldImportNode;\n                    break;\n                }\n            }\n\n            const onImported = this.onImported.bind(this, evaldImportNode, context);\n            const sequencedOnImported = this._sequencer.addImport(onImported);\n\n            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(),\n                evaldImportNode.options, sequencedOnImported);\n        } else {\n            this.importCount--;\n            if (this.isFinished) {\n                this._sequencer.tryRun();\n            }\n        }\n    },\n    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n        if (e) {\n            if (!e.filename) {\n                e.index = importNode.getIndex(); e.filename = importNode.fileInfo().filename;\n            }\n            this.error = e;\n        }\n\n        const importVisitor = this;\n        const inlineCSS = importNode.options.inline;\n        const isPlugin = importNode.options.isPlugin;\n        const isOptional = importNode.options.optional;\n        const duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n        if (!context.importMultiple) {\n            if (duplicateImport) {\n                importNode.skip = true;\n            } else {\n                importNode.skip = () => {\n                    if (fullPath in importVisitor.onceFileDetectionMap) {\n                        return true;\n                    }\n                    importVisitor.onceFileDetectionMap[fullPath] = true;\n                    return false;\n                };\n            }\n        }\n\n        if (!fullPath && isOptional) {\n            importNode.skip = true;\n        }\n\n        if (root) {\n            importNode.root = root;\n            importNode.importedFilename = fullPath;\n\n            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                importVisitor.recursionDetector[fullPath] = true;\n\n                const oldContext = this.context;\n                this.context = context;\n                try {\n                    this._visitor.visit(root);\n                } catch (e) {\n                    this.error = e;\n                }\n                this.context = oldContext;\n            }\n        }\n\n        importVisitor.importCount--;\n\n        if (importVisitor.isFinished) {\n            importVisitor._sequencer.tryRun();\n        }\n    },\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.unshift(declNode);\n        } else {\n            visitArgs.visitDeeper = false;\n        }\n    },\n    visitDeclarationOut: function(declNode) {\n        if (declNode.value.type === 'DetachedRuleset') {\n            this.context.frames.shift();\n        }\n    },\n    visitAtRule: function (atRuleNode, visitArgs) {\n        this.context.frames.unshift(atRuleNode);\n    },\n    visitAtRuleOut: function (atRuleNode) {\n        this.context.frames.shift();\n    },\n    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n        this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function (mixinDefinitionNode) {\n        this.context.frames.shift();\n    },\n    visitRuleset: function (rulesetNode, visitArgs) {\n        this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function (rulesetNode) {\n        this.context.frames.shift();\n    },\n    visitMedia: function (mediaNode, visitArgs) {\n        this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function (mediaNode) {\n        this.context.frames.shift();\n    }\n};\nexport default ImportVisitor;\n","class SetTreeVisibilityVisitor {\n    constructor(visible) {\n        this.visible = visible;\n    }\n\n    run(root) {\n        this.visit(root);\n    }\n\n    visitArray(nodes) {\n        if (!nodes) {\n            return nodes;\n        }\n\n        const cnt = nodes.length;\n        let i;\n        for (i = 0; i < cnt; i++) {\n            this.visit(nodes[i]);\n        }\n        return nodes;\n    }\n\n    visit(node) {\n        if (!node) {\n            return node;\n        }\n        if (node.constructor === Array) {\n            return this.visitArray(node);\n        }\n\n        if (!node.blocksVisibility || node.blocksVisibility()) {\n            return node;\n        }\n        if (this.visible) {\n            node.ensureVisibility();\n        } else {\n            node.ensureInvisibility();\n        }\n\n        node.accept(this);\n        return node;\n    }\n}\n\nexport default SetTreeVisibilityVisitor;","import tree from '../tree';\nimport Visitor from './visitor';\nimport logger from '../logger';\nimport * as utils from '../utils';\n\n/* jshint loopfunc:true */\n\nclass ExtendFinderVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n        this.contexts = [];\n        this.allExtendsStack = [[]];\n    }\n\n    run(root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n\n        let i;\n        let j;\n        let extend;\n        const allSelectorsExtendList = [];\n        let extendList;\n\n        // get &:extend(.a); rules which apply to all selectors in this ruleset\n        const rules = rulesetNode.rules;\n\n        const ruleCnt = rules ? rules.length : 0;\n        for (i = 0; i < ruleCnt; i++) {\n            if (rulesetNode.rules[i] instanceof tree.Extend) {\n                allSelectorsExtendList.push(rules[i]);\n                rulesetNode.extendOnEveryPath = true;\n            }\n        }\n\n        // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n        const paths = rulesetNode.paths;\n        for (i = 0; i < paths.length; i++) {\n            const selectorPath = paths[i];\n            const selector = selectorPath[selectorPath.length - 1];\n            const selExtendList = selector.extendList;\n\n            extendList = selExtendList ? utils.copyArray(selExtendList).concat(allSelectorsExtendList)\n                : allSelectorsExtendList;\n\n            if (extendList) {\n                extendList = extendList.map(allSelectorsExtend => allSelectorsExtend.clone());\n            }\n\n            for (j = 0; j < extendList.length; j++) {\n                this.foundExtends = true;\n                extend = extendList[j];\n                extend.findSelfSelectors(selectorPath);\n                extend.ruleset = rulesetNode;\n                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }\n                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n            }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n    }\n\n    visitRulesetOut(rulesetNode) {\n        if (!rulesetNode.root) {\n            this.contexts.length = this.contexts.length - 1;\n        }\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n    }\n}\n\nclass ProcessExtendsVisitor {\n    constructor() {\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        const extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n        if (!extendFinder.foundExtends) { return root; }\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n        const newRoot = this._visitor.visit(root);\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n    }\n\n    checkExtendsForNonMatched(extendList) {\n        const indices = this.extendIndices;\n        extendList.filter(extend => !extend.hasFoundMatches && extend.parent_ids.length == 1).forEach(extend => {\n            let selector = '_unknown_';\n            try {\n                selector = extend.selector.toCSS({});\n            }\n            catch (_) {}\n\n            if (!indices[`${extend.index} ${selector}`]) {\n                indices[`${extend.index} ${selector}`] = true;\n                logger.warn(`extend '${selector}' has no matches`);\n            }\n        });\n    }\n\n    doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n\n        let extendIndex;\n\n        let targetExtendIndex;\n        let matches;\n        const extendsToAdd = [];\n        let newSelector;\n        const extendVisitor = this;\n        let selectorPath;\n        let extend;\n        let targetExtend;\n        let newExtend;\n\n        iterationCount = iterationCount || 0;\n\n        // loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n\n                extend = extendsList[extendIndex];\n                targetExtend = extendsListTarget[targetExtendIndex];\n\n                // look for circular references\n                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }\n\n                // find a match in the target extends self selector (the bit before :extend)\n                selectorPath = [targetExtend.selfSelectors[0]];\n                matches = extendVisitor.findMatch(extend, selectorPath);\n\n                if (matches.length) {\n                    extend.hasFoundMatches = true;\n\n                    // we found a match, so for each self selector..\n                    extend.selfSelectors.forEach(selfSelector => {\n                        const info = targetExtend.visibilityInfo();\n\n                        // process the extend as usual\n                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n\n                        // but now we create a new extend from it\n                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                        newExtend.selfSelectors = newSelector;\n\n                        // add the extend onto the list of extends for that selector\n                        newSelector[newSelector.length - 1].extendList = [newExtend];\n\n                        // record that we need to add it.\n                        extendsToAdd.push(newExtend);\n                        newExtend.ruleset = targetExtend.ruleset;\n\n                        // remember its parents for circular references\n                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n\n                        // only process the selector once.. if we have :extend(.a,.b) then multiple\n                        // extends will look at the same selector path, so when extending\n                        // we know that any others will be duplicates in terms of what is added to the css\n                        if (targetExtend.firstExtendOnThisSelectorPath) {\n                            newExtend.firstExtendOnThisSelectorPath = true;\n                            targetExtend.ruleset.paths.push(newSelector);\n                        }\n                    });\n                }\n            }\n        }\n\n        if (extendsToAdd.length) {\n            // try to detect circular references to stop a stack overflow.\n            // may no longer be needed.\n            this.extendChainCount++;\n            if (iterationCount > 100) {\n                let selectorOne = '{unable to calculate}';\n                let selectorTwo = '{unable to calculate}';\n                try {\n                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                    selectorTwo = extendsToAdd[0].selector.toCSS();\n                }\n                catch (e) {}\n                throw { message: `extend circular reference detected. One of the circular extends is currently:${selectorOne}:extend(${selectorTwo})`};\n            }\n\n            // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n            // d extending e...\n            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n            return extendsToAdd;\n        }\n    }\n\n    visitDeclaration(ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitSelector(selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n            return;\n        }\n        let matches;\n        let pathIndex;\n        let extendIndex;\n        const allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\n        const selectorsToAdd = [];\n        const extendVisitor = this;\n        let selectorPath;\n\n        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                selectorPath = rulesetNode.paths[pathIndex];\n\n                // extending extends happens initially, before the main pass\n                if (rulesetNode.extendOnEveryPath) { continue; }\n                const extendList = selectorPath[selectorPath.length - 1].extendList;\n                if (extendList && extendList.length) { continue; }\n\n                matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n                if (matches.length) {\n                    allExtends[extendIndex].hasFoundMatches = true;\n\n                    allExtends[extendIndex].selfSelectors.forEach(selfSelector => {\n                        let extendedSelectors;\n                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                        selectorsToAdd.push(extendedSelectors);\n                    });\n                }\n            }\n        }\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n    }\n\n    findMatch(extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        let haystackSelectorIndex;\n\n        let hackstackSelector;\n        let hackstackElementIndex;\n        let haystackElement;\n        let targetCombinator;\n        let i;\n        const extendVisitor = this;\n        const needleElements = extend.selector.elements;\n        const potentialMatches = [];\n        let potentialMatch;\n        const matches = [];\n\n        // loop through the haystack elements\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n\n                haystackElement = hackstackSelector.elements[hackstackElementIndex];\n\n                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                        initialCombinator: haystackElement.combinator});\n                }\n\n                for (i = 0; i < potentialMatches.length; i++) {\n                    potentialMatch = potentialMatches[i];\n\n                    // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                    // work out what the resulting combinator will be\n                    targetCombinator = haystackElement.combinator.value;\n                    if (targetCombinator === '' && hackstackElementIndex === 0) {\n                        targetCombinator = ' ';\n                    }\n\n                    // if we don't match, null our match to indicate failure\n                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                        potentialMatch = null;\n                    } else {\n                        potentialMatch.matched++;\n                    }\n\n                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                    if (potentialMatch) {\n                        potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                        if (potentialMatch.finished &&\n                            (!extend.allowAfter &&\n                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                            potentialMatch = null;\n                        }\n                    }\n                    // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                    if (potentialMatch) {\n                        if (potentialMatch.finished) {\n                            potentialMatch.length = needleElements.length;\n                            potentialMatch.endPathIndex = haystackSelectorIndex;\n                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                            matches.push(potentialMatch);\n                        }\n                    } else {\n                        potentialMatches.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n\n    isElementValuesEqual(elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n            return elementValue1 === elementValue2;\n        }\n        if (elementValue1 instanceof tree.Attribute) {\n            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                return false;\n            }\n            if (!elementValue1.value || !elementValue2.value) {\n                if (elementValue1.value || elementValue2.value) {\n                    return false;\n                }\n                return true;\n            }\n            elementValue1 = elementValue1.value.value || elementValue1.value;\n            elementValue2 = elementValue2.value.value || elementValue2.value;\n            return elementValue1 === elementValue2;\n        }\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n        if (elementValue1 instanceof tree.Selector) {\n            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                return false;\n            }\n            for (let i = 0; i  < elementValue1.elements.length; i++) {\n                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                        return false;\n                    }\n                }\n                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n        // for a set of matches, replace each match with the replacement selector\n\n        let currentSelectorPathIndex = 0;\n\n        let currentSelectorPathElementIndex = 0;\n        let path = [];\n        let matchIndex;\n        let selector;\n        let firstElement;\n        let match;\n        let newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n            match = matches[matchIndex];\n            selector = selectorPath[match.pathIndex];\n            firstElement = new tree.Element(\n                match.initialCombinator,\n                replacementSelector.elements[0].value,\n                replacementSelector.elements[0].isVariable,\n                replacementSelector.elements[0].getIndex(),\n                replacementSelector.elements[0].fileInfo()\n            );\n\n            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                path[path.length - 1].elements = path[path.length - 1]\n                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n\n            newElements = selector.elements\n                .slice(currentSelectorPathElementIndex, match.index)\n                .concat([firstElement])\n                .concat(replacementSelector.elements.slice(1));\n\n            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                path[path.length - 1].elements =\n                    path[path.length - 1].elements.concat(newElements);\n            } else {\n                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n\n                path.push(new tree.Selector(\n                    newElements\n                ));\n            }\n            currentSelectorPathIndex = match.endPathIndex;\n            currentSelectorPathElementIndex = match.endPathElementIndex;\n            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                currentSelectorPathElementIndex = 0;\n                currentSelectorPathIndex++;\n            }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1]\n                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(currentValue => {\n            // we can re-use elements here, because the visibility property matters only for selectors\n            const derived = currentValue.createDerived(currentValue.elements);\n            if (isVisible) {\n                derived.ensureVisibility();\n            } else {\n                derived.ensureInvisibility();\n            }\n            return derived;\n        });\n        return path;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        let newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitMediaOut(mediaNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        let newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n    }\n\n    visitAtRuleOut(atRuleNode) {\n        const lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n    }\n}\n\nexport default ProcessExtendsVisitor;\n","import Visitor from './visitor';\n\nclass JoinSelectorVisitor {\n    constructor() {\n        this.contexts = [[]];\n        this._visitor = new Visitor(this);\n    }\n\n    run(root) {\n        return this._visitor.visit(root);\n    }\n\n    visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n    }\n\n    visitRuleset(rulesetNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        const paths = [];\n        let selectors;\n\n        this.contexts.push(paths);\n\n        if (!rulesetNode.root) {\n            selectors = rulesetNode.selectors;\n            if (selectors) {\n                selectors = selectors.filter(selector => selector.getIsOutput());\n                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors); }\n            }\n            if (!selectors) { rulesetNode.rules = null; }\n            rulesetNode.paths = paths;\n        }\n    }\n\n    visitRulesetOut(rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n    }\n\n    visitMedia(mediaNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n    }\n\n    visitAtRule(atRuleNode, visitArgs) {\n        const context = this.contexts[this.contexts.length - 1];\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\n        }\n    }\n}\n\nexport default JoinSelectorVisitor;\n","import tree from '../tree';\nimport Visitor from './visitor';\n\nclass CSSVisitorUtils {\n    constructor(context) {\n        this._visitor = new Visitor(this);\n        this._context = context;\n    }\n\n    containsSilentNonBlockedChild(bodyRules) {\n        let rule;\n        if (!bodyRules) {\n            return false;\n        }\n        for (let r = 0; r < bodyRules.length; r++) {\n            rule = bodyRules[r];\n            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                // the atrule contains something that was referenced (likely by extend)\n                // therefore it needs to be shown in output too\n                return true;\n            }\n        }\n        return false;\n    }\n\n    keepOnlyVisibleChilds(owner) {\n        if (owner && owner.rules) {\n            owner.rules = owner.rules.filter(thing => thing.isVisible());\n        }\n    }\n\n    isEmpty(owner) {\n        return (owner && owner.rules) \n            ? (owner.rules.length === 0) : true;\n    }\n\n    hasVisibleSelector(rulesetNode) {\n        return (rulesetNode && rulesetNode.paths)\n            ? (rulesetNode.paths.length > 0) : false;\n    }\n\n    resolveVisibility(node, originalRules) {\n        if (!node.blocksVisibility()) {\n            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                return ;\n            }\n\n            return node;\n        }\n\n        const compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n            return ;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n\n        return node;\n    }\n\n    isVisibleRuleset(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n            return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n            return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nconst ToCSSVisitor = function(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n};\n\nToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function (root) {\n        return this._visitor.visit(root);\n    },\n\n    visitDeclaration: function (declNode, visitArgs) {\n        if (declNode.blocksVisibility() || declNode.variable) {\n            return;\n        }\n        return declNode;\n    },\n\n    visitMixinDefinition: function (mixinNode, visitArgs) {\n        // mixin definitions do not get eval'd - this means they keep state\n        // so we have to clear that state here so it isn't used if toCSS is called twice\n        mixinNode.frames = [];\n    },\n\n    visitExtend: function (extendNode, visitArgs) {\n    },\n\n    visitComment: function (commentNode, visitArgs) {\n        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n            return;\n        }\n        return commentNode;\n    },\n\n    visitMedia: function(mediaNode, visitArgs) {\n        const originalRules = mediaNode.rules[0].rules;\n        mediaNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n\n    visitImport: function (importNode, visitArgs) {\n        if (importNode.blocksVisibility()) {\n            return ;\n        }\n        return importNode;\n    },\n\n    visitAtRule: function(atRuleNode, visitArgs) {\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n            return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n        } else {\n            return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n        }\n    },\n\n    visitAnonymous: function(anonymousNode, visitArgs) {\n        if (!anonymousNode.blocksVisibility()) {\n            anonymousNode.accept(this._visitor);\n            return anonymousNode;\n        }\n    },\n\n    visitAtRuleWithBody: function(atRuleNode, visitArgs) {\n        // if there is only one nested ruleset and that one has no path, then it is\n        // just fake ruleset\n        function hasFakeRuleset(atRuleNode) {\n            const bodyRules = atRuleNode.rules;\n            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n        }\n        function getBodyRules(atRuleNode) {\n            const nodeRules = atRuleNode.rules;\n            if (hasFakeRuleset(atRuleNode)) {\n                return nodeRules[0].rules;\n            }\n\n            return nodeRules;\n        }\n        // it is still true that it is only one ruleset in array\n        // this is last such moment\n        // process childs\n        const originalRules = getBodyRules(atRuleNode);\n        atRuleNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n\n        if (!this.utils.isEmpty(atRuleNode)) {\n            this._mergeRules(atRuleNode.rules[0].rules);\n        }\n\n        return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n\n    visitAtRuleWithoutBody: function(atRuleNode, visitArgs) {\n        if (atRuleNode.blocksVisibility()) {\n            return;\n        }\n\n        if (atRuleNode.name === '@charset') {\n            // Only output the debug info together with subsequent @charset definitions\n            // a comment (or @media statement) before the actual @charset atrule would\n            // be considered illegal css as it has to be on the first line\n            if (this.charset) {\n                if (atRuleNode.debugInfo) {\n                    const comment = new tree.Comment(`/* ${atRuleNode.toCSS(this._context).replace(/\\n/g, '')} */\\n`);\n                    comment.debugInfo = atRuleNode.debugInfo;\n                    return this._visitor.visit(comment);\n                }\n                return;\n            }\n            this.charset = true;\n        }\n\n        return atRuleNode;\n    },\n\n    checkValidNodes: function(rules, isRoot) {\n        if (!rules) {\n            return;\n        }\n\n        for (let i = 0; i < rules.length; i++) {\n            const ruleNode = rules[i];\n            if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode instanceof tree.Call) {\n                throw { message: `Function '${ruleNode.name}' is undefined`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n            if (ruleNode.type && !ruleNode.allowRoot) {\n                throw { message: `${ruleNode.type} node returned by a function is not valid here`,\n                    index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename};\n            }\n        }\n    },\n\n    visitRuleset: function (rulesetNode, visitArgs) {\n        // at this point rulesets are nested into each other\n        let rule;\n\n        const rulesets = [];\n\n        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n        if (!rulesetNode.root) {\n            // remove invisible paths\n            this._compileRulesetPaths(rulesetNode);\n\n            // remove rulesets from this ruleset body and compile them separately\n            const nodeRules = rulesetNode.rules;\n\n            let nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n            for (let i = 0; i < nodeRuleCnt; ) {\n                rule = nodeRules[i];\n                if (rule && rule.rules) {\n                    // visit because we are moving them out from being a child\n                    rulesets.push(this._visitor.visit(rule));\n                    nodeRules.splice(i, 1);\n                    nodeRuleCnt--;\n                    continue;\n                }\n                i++;\n            }\n            // accept the visitor to remove rules and refactor itself\n            // then we can decide nogw whether we want it or not\n            // compile body\n            if (nodeRuleCnt > 0) {\n                rulesetNode.accept(this._visitor);\n            } else {\n                rulesetNode.rules = null;\n            }\n            visitArgs.visitDeeper = false;\n        } else { // if (! rulesetNode.root) {\n            rulesetNode.accept(this._visitor);\n            visitArgs.visitDeeper = false;\n        }\n\n        if (rulesetNode.rules) {\n            this._mergeRules(rulesetNode.rules);\n            this._removeDuplicateRules(rulesetNode.rules);\n        }\n\n        // now decide whether we keep the ruleset\n        if (this.utils.isVisibleRuleset(rulesetNode)) {\n            rulesetNode.ensureVisibility();\n            rulesets.splice(0, 0, rulesetNode);\n        }\n\n        if (rulesets.length === 1) {\n            return rulesets[0];\n        }\n        return rulesets;\n    },\n\n    _compileRulesetPaths: function(rulesetNode) {\n        if (rulesetNode.paths) {\n            rulesetNode.paths = rulesetNode.paths\n                .filter(p => {\n                    let i;\n                    if (p[0].elements[0].combinator.value === ' ') {\n                        p[0].elements[0].combinator = new(tree.Combinator)('');\n                    }\n                    for (i = 0; i < p.length; i++) {\n                        if (p[i].isVisible() && p[i].getIsOutput()) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n        }\n    },\n\n    _removeDuplicateRules: function(rules) {\n        if (!rules) { return; }\n\n        // remove duplicates\n        const ruleCache = {};\n\n        let ruleList;\n        let rule;\n        let i;\n\n        for (i = rules.length - 1; i >= 0 ; i--) {\n            rule = rules[i];\n            if (rule instanceof tree.Declaration) {\n                if (!ruleCache[rule.name]) {\n                    ruleCache[rule.name] = rule;\n                } else {\n                    ruleList = ruleCache[rule.name];\n                    if (ruleList instanceof tree.Declaration) {\n                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                    }\n                    const ruleCSS = rule.toCSS(this._context);\n                    if (ruleList.indexOf(ruleCSS) !== -1) {\n                        rules.splice(i, 1);\n                    } else {\n                        ruleList.push(ruleCSS);\n                    }\n                }\n            }\n        }\n    },\n\n    _mergeRules: function(rules) {\n        if (!rules) {\n            return; \n        }\n\n        const groups    = {};\n        const groupsArr = [];\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n            if (rule.merge) {\n                const key = rule.name;\n                groups[key] ? rules.splice(i--, 1) : \n                    groupsArr.push(groups[key] = []);\n                groups[key].push(rule);\n            }\n        }\n\n        groupsArr.forEach(group => {\n            if (group.length > 0) {\n                const result = group[0];\n                let space  = [];\n                const comma  = [new tree.Expression(space)];\n                group.forEach(rule => {\n                    if ((rule.merge === '+') && (space.length > 0)) {\n                        comma.push(new tree.Expression(space = []));\n                    }\n                    space.push(rule.value);\n                    result.important = result.important || rule.important;\n                });\n                result.value = new tree.Value(comma);\n            }\n        });\n    }\n};\n\nexport default ToCSSVisitor;\n","import Visitor from './visitor';\nimport ImportVisitor from './import-visitor';\nimport MarkVisibleSelectorsVisitor from './set-tree-visibility-visitor';\nimport ExtendVisitor from './extend-visitor';\nimport JoinSelectorVisitor from './join-selector-visitor';\nimport ToCSSVisitor from './to-css-visitor';\n\nexport default {\n    Visitor,\n    ImportVisitor,\n    MarkVisibleSelectorsVisitor,\n    ExtendVisitor,\n    JoinSelectorVisitor,\n    ToCSSVisitor\n};\n","import chunker from './chunker';\n\nexport default () => {\n    let // Less input string\n        input;\n\n    let // current chunk\n        j;\n\n    const // holds state for backtracking\n        saveStack = [];\n\n    let // furthest index the parser has gone to\n        furthest;\n\n    let // if this is furthest we got to, this is the probably cause\n        furthestPossibleErrorMessage;\n\n    let // chunkified input\n        chunks;\n\n    let // current chunk\n        current;\n\n    let // index of current chunk, in `input`\n        currentPos;\n\n    const parserInput = {};\n    const CHARCODE_SPACE = 32;\n    const CHARCODE_TAB = 9;\n    const CHARCODE_LF = 10;\n    const CHARCODE_CR = 13;\n    const CHARCODE_PLUS = 43;\n    const CHARCODE_COMMA = 44;\n    const CHARCODE_FORWARD_SLASH = 47;\n    const CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n        const oldi = parserInput.i;\n        const oldj = j;\n        const curr = parserInput.i - currentPos;\n        const endIndex = parserInput.i + current.length - curr;\n        const mem = (parserInput.i += length);\n        const inp = input;\n        let c;\n        let nextChar;\n        let comment;\n\n        for (; parserInput.i < endIndex; parserInput.i++) {\n            c = inp.charCodeAt(parserInput.i);\n\n            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                nextChar = inp.charAt(parserInput.i + 1);\n                if (nextChar === '/') {\n                    comment = {index: parserInput.i, isLineComment: true};\n                    let nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n                    if (nextNewLine < 0) {\n                        nextNewLine = endIndex;\n                    }\n                    parserInput.i = nextNewLine;\n                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                    parserInput.commentStore.push(comment);\n                    continue;\n                } else if (nextChar === '*') {\n                    const nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n                    if (nextStarSlash >= 0) {\n                        comment = {\n                            index: parserInput.i,\n                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                            isLineComment: false\n                        };\n                        parserInput.i += comment.text.length - 1;\n                        parserInput.commentStore.push(comment);\n                        continue;\n                    }\n                }\n                break;\n            }\n\n            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                break;\n            }\n        }\n\n        current = current.slice(length + parserInput.i - mem + curr);\n        currentPos = parserInput.i;\n\n        if (!current.length) {\n            if (j < chunks.length - 1) {\n                current = chunks[++j];\n                skipWhitespace(0); // skip space at the beginning of a chunk\n                return true; // things changed\n            }\n            parserInput.finished = true;\n        }\n\n        return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = () => {\n        currentPos = parserInput.i;\n        saveStack.push( { current, i: parserInput.i, j });\n    };\n    parserInput.restore = possibleErrorMessage => {\n\n        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n            furthest = parserInput.i;\n            furthestPossibleErrorMessage = possibleErrorMessage;\n        }\n        const state = saveStack.pop();\n        current = state.current;\n        currentPos = parserInput.i = state.i;\n        j = state.j;\n    };\n    parserInput.forget = () => {\n        saveStack.pop();\n    };\n    parserInput.isWhitespace = offset => {\n        const pos = parserInput.i + (offset || 0);\n        const code = input.charCodeAt(pos);\n        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n    };\n\n    // Specialization of $(tok)\n    parserInput.$re = tok => {\n        if (parserInput.i > currentPos) {\n            current = current.slice(parserInput.i - currentPos);\n            currentPos = parserInput.i;\n        }\n\n        const m = tok.exec(current);\n        if (!m) {\n            return null;\n        }\n\n        skipWhitespace(m[0].length);\n        if (typeof m === 'string') {\n            return m;\n        }\n\n        return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = tok => {\n        if (input.charAt(parserInput.i) !== tok) {\n            return null;\n        }\n        skipWhitespace(1);\n        return tok;\n    };\n\n    parserInput.$str = tok => {\n        const tokLength = tok.length;\n\n        // https://jsperf.com/string-startswith/21\n        for (let i = 0; i < tokLength; i++) {\n            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                return null;\n            }\n        }\n\n        skipWhitespace(tokLength);\n        return tok;\n    };\n\n    parserInput.$quoted = loc => {\n        const pos = loc || parserInput.i;\n        const startChar = input.charAt(pos);\n\n        if (startChar !== '\\'' && startChar !== '\"') {\n            return;\n        }\n        const length = input.length;\n        const currentPosition = pos;\n\n        for (let i = 1; i + currentPosition < length; i++) {\n            const nextChar = input.charAt(i + currentPosition);\n            switch (nextChar) {\n                case '\\\\':\n                    i++;\n                    continue;\n                case '\\r':\n                case '\\n':\n                    break;\n                case startChar:\n                    const str = input.substr(currentPosition, i + 1);\n                    if (!loc && loc !== 0) {\n                        skipWhitespace(i + 1);\n                        return str\n                    }\n                    return [startChar, str];\n                default:\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Permissive parsing. Ignores everything except matching {} [] () and quotes\n     * until matching token (outside of blocks)\n     */\n    parserInput.$parseUntil = tok => {\n        let quote = '';\n        let returnVal = null;\n        let inComment = false;\n        let blockDepth = 0;\n        const blockStack = [];\n        const parseGroups = [];\n        const length = input.length;\n        const startPos = parserInput.i;\n        let lastPos = parserInput.i;\n        let i = parserInput.i;\n        let loop = true;\n        let testChar;\n\n        if (typeof tok === 'string') {\n            testChar = char => char === tok\n        } else {\n            testChar = char => tok.test(char)\n        }\n\n        do {\n            let prevChar;\n            let nextChar = input.charAt(i);\n            if (blockDepth === 0 && testChar(nextChar)) {\n                returnVal = input.substr(lastPos, i - lastPos);\n                if (returnVal) {\n                    parseGroups.push(returnVal);\n                }\n                else {\n                    parseGroups.push(' ');\n                }\n                returnVal = parseGroups;\n                skipWhitespace(i - startPos);\n                loop = false\n            } else {\n                if (inComment) {\n                    if (nextChar === '*' && \n                        input.charAt(i + 1) === '/') {\n                        i++;\n                        blockDepth--;\n                        inComment = false;\n                    }\n                    i++;\n                    continue;\n                }\n                switch (nextChar) {\n                    case '\\\\':\n                        i++;\n                        nextChar = input.charAt(i);\n                        parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n                        lastPos = i + 1;\n                        break;\n                    case '/':\n                        if (input.charAt(i + 1) === '*') {\n                            i++;\n                            inComment = true;\n                            blockDepth++;\n                        }\n                        break;\n                    case '\\'':\n                    case '\"':\n                        quote = parserInput.$quoted(i);\n                        if (quote) {\n                            parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                            i += quote[1].length - 1;\n                            lastPos = i + 1;\n                        }\n                        else {\n                            skipWhitespace(i - startPos);\n                            returnVal = nextChar;\n                            loop = false;\n                        }\n                        break;\n                    case '{':\n                        blockStack.push('}');\n                        blockDepth++;\n                        break;\n                    case '(':\n                        blockStack.push(')');\n                        blockDepth++;\n                        break;\n                    case '[':\n                        blockStack.push(']');\n                        blockDepth++;\n                        break;\n                    case '}':\n                    case ')':\n                    case ']':\n                        const expected = blockStack.pop();\n                        if (nextChar === expected) {\n                            blockDepth--;\n                        } else {\n                            // move the parser to the error and return expected\n                            skipWhitespace(i - startPos);\n                            returnVal = expected;\n                            loop = false;\n                        }\n                }\n                i++;\n                if (i > length) {\n                    loop = false;\n                }\n            }\n            prevChar = nextChar;\n        } while (loop);\n\n        return returnVal ? returnVal : null;\n    }\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false;\n\n    // Same as $(), but don't change the state of the parser,\n    // just return the match.\n    parserInput.peek = tok => {\n        if (typeof tok === 'string') {\n            // https://jsperf.com/string-startswith/21\n            for (let i = 0; i < tok.length; i++) {\n                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return tok.test(current);\n        }\n    };\n\n    // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n    parserInput.peekChar = tok => input.charAt(parserInput.i) === tok;\n\n    parserInput.currentChar = () => input.charAt(parserInput.i);\n\n    parserInput.prevChar = () => input.charAt(parserInput.i - 1);\n\n    parserInput.getInput = () => input;\n\n    parserInput.peekNotNumeric = () => {\n        const c = input.charCodeAt(parserInput.i);\n        // Is the first char of the dimension 0-9, '.', '+' or '-'\n        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = (str, chunkInput, failFunction) => {\n        input = str;\n        parserInput.i = j = currentPos = furthest = 0;\n\n        // chunking apparently makes things quicker (but my tests indicate\n        // it might actually make things slower in node at least)\n        // and it is a non-perfect parse - it can't recognise\n        // unquoted urls, meaning it can't distinguish comments\n        // meaning comments with quotes or {}() in them get 'counted'\n        // and then lead to parse errors.\n        // In addition if the chunking chunks in the wrong place we might\n        // not be able to parse a parser statement in one go\n        // this is officially deprecated but can be switched on via an option\n        // in the case it causes too much performance issues.\n        if (chunkInput) {\n            chunks = chunker(str, failFunction);\n        } else {\n            chunks = [str];\n        }\n\n        current = chunks[0];\n\n        skipWhitespace(0);\n    };\n\n    parserInput.end = () => {\n        let message;\n        const isFinished = parserInput.i >= input.length;\n\n        if (parserInput.i < furthest) {\n            message = furthestPossibleErrorMessage;\n            parserInput.i = furthest;\n        }\n        return {\n            isFinished,\n            furthest: parserInput.i,\n            furthestPossibleErrorMessage: message,\n            furthestReachedEnd: parserInput.i >= input.length - 1,\n            furthestChar: input[parserInput.i]\n        };\n    };\n\n    return parserInput;\n};\n","// Split the input into chunks.\nexport default (input, fail) => {\n    const len = input.length;\n    let level = 0;\n    let parenLevel = 0;\n    let lastOpening;\n    let lastOpeningParen;\n    let lastMultiComment;\n    let lastMultiCommentEndBrace;\n    const chunks = [];\n    let emitFrom = 0;\n    let chunkerCurrentIndex;\n    let currentChunkStartIndex;\n    let cc;\n    let cc2;\n    let matched;\n\n    function emitChunk(force) {\n        const len = chunkerCurrentIndex - emitFrom;\n        if (((len < 512) && !force) || !len) {\n            return;\n        }\n        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n        emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n        cc = input.charCodeAt(chunkerCurrentIndex);\n        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n            // a-z or whitespace\n            continue;\n        }\n\n        switch (cc) {\n            case 40:                        // (\n                parenLevel++;\n                lastOpeningParen = chunkerCurrentIndex;\n                continue;\n            case 41:                        // )\n                if (--parenLevel < 0) {\n                    return fail('missing opening `(`', chunkerCurrentIndex);\n                }\n                continue;\n            case 59:                        // ;\n                if (!parenLevel) { emitChunk(); }\n                continue;\n            case 123:                       // {\n                level++;\n                lastOpening = chunkerCurrentIndex;\n                continue;\n            case 125:                       // }\n                if (--level < 0) {\n                    return fail('missing opening `{`', chunkerCurrentIndex);\n                }\n                if (!level && !parenLevel) { emitChunk(); }\n                continue;\n            case 92:                        // \\\n                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\n            case 34:\n            case 39:\n            case 96:                        // \", ' and `\n                matched = 0;\n                currentChunkStartIndex = chunkerCurrentIndex;\n                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                    cc2 = input.charCodeAt(chunkerCurrentIndex);\n                    if (cc2 > 96) { continue; }\n                    if (cc2 == cc) { matched = 1; break; }\n                    if (cc2 == 92) {        // \\\n                        if (chunkerCurrentIndex == len - 1) {\n                            return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                        }\n                        chunkerCurrentIndex++;\n                    }\n                }\n                if (matched) { continue; }\n                return fail(`unmatched \\`${String.fromCharCode(cc)}\\``, currentChunkStartIndex);\n            case 47:                        // /, check for comment\n                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }\n                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                if (cc2 == 47) {\n                    // //, find lnfeed\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }\n                    }\n                } else if (cc2 == 42) {\n                    // /*, find */\n                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                        cc2 = input.charCodeAt(chunkerCurrentIndex);\n                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }\n                        if (cc2 != 42) { continue; }\n                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }\n                    }\n                    if (chunkerCurrentIndex == len - 1) {\n                        return fail('missing closing `*/`', currentChunkStartIndex);\n                    }\n                    chunkerCurrentIndex++;\n                }\n                continue;\n            case 42:                       // *, check for unmatched */\n                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                    return fail('unmatched `/*`', chunkerCurrentIndex);\n                }\n                continue;\n        }\n    }\n\n    if (level !== 0) {\n        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n            return fail('missing closing `}` or `*/`', lastOpening);\n        } else {\n            return fail('missing closing `}`', lastOpening);\n        }\n    } else if (parenLevel !== 0) {\n        return fail('missing closing `)`', lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n};\n","import LessError from '../less-error';\nimport tree from '../tree';\nimport visitors from '../visitors';\nimport getParserInput from './parser-input';\nimport * as utils from '../utils';\nimport functionRegistry from '../functions/function-registry';\n\n//\n// less.js - parser\n//\n//    A relatively straight-forward predictive parser.\n//    There is no tokenization/lexing stage, the input is parsed\n//    in one sweep.\n//\n//    To make the parser fast enough to run in the browser, several\n//    optimization had to be made:\n//\n//    - Matching and slicing on a huge input is often cause of slowdowns.\n//      The solution is to chunkify the input into smaller strings.\n//      The chunks are stored in the `chunks` var,\n//      `j` holds the current chunk index, and `currentPos` holds\n//      the index of the current chunk in relation to `input`.\n//      This gives us an almost 4x speed-up.\n//\n//    - In many cases, we don't need to match individual tokens;\n//      for example, if a value doesn't hold any variables, operations\n//      or dynamic references, the parser can effectively 'skip' it,\n//      treating it as a literal.\n//      An example would be '1px solid #000' - which evaluates to itself,\n//      we don't need to know what the individual components are.\n//      The drawback, of course is that you don't get the benefits of\n//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n//      and a smaller speed-up in the code-gen.\n//\n//\n//    Token matching is done with the `$` function, which either takes\n//    a terminal string or regexp, or a non-terminal function to call.\n//    It also takes care of moving all the indices forwards.\n//\n\nconst Parser = function Parser(context, imports, fileInfo) {\n    let parsers;\n    const parserInput = getParserInput();\n\n    function error(msg, type) {\n        throw new LessError(\n            {\n                index: parserInput.i,\n                filename: fileInfo.filename,\n                type: type || 'Syntax',\n                message: msg\n            },\n            imports\n        );\n    }\n\n    function expect(arg, msg) {\n        // some older browsers return typeof 'function' for RegExp\n        const result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n        if (result) {\n            return result;\n        }\n        \n        error(msg || (typeof arg === 'string'\n            ? `expected '${arg}' got '${parserInput.currentChar()}'`\n            : 'unexpected token'));\n    }\n\n    // Specialization of expect()\n    function expectChar(arg, msg) {\n        if (parserInput.$char(arg)) {\n            return arg;\n        }\n        error(msg || `expected '${arg}' got '${parserInput.currentChar()}'`);\n    }\n\n    function getDebugInfo(index) {\n        const filename = fileInfo.filename;\n\n        return {\n            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,\n            fileName: filename\n        };\n    }\n\n    /**\n     *  Used after initial parsing to create nodes on the fly\n     * \n     *  @param {String} str          - string to parse \n     *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n     *  @param {Number} currentIndex - start number to begin indexing\n     *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n     */\n    function parseNode(str, parseList, currentIndex, fileInfo, callback) {\n        let result;\n        const returnNodes = [];\n        const parser = parserInput;\n\n        try {\n            parser.start(str, false, function fail(msg, index) {\n                callback({\n                    message: msg,\n                    index: index + currentIndex\n                });\n            });\n            for (let x = 0, p, i; (p = parseList[x]); x++) {\n                i = parser.i;\n                result = parsers[p]();\n                if (result) {\n                    try {\n                        result._index = i + currentIndex;\n                        result._fileInfo = fileInfo;\n                    } catch (e) {}\n                    returnNodes.push(result);\n                }\n                else {\n                    returnNodes.push(null);\n                }\n            }\n\n            const endInfo = parser.end();\n            if (endInfo.isFinished) {\n                callback(null, returnNodes);\n            }\n            else {\n                callback(true, null);\n            }\n        } catch (e) {\n            throw new LessError({\n                index: e.index + currentIndex,\n                message: e.message\n            }, imports, fileInfo.filename);\n        }\n    }\n\n    //\n    // The Parser\n    //\n    return {\n        parserInput,\n        imports,\n        fileInfo,\n        parseNode,\n        //\n        // Parse an input string into an abstract syntax tree,\n        // @param str A string containing 'less' markup\n        // @param callback call `callback` when done.\n        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n        //\n        parse: function (str, callback, additionalData) {\n            let root;\n            let error = null;\n            let globalVars;\n            let modifyVars;\n            let ignored;\n            let preText = '';\n\n            globalVars = (additionalData && additionalData.globalVars) ? `${Parser.serializeVars(additionalData.globalVars)}\\n` : '';\n            modifyVars = (additionalData && additionalData.modifyVars) ? `\\n${Parser.serializeVars(additionalData.modifyVars)}` : '';\n\n            if (context.pluginManager) {\n                const preProcessors = context.pluginManager.getPreProcessors();\n                for (let i = 0; i < preProcessors.length; i++) {\n                    str = preProcessors[i].process(str, { context, imports, fileInfo });\n                }\n            }\n\n            if (globalVars || (additionalData && additionalData.banner)) {\n                preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\n                ignored = imports.contentsIgnoredChars;\n                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                ignored[fileInfo.filename] += preText.length;\n            }\n\n            str = str.replace(/\\r\\n?/g, '\\n');\n            // Remove potential UTF Byte Order Mark\n            str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n            imports.contents[fileInfo.filename] = str;\n\n            // Start with the primary rule.\n            // The whole syntax tree is held under a Ruleset node,\n            // with the `root` property set to true, so no `{}` are\n            // output. The callback is called when the input is parsed.\n            try {\n                parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                    throw new LessError({\n                        index,\n                        type: 'Parse',\n                        message: msg,\n                        filename: fileInfo.filename\n                    }, imports);\n                });\n\n                tree.Node.prototype.parse = this;\n                root = new tree.Ruleset(null, this.parsers.primary());\n                tree.Node.prototype.rootNode = root;\n                root.root = true;\n                root.firstRoot = true;\n                root.functionRegistry = functionRegistry.inherit();\n                \n            } catch (e) {\n                return callback(new LessError(e, imports, fileInfo.filename));\n            }\n\n            // If `i` is smaller than the `input.length - 1`,\n            // it means the parser wasn't able to parse the whole\n            // string, so we've got a parsing error.\n            //\n            // We try to extract a \\n delimited string,\n            // showing the line where the parse error occurred.\n            // We split it up into two parts (the part which parsed,\n            // and the part which didn't), so we can color them differently.\n            const endInfo = parserInput.end();\n            if (!endInfo.isFinished) {\n\n                let message = endInfo.furthestPossibleErrorMessage;\n\n                if (!message) {\n                    message = 'Unrecognised input';\n                    if (endInfo.furthestChar === '}') {\n                        message += '. Possibly missing opening \\'{\\'';\n                    } else if (endInfo.furthestChar === ')') {\n                        message += '. Possibly missing opening \\'(\\'';\n                    } else if (endInfo.furthestReachedEnd) {\n                        message += '. Possibly missing something';\n                    }\n                }\n\n                error = new LessError({\n                    type: 'Parse',\n                    message,\n                    index: endInfo.furthest,\n                    filename: fileInfo.filename\n                }, imports);\n            }\n\n            const finish = e => {\n                e = error || e || imports.error;\n\n                if (e) {\n                    if (!(e instanceof LessError)) {\n                        e = new LessError(e, imports, fileInfo.filename);\n                    }\n\n                    return callback(e);\n                }\n                else {\n                    return callback(null, root);\n                }\n            };\n\n            if (context.processImports !== false) {\n                new visitors.ImportVisitor(imports, finish)\n                    .run(root);\n            } else {\n                return finish();\n            }\n        },\n\n        //\n        // Here in, the parsing rules/functions\n        //\n        // The basic structure of the syntax tree generated is as follows:\n        //\n        //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n        //\n        // Here's some Less code:\n        //\n        //    .class {\n        //      color: #fff;\n        //      border: 1px solid #000;\n        //      width: @w + 4px;\n        //      > .child {...}\n        //    }\n        //\n        // And here's what the parse tree might look like:\n        //\n        //     Ruleset (Selector '.class', [\n        //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n        //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n        //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n        //         Ruleset (Selector [Element '>', '.child'], [...])\n        //     ])\n        //\n        //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n        //  first, before parsing, that's when we use `peek()`.\n        //\n        parsers: parsers = {\n            //\n            // The `primary` rule is the *entry* and *exit* point of the parser.\n            // The rules here can appear at any level of the parse tree.\n            //\n            // The recursive nature of the grammar is an interplay between the `block`\n            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n            // as represented by this simplified grammar:\n            //\n            //     primary  →  (ruleset | declaration)+\n            //     ruleset  →  selector+ block\n            //     block    →  '{' primary '}'\n            //\n            // Only at one point is the primary rule not called from the\n            // block rule: at the root level.\n            //\n            primary: function () {\n                const mixin = this.mixin;\n                let root = [];\n                let node;\n\n                while (true) {\n                    while (true) {\n                        node = this.comment();\n                        if (!node) { break; }\n                        root.push(node);\n                    }\n                    // always process comments before deciding if finished\n                    if (parserInput.finished) {\n                        break;\n                    }\n                    if (parserInput.peek('}')) {\n                        break;\n                    }\n\n                    node = this.extendRule();\n                    if (node) {\n                        root = root.concat(node);\n                        continue;\n                    }\n\n                    node = mixin.definition() || this.declaration() || mixin.call(false, false) || \n                        this.ruleset() || this.variableCall() || this.entities.call() || this.atrule();\n                    if (node) {\n                        root.push(node);\n                    } else {\n                        let foundSemiColon = false;\n                        while (parserInput.$char(';')) {\n                            foundSemiColon = true;\n                        }\n                        if (!foundSemiColon) {\n                            break;\n                        }\n                    }\n                }\n\n                return root;\n            },\n\n            // comments are collected by the main parsing mechanism and then assigned to nodes\n            // where the current structure allows it\n            comment: function () {\n                if (parserInput.commentStore.length) {\n                    const comment = parserInput.commentStore.shift();\n                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\n                }\n            },\n\n            //\n            // Entities are tokens which can be found inside an Expression\n            //\n            entities: {\n                mixinLookup: function() {\n                    return parsers.mixin.call(true, true);\n                },\n                //\n                // A string, which supports escaping \" and '\n                //\n                //     \"milky way\" 'he\\'s the one!'\n                //\n                quoted: function (forceEscaped) {\n                    let str;\n                    const index = parserInput.i;\n                    let isEscaped = false;\n\n                    parserInput.save();\n                    if (parserInput.$char('~')) {\n                        isEscaped = true;\n                    } else if (forceEscaped) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    str = parserInput.$quoted();\n                    if (!str) {\n                        parserInput.restore();\n                        return;\n                    }\n                    parserInput.forget();\n\n                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n                },\n\n                //\n                // A catch-all word, such as:\n                //\n                //     black border-collapse\n                //\n                keyword: function () {\n                    const k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n                    if (k) {\n                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);\n                    }\n                },\n\n                //\n                // A function call\n                //\n                //     rgb(255, 0, 255)\n                //\n                // The arguments are parsed with the `entities.arguments` parser.\n                //\n                call: function () {\n                    let name;\n                    let args;\n                    let func;\n                    const index = parserInput.i;\n\n                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                    if (parserInput.peek(/^url\\(/i)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n                    if (!name) {\n                        parserInput.forget(); \n                        return;\n                    }\n\n                    name = name[1];\n                    func = this.customFuncCall(name);\n                    if (func) {\n                        args = func.parse();\n                        if (args && func.stop) {\n                            parserInput.forget();\n                            return args;\n                        }\n                    }\n\n                    args = this.arguments(args);\n\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                        return;\n                    }\n\n                    parserInput.forget();\n\n                    return new(tree.Call)(name, args, index, fileInfo);\n                },\n                \n                //\n                // Parsing rules for functions with non-standard args, e.g.:\n                //\n                //     boolean(not(2 > 1))\n                //\n                //     This is a quick prototype, to be modified/improved when\n                //     more custom-parsed funcs come (e.g. `selector(...)`)\n                //\n\n                customFuncCall: function (name) {\n                    /* Ideally the table is to be moved out of here for faster perf.,\n                       but it's quite tricky since it relies on all these `parsers`\n                       and `expect` available only here */\n                    return {\n                        alpha:   f(parsers.ieAlpha, true),\n                        boolean: f(condition),\n                        'if':    f(condition)\n                    }[name.toLowerCase()];\n\n                    function f(parse, stop) {\n                        return {\n                            parse, // parsing function\n                            stop   // when true - stop after parse() and return its result, \n                            // otherwise continue for plain args\n                        };\n                    }\n                \n                    function condition() {\n                        return [expect(parsers.condition, 'expected condition')];\n                    }\n                },\n\n                arguments: function (prevArgs) {\n                    let argsComma = prevArgs || [];\n                    const argsSemiColon = [];\n                    let isSemiColonSeparated;\n                    let value;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (prevArgs) {\n                            prevArgs = false;\n                        } else {\n                            value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n                            if (!value) {\n                                break;\n                            }\n\n                            if (value.value && value.value.length == 1) {\n                                value = value.value[0];\n                            }\n\n                            argsComma.push(value);\n                        }\n\n                        if (parserInput.$char(',')) {\n                            continue;\n                        }\n\n                        if (parserInput.$char(';') || isSemiColonSeparated) {\n                            isSemiColonSeparated = true;\n                            value = (argsComma.length < 1) ? argsComma[0]\n                                : new tree.Value(argsComma);\n                            argsSemiColon.push(value);\n                            argsComma = [];\n                        }\n                    }\n\n                    parserInput.forget();\n                    return isSemiColonSeparated ? argsSemiColon : argsComma;\n                },\n                literal: function () {\n                    return this.dimension() ||\n                           this.color() ||\n                           this.quoted() ||\n                           this.unicodeDescriptor();\n                },\n\n                // Assignments are argument entities for calls.\n                // They are present in ie filter properties as shown below.\n                //\n                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                //\n\n                assignment: function () {\n                    let key;\n                    let value;\n                    parserInput.save();\n                    key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                    if (!key) {\n                        parserInput.restore();\n                        return;\n                    }\n                    if (!parserInput.$char('=')) {\n                        parserInput.restore();\n                        return;\n                    }\n                    value = parsers.entity();\n                    if (value) {\n                        parserInput.forget();\n                        return new(tree.Assignment)(key, value);\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n\n                //\n                // Parse url() tokens\n                //\n                // We use a specific rule for urls, because they don't really behave like\n                // standard function calls. The difference is that the argument doesn't have\n                // to be enclosed within a string, so it can't be parsed as an Expression.\n                //\n                url: function () {\n                    let value;\n                    const index = parserInput.i;\n\n                    parserInput.autoCommentAbsorb = false;\n\n                    if (!parserInput.$str('url(')) {\n                        parserInput.autoCommentAbsorb = true;\n                        return;\n                    }\n\n                    value = this.quoted() || this.variable() || this.property() ||\n                            parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\n\n                    parserInput.autoCommentAbsorb = true;\n\n                    expectChar(')');\n\n                    return new(tree.URL)((value.value != null || \n                        value instanceof tree.Variable || \n                        value instanceof tree.Property) ?\n                        value : new(tree.Anonymous)(value, index), index, fileInfo);\n                },\n\n                //\n                // A Variable entity, such as `@fink`, in\n                //\n                //     width: @fink + 2px\n                //\n                // We use a different parser for variable definitions,\n                // see `parsers.variable`.\n                //\n                variable: function () {\n                    let ch;\n                    let name;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                        ch = parserInput.currentChar();\n                        if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                            // this may be a VariableCall lookup\n                            const result = parsers.variableCall(name);\n                            if (result) {\n                                parserInput.forget();\n                                return result;\n                            }\n                        }\n                        parserInput.forget();\n                        return new(tree.Variable)(name, index, fileInfo);\n                    }\n                    parserInput.restore();\n                },\n\n                // A variable entity using the protective {} e.g. @{var}\n                variableCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                        return new(tree.Variable)(`@${curly[1]}`, index, fileInfo);\n                    }\n                },\n                //\n                // A Property accessor, such as `$color`, in\n                //\n                //     background-color: $color\n                //\n                property: function () {\n                    let name;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n                        return new(tree.Property)(name, index, fileInfo);\n                    }\n                },\n\n                // A property entity useing the protective {} e.g. ${prop}\n                propertyCurly: function () {\n                    let curly;\n                    const index = parserInput.i;\n\n                    if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n                        return new(tree.Property)(`$${curly[1]}`, index, fileInfo);\n                    }\n                },\n                //\n                // A Hexadecimal color\n                //\n                //     #4F3C2F\n                //\n                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                //\n                color: function () {\n                    let rgb;\n                    parserInput.save();\n\n                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\n                        if (!rgb[2]) {\n                            parserInput.forget();\n                            return new(tree.Color)(rgb[1], undefined, rgb[0]);\n                        } \n                    }\n                    parserInput.restore();\n                },\n\n                colorKeyword: function () {\n                    parserInput.save();\n                    const autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                    parserInput.autoCommentAbsorb = false;\n                    const k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                    parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                    if (!k) {\n                        parserInput.forget();\n                        return;\n                    }\n                    parserInput.restore();\n                    const color = tree.Color.fromKeyword(k);\n                    if (color) {\n                        parserInput.$str(k);\n                        return color;\n                    }\n                },\n\n                //\n                // A Dimension, that is, a number and a unit\n                //\n                //     0.5em 95%\n                //\n                dimension: function () {\n                    if (parserInput.peekNotNumeric()) {\n                        return;\n                    }\n\n                    const value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                    if (value) {\n                        return new(tree.Dimension)(value[1], value[2]);\n                    }\n                },\n\n                //\n                // A unicode descriptor, as is used in unicode-range\n                //\n                // U+0??  or U+00A1-00A9\n                //\n                unicodeDescriptor: function () {\n                    let ud;\n\n                    ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n                    if (ud) {\n                        return new(tree.UnicodeDescriptor)(ud[0]);\n                    }\n                },\n\n                //\n                // JavaScript code to be evaluated\n                //\n                //     `window.location.href`\n                //\n                javascript: function () {\n                    let js;\n                    const index = parserInput.i;\n\n                    parserInput.save();\n\n                    const escape = parserInput.$char('~');\n                    const jsQuote = parserInput.$char('`');\n\n                    if (!jsQuote) {\n                        parserInput.restore();\n                        return;\n                    }\n\n                    js = parserInput.$re(/^[^`]*`/);\n                    if (js) {\n                        parserInput.forget();\n                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n                    }\n                    parserInput.restore('invalid javascript definition');\n                }\n            },\n\n            //\n            // The variable part of a variable definition. Used in the `rule` parser\n            //\n            //     @fink:\n            //\n            variable: function () {\n                let name;\n\n                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) { return name[1]; }\n            },\n\n            //\n            // Call a variable value to retrieve a detached ruleset\n            // or a value from a detached ruleset's rules.\n            //\n            //     @fink();\n            //     @fink;\n            //     color: @fink[@color];\n            //\n            variableCall: function (parsedName) {\n                let lookups;\n                const i = parserInput.i;\n                const inValue = !!parsedName;\n                let name = parsedName;\n\n                parserInput.save();\n\n                if (name || (parserInput.currentChar() === '@'\n                    && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\n\n                    lookups = this.mixin.ruleLookups();\n\n                    if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\n                        parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n                        return;\n                    }\n\n                    if (!inValue) {\n                        name = name[1];\n                    }\n\n                    const call = new tree.VariableCall(name, i, fileInfo);\n                    if (!inValue && parsers.end()) {\n                        parserInput.forget();\n                        return call;\n                    }\n                    else {\n                        parserInput.forget();\n                        return new tree.NamespaceValue(call, lookups, i, fileInfo);\n                    }\n                }\n\n                parserInput.restore();\n            },\n\n            //\n            // extend syntax - used to extend selectors\n            //\n            extend: function(isRule) {\n                let elements;\n                let e;\n                const index = parserInput.i;\n                let option;\n                let extendList;\n                let extend;\n\n                if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n                    return;\n                }\n\n                do {\n                    option = null;\n                    elements = null;\n                    while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                        e = this.element();\n                        if (!e) {\n                            break;\n                        }\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                    }\n\n                    option = option && option[1];\n                    if (!elements) {\n                        error('Missing target selector for :extend().');\n                    }\n                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index, fileInfo);\n                    if (extendList) {\n                        extendList.push(extend);\n                    } else {\n                        extendList = [ extend ];\n                    }\n                } while (parserInput.$char(','));\n\n                expect(/^\\)/);\n\n                if (isRule) {\n                    expect(/^;/);\n                }\n\n                return extendList;\n            },\n\n            //\n            // extendRule - used in a rule to extend all the parent selectors\n            //\n            extendRule: function() {\n                return this.extend(true);\n            },\n\n            //\n            // Mixins\n            //\n            mixin: {\n                //\n                // A Mixin call, with an optional argument list\n                //\n                //     #mixins > .square(#fff);\n                //     #mixins.square(#fff);\n                //     .rounded(4px, black);\n                //     .button;\n                //\n                // We can lookup / return a value using the lookup syntax:\n                //\n                //     color: #mixin.square(#fff)[@color];\n                //\n                // The `while` loop is there because mixins can be\n                // namespaced, but we only support the child and descendant\n                // selector for now.\n                //\n                call: function (inValue, getLookup) {\n                    const s = parserInput.currentChar();\n                    let important = false;\n                    let lookups;\n                    const index = parserInput.i;\n                    let elements;\n                    let args;\n                    let hasParens;\n\n                    if (s !== '.' && s !== '#') { return; }\n\n                    parserInput.save(); // stop us absorbing part of an invalid selector\n\n                    elements = this.elements();\n\n                    if (elements) {\n                        if (parserInput.$char('(')) {\n                            args = this.args(true).args;\n                            expectChar(')');\n                            hasParens = true;\n                        }\n\n                        if (getLookup !== false) {\n                            lookups = this.ruleLookups();\n                        }\n                        if (getLookup === true && !lookups) {\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (inValue && !lookups && !hasParens) {\n                            // This isn't a valid in-value mixin call\n                            parserInput.restore();\n                            return;\n                        }\n\n                        if (!inValue && parsers.important()) {\n                            important = true;\n                        }\n\n                        if (inValue || parsers.end()) {\n                            parserInput.forget();\n                            const mixin = new(tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\n                            if (lookups) {\n                                return new tree.NamespaceValue(mixin, lookups);\n                            }\n                            else {\n                                return mixin;\n                            }\n                        }\n                    }\n\n                    parserInput.restore();\n                },\n                /**\n                 * Matching elements for mixins\n                 * (Start with . or # and can have > )\n                 */\n                elements: function() {\n                    let elements;\n                    let e;\n                    let c;\n                    let elem;\n                    let elemIndex;\n                    const re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n                    while (true) {\n                        elemIndex = parserInput.i;\n                        e = parserInput.$re(re);\n                        \n                        if (!e) {\n                            break;\n                        }\n                        elem = new(tree.Element)(c, e, false, elemIndex, fileInfo);\n                        if (elements) {\n                            elements.push(elem);\n                        } else {\n                            elements = [ elem ];\n                        }\n                        c = parserInput.$char('>');\n                    }\n                    return elements;\n                },\n                args: function (isCall) {\n                    const entities = parsers.entities;\n                    const returner = { args:null, variadic: false };\n                    let expressions = [];\n                    const argsSemiColon = [];\n                    const argsComma = [];\n                    let isSemiColonSeparated;\n                    let expressionContainsNamed;\n                    let name;\n                    let nameLoop;\n                    let value;\n                    let arg;\n                    let expand;\n                    let hasSep = true;\n\n                    parserInput.save();\n\n                    while (true) {\n                        if (isCall) {\n                            arg = parsers.detachedRuleset() || parsers.expression();\n                        } else {\n                            parserInput.commentStore.length = 0;\n                            if (parserInput.$str('...')) {\n                                returner.variadic = true;\n                                if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                    isSemiColonSeparated = true;\n                                }\n                                (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                    .push({ variadic: true });\n                                break;\n                            }\n                            arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n                        }\n\n                        if (!arg || !hasSep) {\n                            break;\n                        }\n\n                        nameLoop = null;\n                        if (arg.throwAwayComments) {\n                            arg.throwAwayComments();\n                        }\n                        value = arg;\n                        let val = null;\n\n                        if (isCall) {\n                            // Variable\n                            if (arg.value && arg.value.length == 1) {\n                                val = arg.value[0];\n                            }\n                        } else {\n                            val = arg;\n                        }\n\n                        if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                            if (parserInput.$char(':')) {\n                                if (expressions.length > 0) {\n                                    if (isSemiColonSeparated) {\n                                        error('Cannot mix ; and , as delimiter types');\n                                    }\n                                    expressionContainsNamed = true;\n                                }\n\n                                value = parsers.detachedRuleset() || parsers.expression();\n\n                                if (!value) {\n                                    if (isCall) {\n                                        error('could not understand value for named argument');\n                                    } else {\n                                        parserInput.restore();\n                                        returner.args = [];\n                                        return returner;\n                                    }\n                                }\n                                nameLoop = (name = val.name);\n                            } else if (parserInput.$str('...')) {\n                                if (!isCall) {\n                                    returner.variadic = true;\n                                    if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                        isSemiColonSeparated = true;\n                                    }\n                                    (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                        .push({ name: arg.name, variadic: true });\n                                    break;\n                                } else {\n                                    expand = true;\n                                }\n                            } else if (!isCall) {\n                                name = nameLoop = val.name;\n                                value = null;\n                            }\n                        }\n\n                        if (value) {\n                            expressions.push(value);\n                        }\n\n                        argsComma.push({ name:nameLoop, value, expand });\n\n                        if (parserInput.$char(',')) {\n                            hasSep = true;\n                            continue;\n                        }\n                        hasSep = parserInput.$char(';') === ';';\n\n                        if (hasSep || isSemiColonSeparated) {\n\n                            if (expressionContainsNamed) {\n                                error('Cannot mix ; and , as delimiter types');\n                            }\n\n                            isSemiColonSeparated = true;\n\n                            if (expressions.length > 1) {\n                                value = new(tree.Value)(expressions);\n                            }\n                            argsSemiColon.push({ name, value, expand });\n\n                            name = null;\n                            expressions = [];\n                            expressionContainsNamed = false;\n                        }\n                    }\n\n                    parserInput.forget();\n                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                    return returner;\n                },\n                //\n                // A Mixin definition, with a list of parameters\n                //\n                //     .rounded (@radius: 2px, @color) {\n                //        ...\n                //     }\n                //\n                // Until we have a finer grained state-machine, we have to\n                // do a look-ahead, to make sure we don't have a mixin call.\n                // See the `rule` function for more information.\n                //\n                // We start by matching `.rounded (`, and then proceed on to\n                // the argument list, which has optional default values.\n                // We store the parameters in `params`, with a `value` key,\n                // if there is a value, such as in the case of `@radius`.\n                //\n                // Once we've got our params list, and a closing `)`, we parse\n                // the `{...}` block.\n                //\n                definition: function () {\n                    let name;\n                    let params = [];\n                    let match;\n                    let ruleset;\n                    let cond;\n                    let variadic = false;\n                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                        parserInput.peek(/^[^{]*\\}/)) {\n                        return;\n                    }\n\n                    parserInput.save();\n\n                    match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                    if (match) {\n                        name = match[1];\n\n                        const argInfo = this.args(false);\n                        params = argInfo.args;\n                        variadic = argInfo.variadic;\n\n                        // .mixincall(\"@{a}\");\n                        // looks a bit like a mixin definition..\n                        // also\n                        // .mixincall(@a: {rule: set;});\n                        // so we have to be nice and restore\n                        if (!parserInput.$char(')')) {\n                            parserInput.restore('Missing closing \\')\\'');\n                            return;\n                        }\n\n                        parserInput.commentStore.length = 0;\n\n                        if (parserInput.$str('when')) { // Guard\n                            cond = expect(parsers.conditions, 'expected condition');\n                        }\n\n                        ruleset = parsers.block();\n\n                        if (ruleset) {\n                            parserInput.forget();\n                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic);\n                        } else {\n                            parserInput.restore();\n                        }\n                    } else {\n                        parserInput.restore();\n                    }\n                },\n            \n                ruleLookups: function() {\n                    let rule;\n                    let args;\n                    const lookups = [];\n\n                    if (parserInput.currentChar() !== '[') { \n                        return;\n                    }\n\n                    while (true) {\n                        parserInput.save();\n                        args = null;\n                        rule = this.lookupValue();\n                        if (!rule && rule !== '') {\n                            parserInput.restore();\n                            break;\n                        }\n                        lookups.push(rule);\n                        parserInput.forget();\n                    }\n                    if (lookups.length > 0) {\n                        return lookups;\n                    }\n                },\n    \n                lookupValue: function() {\n                    parserInput.save();\n    \n                    if (!parserInput.$char('[')) { \n                        parserInput.restore();\n                        return;\n                    }\n    \n                    const name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n    \n                    if (!parserInput.$char(']')) {\n                        parserInput.restore();\n                        return;\n                    } \n\n                    if (name || name === '') {\n                        parserInput.forget();\n                        return name;\n                    }\n    \n                    parserInput.restore();\n                }\n            },\n            //\n            // Entities are the smallest recognized token,\n            // and can be found inside a rule's value.\n            //\n            entity: function () {\n                const entities = this.entities;\n\n                return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                    entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\n                    entities.javascript();\n            },\n\n            //\n            // A Declaration terminator. Note that we use `peek()` to check for '}',\n            // because the `block` rule will be expecting it, but we still need to make sure\n            // it's there, if ';' was omitted.\n            //\n            end: function () {\n                return parserInput.$char(';') || parserInput.peek('}');\n            },\n\n            //\n            // IE's alpha function\n            //\n            //     alpha(opacity=88)\n            //\n            ieAlpha: function () {\n                let value;\n\n                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                if (!parserInput.$re(/^opacity=/i)) { return; }\n                value = parserInput.$re(/^\\d+/);\n                if (!value) {\n                    value = expect(parsers.entities.variable, 'Could not parse alpha');\n                    value = `@{${value.name.slice(1)}}`;\n                }\n                expectChar(')');\n                return new tree.Quoted('', `alpha(opacity=${value})`);\n            },\n\n            //\n            // A Selector Element\n            //\n            //     div\n            //     + h1\n            //     #socks\n            //     input[type=\"text\"]\n            //\n            // Elements are the building blocks for Selectors,\n            // they are made out of a `Combinator` (see combinator rule),\n            // and an element name, such as a tag a class, or `*`.\n            //\n            element: function () {\n                let e;\n                let c;\n                let v;\n                const index = parserInput.i;\n\n                c = this.combinator();\n\n                e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                    parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                    parserInput.$re(/^\\([^&()@]+\\)/) ||  parserInput.$re(/^[\\.#:](?=@)/) ||\n                    this.entities.variableCurly();\n\n                if (!e) {\n                    parserInput.save();\n                    if (parserInput.$char('(')) {\n                        if ((v = this.selector(false)) && parserInput.$char(')')) {\n                            e = new(tree.Paren)(v);\n                            parserInput.forget();\n                        } else {\n                            parserInput.restore('Missing closing \\')\\'');\n                        }\n                    } else {\n                        parserInput.forget();\n                    }\n                }\n\n                if (e) { return new(tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo); }\n            },\n\n            //\n            // Combinators combine elements together, in a Selector.\n            //\n            // Because our parser isn't white-space sensitive, special care\n            // has to be taken, when parsing the descendant combinator, ` `,\n            // as it's an empty space. We have to check the previous character\n            // in the input, to see if it's a ` ` character. More info on how\n            // we deal with this in *combinator.js*.\n            //\n            combinator: function () {\n                let c = parserInput.currentChar();\n\n                if (c === '/') {\n                    parserInput.save();\n                    const slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                    if (slashedCombinator) {\n                        parserInput.forget();\n                        return new(tree.Combinator)(slashedCombinator);\n                    }\n                    parserInput.restore();\n                }\n\n                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                    parserInput.i++;\n                    if (c === '^' && parserInput.currentChar() === '^') {\n                        c = '^^';\n                        parserInput.i++;\n                    }\n                    while (parserInput.isWhitespace()) { parserInput.i++; }\n                    return new(tree.Combinator)(c);\n                } else if (parserInput.isWhitespace(-1)) {\n                    return new(tree.Combinator)(' ');\n                } else {\n                    return new(tree.Combinator)(null);\n                }\n            },\n            //\n            // A CSS Selector\n            // with less extensions e.g. the ability to extend and guard\n            //\n            //     .class > div + h1\n            //     li a:hover\n            //\n            // Selectors are made out of one or more Elements, see above.\n            //\n            selector: function (isLess) {\n                const index = parserInput.i;\n                let elements;\n                let extendList;\n                let c;\n                let e;\n                let allExtends;\n                let when;\n                let condition;\n                isLess = isLess !== false;\n                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\n                    if (when) {\n                        condition = expect(this.conditions, 'expected condition');\n                    } else if (condition) {\n                        error('CSS guard can only be used at the end of selector');\n                    } else if (extendList) {\n                        if (allExtends) {\n                            allExtends = allExtends.concat(extendList);\n                        } else {\n                            allExtends = extendList;\n                        }\n                    } else {\n                        if (allExtends) { error('Extend can only be used at the end of selector'); }\n                        c = parserInput.currentChar();\n                        if (elements) {\n                            elements.push(e);\n                        } else {\n                            elements = [ e ];\n                        }\n                        e = null;\n                    }\n                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                        break;\n                    }\n                }\n\n                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index, fileInfo); }\n                if (allExtends) { error('Extend must be used to extend a selector, it cannot be used on its own'); }\n            },\n            selectors: function () {\n                let s;\n                let selectors;\n                while (true) {\n                    s = this.selector();\n                    if (!s) {\n                        break;\n                    }\n                    if (selectors) {\n                        selectors.push(s);\n                    } else {\n                        selectors = [ s ];\n                    }\n                    parserInput.commentStore.length = 0;\n                    if (s.condition && selectors.length > 1) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    if (!parserInput.$char(',')) { break; }\n                    if (s.condition) {\n                        error(\"Guards are only currently allowed on a single selector.\");\n                    }\n                    parserInput.commentStore.length = 0;\n                }\n                return selectors;\n            },\n            attribute: function () {\n                if (!parserInput.$char('[')) { return; }\n\n                const entities = this.entities;\n                let key;\n                let val;\n                let op;\n\n                if (!(key = entities.variableCurly())) {\n                    key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                }\n\n                op = parserInput.$re(/^[|~*$^]?=/);\n                if (op) {\n                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                }\n\n                expectChar(']');\n\n                return new(tree.Attribute)(key, op, val);\n            },\n\n            //\n            // The `block` rule is used by `ruleset` and `mixin.definition`.\n            // It's a wrapper around the `primary` rule, with added `{}`.\n            //\n            block: function () {\n                let content;\n                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                    return content;\n                }\n            },\n\n            blockRuleset: function() {\n                let block = this.block();\n\n                if (block) {\n                    block = new tree.Ruleset(null, block);\n                }\n                return block;\n            },\n\n            detachedRuleset: function() {\n                let argInfo;\n                let params;\n                let variadic;\n\n                parserInput.save();\n                if (parserInput.$re(/^[.#]\\(/)) {\n                    /**\n                     * DR args currently only implemented for each() function, and not \n                     * yet settable as `@dr: #(@arg) {}`\n                     * This should be done when DRs are merged with mixins.\n                     * See: https://github.com/less/less-meta/issues/16\n                     */\n                    argInfo = this.mixin.args(false);\n                    params = argInfo.args;\n                    variadic = argInfo.variadic;\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return;\n                    }\n                }\n                const blockRuleset = this.blockRuleset();\n                if (blockRuleset) {\n                    parserInput.forget();\n                    if (params) {\n                        return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\n                    }\n                    return new tree.DetachedRuleset(blockRuleset);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // div, .class, body > p {...}\n            //\n            ruleset: function () {\n                let selectors;\n                let rules;\n                let debugInfo;\n\n                parserInput.save();\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(parserInput.i);\n                }\n\n                selectors = this.selectors();\n\n                if (selectors && (rules = this.block())) {\n                    parserInput.forget();\n                    const ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);\n                    if (context.dumpLineNumbers) {\n                        ruleset.debugInfo = debugInfo;\n                    }\n                    return ruleset;\n                } else {\n                    parserInput.restore();\n                }\n            },\n            declaration: function () {\n                let name;\n                let value;\n                const index = parserInput.i;\n                let hasDR;\n                const c = parserInput.currentChar();\n                let important;\n                let merge;\n                let isVariable;\n\n                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }\n\n                parserInput.save();\n\n                name = this.variable() || this.ruleProperty();\n                if (name) {\n                    isVariable = typeof name === 'string';\n\n                    if (isVariable) {\n                        value = this.detachedRuleset();\n                        if (value) {\n                            hasDR = true;\n                        }\n                    }\n\n                    parserInput.commentStore.length = 0;\n                    if (!value) {\n                        // a name returned by this.ruleProperty() is always an array of the form:\n                        // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                        // where each item is a tree.Keyword or tree.Variable\n                        merge = !isVariable && name.length > 1 && name.pop().value;\n\n                        // Custom property values get permissive parsing\n                        if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                            value = this.permissiveValue();\n                        }\n                        // Try to store values as anonymous\n                        // If we need the value later we'll re-parse it in ruleset.parseValue\n                        else {\n                            value = this.anonymousValue();\n                        }\n                        if (value) {\n                            parserInput.forget();\n                            // anonymous values absorb the end ';' which is required for them to work\n                            return new(tree.Declaration)(name, value, false, merge, index, fileInfo);\n                        }\n\n                        if (!value) {\n                            value = this.value();\n                        }\n\n                        if (value) {\n                            important = this.important();\n                        } else if (isVariable) {\n                            // As a last resort, try permissiveValue\n                            value = this.permissiveValue();\n                        }\n                    }\n\n                    if (value && (this.end() || hasDR)) {\n                        parserInput.forget();\n                        return new(tree.Declaration)(name, value, important, merge, index, fileInfo);\n                    }\n                    else {\n                        parserInput.restore();\n                    }\n                } else {\n                    parserInput.restore();\n                }\n            },\n            anonymousValue: function () {\n                const index = parserInput.i;\n                const match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\n                if (match) {\n                    return new(tree.Anonymous)(match[1], index);\n                }\n            },\n            /**\n             * Used for custom properties, at-rules, and variables (as fallback)\n             * Parses almost anything inside of {} [] () \"\" blocks\n             * until it reaches outer-most tokens.\n             * \n             * First, it will try to parse comments and entities to reach\n             * the end. This is mostly like the Expression parser except no\n             * math is allowed.\n             */\n            permissiveValue: function (untilTokens) {\n                let i;\n                let e;\n                let done;\n                let value;\n                const tok = untilTokens || ';';\n                const index = parserInput.i;\n                const result = [];\n\n                function testCurrentChar() {\n                    const char = parserInput.currentChar();\n                    if (typeof tok === 'string') {\n                        return char === tok;\n                    } else {\n                        return tok.test(char);\n                    }\n                }\n                if (testCurrentChar()) {\n                    return;\n                }\n                value = [];\n                do {\n                    e = this.comment();\n                    if (e) {\n                        value.push(e);\n                        continue;\n                    }\n                    e = this.entity();\n                    if (e) {\n                        value.push(e);\n                    }\n                } while (e);\n\n                done = testCurrentChar();\n\n                if (value.length > 0) {\n                    value = new(tree.Expression)(value);\n                    if (done) {\n                        return value;\n                    }\n                    else {\n                        result.push(value);\n                    }\n                    // Preserve space before $parseUntil as it will not\n                    if (parserInput.prevChar() === ' ') {\n                        result.push(new tree.Anonymous(' ', index));\n                    }\n                }\n                parserInput.save();\n\n                value = parserInput.$parseUntil(tok);\n\n                if (value) {\n                    if (typeof value === 'string') {\n                        error(`Expected '${value}'`, 'Parse');\n                    }\n                    if (value.length === 1 && value[0] === ' ') {\n                        parserInput.forget();\n                        return new tree.Anonymous('', index);\n                    }\n                    let item;\n                    for (i = 0; i < value.length; i++) {\n                        item = value[i];\n                        if (Array.isArray(item)) {\n                            // Treat actual quotes as normal quoted values\n                            result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n                        }\n                        else {\n                            if (i === value.length - 1) {\n                                item = item.trim();\n                            }\n                            // Treat like quoted values, but replace vars like unquoted expressions\n                            const quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                            quote.variableRegex = /@([\\w-]+)/g;\n                            quote.propRegex = /\\$([\\w-]+)/g;\n                            result.push(quote);\n                        }\n                    }\n                    parserInput.forget();\n                    return new tree.Expression(result, true);\n                }\n                parserInput.restore();\n            },\n\n            //\n            // An @import atrule\n            //\n            //     @import \"lib\";\n            //\n            // Depending on our environment, importing is done differently:\n            // In the browser, it's an XHR request, in Node, it would be a\n            // file-system operation. The function used for importing is\n            // stored in `import`, which we pass to the Import constructor.\n            //\n            'import': function () {\n                let path;\n                let features;\n                const index = parserInput.i;\n\n                const dir = parserInput.$re(/^@import?\\s+/);\n\n                if (dir) {\n                    const options = (dir ? this.importOptions() : null) || {};\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n                        features = this.mediaFeatures();\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon or unrecognised media features on import');\n                        }\n                        features = features && new(tree.Value)(features);\n                        return new(tree.Import)(path, features, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed import statement');\n                    }\n                }\n            },\n\n            importOptions: function() {\n                let o;\n                const options = {};\n                let optionName;\n                let value;\n\n                // list of options, surrounded by parens\n                if (!parserInput.$char('(')) { return null; }\n                do {\n                    o = this.importOption();\n                    if (o) {\n                        optionName = o;\n                        value = true;\n                        switch (optionName) {\n                            case 'css':\n                                optionName = 'less';\n                                value = false;\n                                break;\n                            case 'once':\n                                optionName = 'multiple';\n                                value = false;\n                                break;\n                        }\n                        options[optionName] = value;\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (o);\n                expectChar(')');\n                return options;\n            },\n\n            importOption: function() {\n                const opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                if (opt) {\n                    return opt[1];\n                }\n            },\n\n            mediaFeature: function () {\n                const entities = this.entities;\n                const nodes = [];\n                let e;\n                let p;\n                parserInput.save();\n                do {\n                    e = entities.keyword() || entities.variable() || entities.mixinLookup();\n                    if (e) {\n                        nodes.push(e);\n                    } else if (parserInput.$char('(')) {\n                        p = this.property();\n                        e = this.value();\n                        if (parserInput.$char(')')) {\n                            if (p && e) {\n                                nodes.push(new(tree.Paren)(new(tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\n                            } else if (e) {\n                                nodes.push(new(tree.Paren)(e));\n                            } else {\n                                error('badly formed media feature definition');\n                            }\n                        } else {\n                            error('Missing closing \\')\\'', 'Parse');\n                        }\n                    }\n                } while (e);\n\n                parserInput.forget();\n                if (nodes.length > 0) {\n                    return new(tree.Expression)(nodes);\n                }\n            },\n\n            mediaFeatures: function () {\n                const entities = this.entities;\n                const features = [];\n                let e;\n                do {\n                    e = this.mediaFeature();\n                    if (e) {\n                        features.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    } else {\n                        e = entities.variable() || entities.mixinLookup();\n                        if (e) {\n                            features.push(e);\n                            if (!parserInput.$char(',')) { break; }\n                        }\n                    }\n                } while (e);\n\n                return features.length > 0 ? features : null;\n            },\n\n            media: function () {\n                let features;\n                let rules;\n                let media;\n                let debugInfo;\n                const index = parserInput.i;\n\n                if (context.dumpLineNumbers) {\n                    debugInfo = getDebugInfo(index);\n                }\n\n                parserInput.save();\n\n                if (parserInput.$str('@media')) {\n                    features = this.mediaFeatures();\n\n                    rules = this.block();\n\n                    if (!rules) {\n                        error('media definitions require block statements after any features');\n                    }\n\n                    parserInput.forget();\n\n                    media = new(tree.Media)(rules, features, index, fileInfo);\n                    if (context.dumpLineNumbers) {\n                        media.debugInfo = debugInfo;\n                    }\n\n                    return media;\n                }\n\n                parserInput.restore();\n            },\n\n            //\n\n            // A @plugin directive, used to import plugins dynamically.\n            //\n            //     @plugin (args) \"lib\";\n            //\n            plugin: function () {\n                let path;\n                let args;\n                let options;\n                const index = parserInput.i;\n                const dir   = parserInput.$re(/^@plugin?\\s+/);\n\n                if (dir) {\n                    args = this.pluginArgs();\n\n                    if (args) {\n                        options = {\n                            pluginArgs: args,\n                            isPlugin: true\n                        };\n                    }\n                    else {\n                        options = { isPlugin: true };\n                    }\n\n                    if ((path = this.entities.quoted() || this.entities.url())) {\n\n                        if (!parserInput.$char(';')) {\n                            parserInput.i = index;\n                            error('missing semi-colon on @plugin');\n                        }\n                        return new(tree.Import)(path, null, options, index, fileInfo);\n                    }\n                    else {\n                        parserInput.i = index;\n                        error('malformed @plugin statement');\n                    }\n                }\n            },\n\n            pluginArgs: function() {\n                // list of options, surrounded by parens\n                parserInput.save();\n                if (!parserInput.$char('(')) {\n                    parserInput.restore();\n                    return null;\n                }\n                const args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\n                if (args[1]) {\n                    parserInput.forget();\n                    return args[1].trim();\n                }\n                else { \n                    parserInput.restore();\n                    return null;\n                }\n            },\n\n            //\n            // A CSS AtRule\n            //\n            //     @charset \"utf-8\";\n            //\n            atrule: function () {\n                const index = parserInput.i;\n                let name;\n                let value;\n                let rules;\n                let nonVendorSpecificName;\n                let hasIdentifier;\n                let hasExpression;\n                let hasUnknown;\n                let hasBlock = true;\n                let isRooted = true;\n\n                if (parserInput.currentChar() !== '@') { return; }\n\n                value = this['import']() || this.plugin() || this.media();\n                if (value) {\n                    return value;\n                }\n\n                parserInput.save();\n\n                name = parserInput.$re(/^@[a-z-]+/);\n\n                if (!name) { return; }\n\n                nonVendorSpecificName = name;\n                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                    nonVendorSpecificName = `@${name.slice(name.indexOf('-', 2) + 1)}`;\n                }\n\n                switch (nonVendorSpecificName) {\n                    case '@charset':\n                        hasIdentifier = true;\n                        hasBlock = false;\n                        break;\n                    case '@namespace':\n                        hasExpression = true;\n                        hasBlock = false;\n                        break;\n                    case '@keyframes':\n                    case '@counter-style':\n                        hasIdentifier = true;\n                        break;\n                    case '@document':\n                    case '@supports':\n                        hasUnknown = true;\n                        isRooted = false;\n                        break;\n                    default:\n                        hasUnknown = true;\n                        break;\n                }\n\n                parserInput.commentStore.length = 0;\n\n                if (hasIdentifier) {\n                    value = this.entity();\n                    if (!value) {\n                        error(`expected ${name} identifier`);\n                    }\n                } else if (hasExpression) {\n                    value = this.expression();\n                    if (!value) {\n                        error(`expected ${name} expression`);\n                    }\n                } else if (hasUnknown) {\n                    value = this.permissiveValue(/^[{;]/);\n                    hasBlock = (parserInput.currentChar() === '{');\n                    if (!value) {\n                        if (!hasBlock && parserInput.currentChar() !== ';') {\n                            error(`${name} rule is missing block or ending semi-colon`);\n                        }\n                    }\n                    else if (!value.value) {\n                        value = null;\n                    }\n                }\n\n                if (hasBlock) {\n                    rules = this.blockRuleset();\n                }\n\n                if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                    parserInput.forget();\n                    return new(tree.AtRule)(name, value, rules, index, fileInfo,\n                        context.dumpLineNumbers ? getDebugInfo(index) : null,\n                        isRooted\n                    );\n                }\n\n                parserInput.restore('at-rule options not recognised');\n            },\n\n            //\n            // A Value is a comma-delimited list of Expressions\n            //\n            //     font-family: Baskerville, Georgia, serif;\n            //\n            // In a Rule, a Value represents everything after the `:`,\n            // and before the `;`.\n            //\n            value: function () {\n                let e;\n                const expressions = [];\n                const index = parserInput.i;\n\n                do {\n                    e = this.expression();\n                    if (e) {\n                        expressions.push(e);\n                        if (!parserInput.$char(',')) { break; }\n                    }\n                } while (e);\n\n                if (expressions.length > 0) {\n                    return new(tree.Value)(expressions, index);\n                }\n            },\n            important: function () {\n                if (parserInput.currentChar() === '!') {\n                    return parserInput.$re(/^! *important/);\n                }\n            },\n            sub: function () {\n                let a;\n                let e;\n\n                parserInput.save();\n                if (parserInput.$char('(')) {\n                    a = this.addition();\n                    if (a && parserInput.$char(')')) {\n                        parserInput.forget();\n                        e = new(tree.Expression)([a]);\n                        e.parens = true;\n                        return e;\n                    }\n                    parserInput.restore('Expected \\')\\'');\n                    return;\n                }\n                parserInput.restore();\n            },\n            multiplication: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.operand();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        if (parserInput.peek(/^\\/[*\\/]/)) {\n                            break;\n                        }\n\n                        parserInput.save();\n\n                        op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n\n                        if (!op) { parserInput.forget(); break; }\n\n                        a = this.operand();\n\n                        if (!a) { parserInput.restore(); break; }\n                        parserInput.forget();\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            addition: function () {\n                let m;\n                let a;\n                let op;\n                let operation;\n                let isSpaced;\n                m = this.multiplication();\n                if (m) {\n                    isSpaced = parserInput.isWhitespace(-1);\n                    while (true) {\n                        op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                        if (!op) {\n                            break;\n                        }\n                        a = this.multiplication();\n                        if (!a) {\n                            break;\n                        }\n\n                        m.parensInOp = true;\n                        a.parensInOp = true;\n                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);\n                        isSpaced = parserInput.isWhitespace(-1);\n                    }\n                    return operation || m;\n                }\n            },\n            conditions: function () {\n                let a;\n                let b;\n                const index = parserInput.i;\n                let condition;\n\n                a = this.condition(true);\n                if (a) {\n                    while (true) {\n                        if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                            break;\n                        }\n                        b = this.condition(true);\n                        if (!b) {\n                            break;\n                        }\n                        condition = new(tree.Condition)('or', condition || a, b, index);\n                    }\n                    return condition || a;\n                }\n            },\n            condition: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                function or() {\n                    return parserInput.$str('or');\n                }\n\n                result = this.conditionAnd(needsParens);\n                if (!result) {\n                    return ;\n                }\n                logical = or();\n                if (logical) {\n                    next = this.condition(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            conditionAnd: function (needsParens) {\n                let result;\n                let logical;\n                let next;\n                const self = this;\n                function insideCondition() {\n                    const cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n                    if (!cond && !needsParens) {\n                        return self.atomicCondition(needsParens);\n                    }\n                    return cond;\n                }\n                function and() {\n                    return parserInput.$str('and');\n                }\n\n                result = insideCondition();\n                if (!result) {\n                    return ;\n                }\n                logical = and();\n                if (logical) {\n                    next = this.conditionAnd(needsParens);\n                    if (next) {\n                        result = new(tree.Condition)(logical, result, next);\n                    } else {\n                        return ;\n                    }\n                }\n                return result;\n            },\n            negatedCondition: function (needsParens) {\n                if (parserInput.$str('not')) {\n                    const result = this.parenthesisCondition(needsParens);\n                    if (result) {\n                        result.negate = !result.negate;\n                    }\n                    return result;\n                }\n            },\n            parenthesisCondition: function (needsParens) {\n                function tryConditionFollowedByParenthesis(me) {\n                    let body;\n                    parserInput.save();\n                    body = me.condition(needsParens);\n                    if (!body) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    if (!parserInput.$char(')')) {\n                        parserInput.restore();\n                        return ;\n                    }\n                    parserInput.forget();\n                    return body;\n                }\n\n                let body;\n                parserInput.save();\n                if (!parserInput.$str('(')) {\n                    parserInput.restore();\n                    return ;\n                }\n                body = tryConditionFollowedByParenthesis(this);\n                if (body) {\n                    parserInput.forget();\n                    return body;\n                }\n\n                body = this.atomicCondition(needsParens);\n                if (!body) {\n                    parserInput.restore();\n                    return ;\n                }\n                if (!parserInput.$char(')')) {\n                    parserInput.restore(`expected ')' got '${parserInput.currentChar()}'`);\n                    return ;\n                }\n                parserInput.forget();\n                return body;\n            },\n            atomicCondition: function (needsParens) {\n                const entities = this.entities;\n                const index = parserInput.i;\n                let a;\n                let b;\n                let c;\n                let op;\n\n                function cond() {\n                    return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n                }\n                cond = cond.bind(this);\n\n                a = cond();\n                if (a) {\n                    if (parserInput.$char('>')) {\n                        if (parserInput.$char('=')) {\n                            op = '>=';\n                        } else {\n                            op = '>';\n                        }\n                    } else\n                    if (parserInput.$char('<')) {\n                        if (parserInput.$char('=')) {\n                            op = '<=';\n                        } else {\n                            op = '<';\n                        }\n                    } else\n                    if (parserInput.$char('=')) {\n                        if (parserInput.$char('>')) {\n                            op = '=>';\n                        } else if (parserInput.$char('<')) {\n                            op = '=<';\n                        } else {\n                            op = '=';\n                        }\n                    }\n                    if (op) {\n                        b = cond();\n                        if (b) {\n                            c = new(tree.Condition)(op, a, b, index, false);\n                        } else {\n                            error('expected expression');\n                        }\n                    } else {\n                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index, false);\n                    }\n                    return c;\n                }\n            },\n\n            //\n            // An operand is anything that can be part of an operation,\n            // such as a Color, or a Variable\n            //\n            operand: function () {\n                const entities = this.entities;\n                let negate;\n\n                if (parserInput.peek(/^-[@\\$\\(]/)) {\n                    negate = parserInput.$char('-');\n                }\n\n                let o = this.sub() || entities.dimension() ||\n                        entities.color() || entities.variable() ||\n                        entities.property() || entities.call() ||\n                        entities.quoted(true) || entities.colorKeyword() ||\n                        entities.mixinLookup();\n\n                if (negate) {\n                    o.parensInOp = true;\n                    o = new(tree.Negative)(o);\n                }\n\n                return o;\n            },\n\n            //\n            // Expressions either represent mathematical operations,\n            // or white-space delimited Entities.\n            //\n            //     1px solid black\n            //     @var * 2\n            //\n            expression: function () {\n                const entities = [];\n                let e;\n                let delim;\n                const index = parserInput.i;\n\n                do {\n                    e = this.comment();\n                    if (e) {\n                        entities.push(e);\n                        continue;\n                    }\n                    e = this.addition() || this.entity();\n                    if (e) {\n                        entities.push(e);\n                        // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                        if (!parserInput.peek(/^\\/[\\/*]/)) {\n                            delim = parserInput.$char('/');\n                            if (delim) {\n                                entities.push(new(tree.Anonymous)(delim, index));\n                            }\n                        }\n                    }\n                } while (e);\n                if (entities.length > 0) {\n                    return new(tree.Expression)(entities);\n                }\n            },\n            property: function () {\n                const name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                if (name) {\n                    return name[1];\n                }\n            },\n            ruleProperty: function () {\n                let name = [];\n                const index = [];\n                let s;\n                let k;\n\n                parserInput.save();\n\n                const simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                if (simpleProperty) {\n                    name = [new(tree.Keyword)(simpleProperty[1])];\n                    parserInput.forget();\n                    return name;\n                }\n\n                function match(re) {\n                    const i = parserInput.i;\n                    const chunk = parserInput.$re(re);\n                    if (chunk) {\n                        index.push(i);\n                        return name.push(chunk[1]);\n                    }\n                }\n\n                match(/^(\\*?)/);\n                while (true) {\n                    if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\n                        break;\n                    }\n                }\n\n                if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                    parserInput.forget();\n\n                    // at last, we have the complete match now. move forward,\n                    // convert name particles to tree objects and return:\n                    if (name[0] === '') {\n                        name.shift();\n                        index.shift();\n                    }\n                    for (k = 0; k < name.length; k++) {\n                        s = name[k];\n                        name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\n                            new(tree.Keyword)(s) :\n                            (s.charAt(0) === '@' ?\n                                new(tree.Variable)(`@${s.slice(2, -1)}`, index[k], fileInfo) :\n                                new(tree.Property)(`$${s.slice(2, -1)}`, index[k], fileInfo));\n                    }\n                    return name;\n                }\n                parserInput.restore();\n            }\n        }\n    };\n};\nParser.serializeVars = vars => {\n    let s = '';\n\n    for (const name in vars) {\n        if (Object.hasOwnProperty.call(vars, name)) {\n            const value = vars[name];\n            s += `${((name[0] === '@') ? '' : '@') + name}: ${value}${(String(value).slice(-1) === ';') ? '' : ';'}`;\n        }\n    }\n\n    return s;\n};\n\nexport default Parser;\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nlet colorFunctions;\n\nfunction clamp(val) {\n    return Math.min(1, Math.max(0, val));\n}\nfunction hsla(origColor, hsl) {\n    const color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n    if (color) {\n        if (origColor.value && \n            /^(rgb|hsl)/.test(origColor.value)) {\n            color.value = origColor.value;\n        } else {\n            color.value = 'rgb';\n        }\n        return color;\n    }\n}\nfunction toHSL(color) {\n    if (color.toHSL) {\n        return color.toHSL();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction toHSV(color) {\n    if (color.toHSV) {\n        return color.toHSV();\n    } else {\n        throw new Error('Argument cannot be evaluated to a color');\n    }\n}\n\nfunction number(n) {\n    if (n instanceof Dimension) {\n        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n        return n;\n    } else {\n        throw {\n            type: 'Argument',\n            message: 'color functions take numbers as parameters'\n        };\n    }\n}\nfunction scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n        return parseFloat(n.value * size / 100);\n    } else {\n        return number(n);\n    }\n}\ncolorFunctions = {\n    rgb: function (r, g, b) {\n        const color = colorFunctions.rgba(r, g, b, 1.0);\n        if (color) {\n            color.value = 'rgb';\n            return color;\n        }\n    },\n    rgba: function (r, g, b, a) {\n        try {\n            if (r instanceof Color) {\n                if (g) {\n                    a = number(g);\n                } else {\n                    a = r.alpha;\n                }\n                return new Color(r.rgb, a, 'rgba');\n            }\n            const rgb = [r, g, b].map(c => scaled(c, 255));\n            a = number(a);\n            return new Color(rgb, a, 'rgba');\n        }\n        catch (e) {}\n    },\n    hsl: function (h, s, l) {\n        const color = colorFunctions.hsla(h, s, l, 1.0);\n        if (color) {\n            color.value = 'hsl';\n            return color;\n        }\n    },\n    hsla: function (h, s, l, a) {\n        try {\n            if (h instanceof Color) {\n                if (s) {\n                    a = number(s);\n                } else {\n                    a = h.alpha;\n                }\n                return new Color(h.rgb, a, 'hsla');\n            }\n\n            let m1;\n            let m2;\n\n            function hue(h) {\n                h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n                if (h * 6 < 1) {\n                    return m1 + (m2 - m1) * h * 6;\n                }\n                else if (h * 2 < 1) {\n                    return m2;\n                }\n                else if (h * 3 < 2) {\n                    return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n                }\n                else {\n                    return m1;\n                }\n            }\n\n            h = (number(h) % 360) / 360;\n            s = clamp(number(s));l = clamp(number(l));a = clamp(number(a));\n\n            m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n            m1 = l * 2 - m2;\n\n            const rgb = [\n                hue(h + 1 / 3) * 255,\n                hue(h)       * 255,\n                hue(h - 1 / 3) * 255\n            ];\n            a = number(a);\n            return new Color(rgb, a, 'hsla');\n        }\n        catch (e) {}\n    },\n\n    hsv: function(h, s, v) {\n        return colorFunctions.hsva(h, s, v, 1.0);\n    },\n\n    hsva: function(h, s, v, a) {\n        h = ((number(h) % 360) / 360) * 360;\n        s = number(s);v = number(v);a = number(a);\n\n        let i;\n        let f;\n        i = Math.floor((h / 60) % 6);\n        f = (h / 60) - i;\n\n        const vs = [v,\n            v * (1 - s),\n            v * (1 - f * s),\n            v * (1 - (1 - f) * s)];\n        const perm = [[0, 3, 1],\n            [2, 0, 1],\n            [1, 0, 3],\n            [1, 2, 0],\n            [3, 1, 0],\n            [0, 1, 2]];\n\n        return colorFunctions.rgba(vs[perm[i][0]] * 255,\n            vs[perm[i][1]] * 255,\n            vs[perm[i][2]] * 255,\n            a);\n    },\n\n    hue: function (color) {\n        return new Dimension(toHSL(color).h);\n    },\n    saturation: function (color) {\n        return new Dimension(toHSL(color).s * 100, '%');\n    },\n    lightness: function (color) {\n        return new Dimension(toHSL(color).l * 100, '%');\n    },\n    hsvhue: function(color) {\n        return new Dimension(toHSV(color).h);\n    },\n    hsvsaturation: function (color) {\n        return new Dimension(toHSV(color).s * 100, '%');\n    },\n    hsvvalue: function (color) {\n        return new Dimension(toHSV(color).v * 100, '%');\n    },\n    red: function (color) {\n        return new Dimension(color.rgb[0]);\n    },\n    green: function (color) {\n        return new Dimension(color.rgb[1]);\n    },\n    blue: function (color) {\n        return new Dimension(color.rgb[2]);\n    },\n    alpha: function (color) {\n        return new Dimension(toHSL(color).a);\n    },\n    luma: function (color) {\n        return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function (color) {\n        const luminance =\n            (0.2126 * color.rgb[0] / 255) +\n                (0.7152 * color.rgb[1] / 255) +\n                (0.0722 * color.rgb[2] / 255);\n\n        return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function (color, amount, method) {\n        // filter: saturate(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s +=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s += amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    desaturate: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.s -=  hsl.s * amount.value / 100;\n        }\n        else {\n            hsl.s -= amount.value / 100;\n        }\n        hsl.s = clamp(hsl.s);\n        return hsla(color, hsl);\n    },\n    lighten: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l +=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l += amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    darken: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.l -=  hsl.l * amount.value / 100;\n        }\n        else {\n            hsl.l -= amount.value / 100;\n        }\n        hsl.l = clamp(hsl.l);\n        return hsla(color, hsl);\n    },\n    fadein: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a +=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a += amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fadeout: function (color, amount, method) {\n        const hsl = toHSL(color);\n\n        if (typeof method !== 'undefined' && method.value === 'relative') {\n            hsl.a -=  hsl.a * amount.value / 100;\n        }\n        else {\n            hsl.a -= amount.value / 100;\n        }\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    fade: function (color, amount) {\n        const hsl = toHSL(color);\n\n        hsl.a = amount.value / 100;\n        hsl.a = clamp(hsl.a);\n        return hsla(color, hsl);\n    },\n    spin: function (color, amount) {\n        const hsl = toHSL(color);\n        const hue = (hsl.h + amount.value) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n\n        return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function (color1, color2, weight) {\n        if (!weight) {\n            weight = new Dimension(50);\n        }\n        const p = weight.value / 100.0;\n        const w = p * 2 - 1;\n        const a = toHSL(color1).a - toHSL(color2).a;\n\n        const w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        const w2 = 1 - w1;\n\n        const rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n            color1.rgb[1] * w1 + color2.rgb[1] * w2,\n            color1.rgb[2] * w1 + color2.rgb[2] * w2];\n\n        const alpha = color1.alpha * p + color2.alpha * (1 - p);\n\n        return new Color(rgb, alpha);\n    },\n    greyscale: function (color) {\n        return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function (color, dark, light, threshold) {\n        // filter: contrast(3.2);\n        // should be kept as is, so check for color\n        if (!color.rgb) {\n            return null;\n        }\n        if (typeof light === 'undefined') {\n            light = colorFunctions.rgba(255, 255, 255, 1.0);\n        }\n        if (typeof dark === 'undefined') {\n            dark = colorFunctions.rgba(0, 0, 0, 1.0);\n        }\n        // Figure out which is actually light and dark:\n        if (dark.luma() > light.luma()) {\n            const t = light;\n            light = dark;\n            dark = t;\n        }\n        if (typeof threshold === 'undefined') {\n            threshold = 0.43;\n        } else {\n            threshold = number(threshold);\n        }\n        if (color.luma() < threshold) {\n            return light;\n        } else {\n            return dark;\n        }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function (color) {\n        return new Anonymous(color.toARGB());\n    },\n    color: function(c) {\n        if ((c instanceof Quoted) &&\n            (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n            const val = c.value.slice(1);\n            return new Color(val, undefined, `#${val}`);\n        }\n        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n            c.value = undefined;\n            return c;\n        }\n        throw {\n            type:    'Argument',\n            message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n        };\n    },\n    tint: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function(color, amount) {\n        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n};\n\nexport default colorFunctions;\n","import Anonymous from '../tree/anonymous';\nimport Keyword from '../tree/keyword';\n\nfunction boolean(condition) {\n    return condition ? Keyword.True : Keyword.False;\n}\n\nfunction If(condition, trueValue, falseValue) {\n    return condition ? trueValue\n        : (falseValue || new Anonymous);\n}\n\nexport default { boolean, 'if': If };\n","import Color from '../tree/color';\n\n// Color Blending\n// ref: http://www.w3.org/TR/compositing-1\n\nfunction colorBlend(mode, color1, color2) {\n    const ab = color1.alpha;        // result\n\n    let // backdrop\n        cb;\n\n    const as = color2.alpha;\n\n    let // source\n        cs;\n\n    let ar;\n    let cr;\n    const r = [];\n\n    ar = as + ab * (1 - as);\n    for (let i = 0; i < 3; i++) {\n        cb = color1.rgb[i] / 255;\n        cs = color2.rgb[i] / 255;\n        cr = mode(cb, cs);\n        if (ar) {\n            cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n        }\n        r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n}\n\nconst colorBlendModeFunctions = {\n    multiply: function(cb, cs) {\n        return cb * cs;\n    },\n    screen: function(cb, cs) {\n        return cb + cs - cb * cs;\n    },\n    overlay: function(cb, cs) {\n        cb *= 2;\n        return (cb <= 1) ?\n            colorBlendModeFunctions.multiply(cb, cs) :\n            colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function(cb, cs) {\n        let d = 1;\n        let e = cb;\n        if (cs > 0.5) {\n            e = 1;\n            d = (cb > 0.25) ? Math.sqrt(cb)\n                : ((16 * cb - 12) * cb + 4) * cb;\n        }\n        return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function(cb, cs) {\n        return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function(cb, cs) {\n        return Math.abs(cb - cs);\n    },\n    exclusion: function(cb, cs) {\n        return cb + cs - 2 * cb * cs;\n    },\n\n    // non-w3c functions:\n    average: function(cb, cs) {\n        return (cb + cs) / 2;\n    },\n    negation: function(cb, cs) {\n        return 1 - Math.abs(cb + cs - 1);\n    }\n};\n\nfor (const f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n}\n\nexport default colorBlend;\n","import Comment from '../tree/comment';\nimport Dimension from '../tree/dimension';\nimport Declaration from '../tree/declaration';\nimport Expression from '../tree/expression';\nimport Ruleset from '../tree/ruleset';\nimport Selector from '../tree/selector';\nimport Element from '../tree/element';\nimport Quote from '../tree/quoted';\n\nconst getItemsFromNode = node => {\n    // handle non-array values as an array of length 1\n    // return 'undefined' if index is invalid\n    const items = Array.isArray(node.value) ?\n        node.value : Array(node);\n\n    return items;\n};\n\nexport default {\n    _SELF: function(n) {\n        return n;\n    },\n    extract: function(values, index) {\n        // (1-based index)\n        index = index.value - 1;\n\n        return getItemsFromNode(values)[index];\n    },\n    length: function(values) {\n        return new Dimension(getItemsFromNode(values).length);\n    },\n    /**\n     * Creates a Less list of incremental values.\n     * Modeled after Lodash's range function, also exists natively in PHP\n     * \n     * @param {Dimension} [start=1]\n     * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n     * @param {Dimension} [step=1] \n     */\n    range: function(start, end, step) {\n        let from;\n        let to;\n        let stepValue = 1;\n        const list = [];\n        if (end) {\n            to = end;\n            from = start.value;\n            if (step) {\n                stepValue = step.value;\n            }\n        }\n        else {\n            from = 1;\n            to = start;\n        }\n\n        for (let i = from; i <= to.value; i += stepValue) {\n            list.push(new Dimension(i, to.unit));\n        }\n\n        return new Expression(list);\n    },\n    each: function(list, rs) {\n        const rules = [];\n        let newRules;\n        let iterator;\n\n        if (list.value && !(list instanceof Quote)) {\n            if (Array.isArray(list.value)) {\n                iterator = list.value;\n            } else {\n                iterator = [list.value];\n            }\n        } else if (list.ruleset) {\n            iterator = list.ruleset.rules;\n        } else if (list.rules) {\n            iterator = list.rules;\n        } else if (Array.isArray(list)) {\n            iterator = list;\n        } else {\n            iterator = [list];\n        }\n\n        let valueName = '@value';\n        let keyName = '@key';\n        let indexName = '@index';\n\n        if (rs.params) {\n            valueName = rs.params[0] && rs.params[0].name;\n            keyName = rs.params[1] && rs.params[1].name;\n            indexName = rs.params[2] && rs.params[2].name;\n            rs = rs.rules;\n        } else {\n            rs = rs.ruleset;\n        }\n\n        for (let i = 0; i < iterator.length; i++) {\n            let key;\n            let value;\n            const item = iterator[i];\n            if (item instanceof Declaration) {\n                key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                value = item.value;\n            } else {\n                key = new Dimension(i + 1);\n                value = item;\n            }\n\n            if (item instanceof Comment) {\n                continue;\n            }\n\n            newRules = rs.rules.slice(0);\n            if (valueName) {\n                newRules.push(new Declaration(valueName,\n                    value,\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (indexName) {\n                newRules.push(new Declaration(indexName,\n                    new Dimension(i + 1),\n                    false, false, this.index, this.currentFileInfo));\n            }\n            if (keyName) {\n                newRules.push(new Declaration(keyName,\n                    key,\n                    false, false, this.index, this.currentFileInfo));\n            }\n\n            rules.push(new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n                newRules,\n                rs.strictImports,\n                rs.visibilityInfo()\n            ));\n        }\n\n        return new Ruleset([ new(Selector)([ new Element(\"\", '&') ]) ],\n            rules,\n            rs.strictImports,\n            rs.visibilityInfo()\n        ).eval(this.context);\n    }\n};\n","import Dimension from '../tree/dimension';\n\nconst MathHelper = (fn, unit, n) => {\n    if (!(n instanceof Dimension)) {\n        throw { type: 'Argument', message: 'argument must be a number' };\n    }\n    if (unit == null) {\n        unit = n.unit;\n    } else {\n        n = n.unify();\n    }\n    return new Dimension(fn(parseFloat(n.value)), unit);\n};\n\nexport default MathHelper;","import mathHelper from './math-helper.js';\n\nconst mathFunctions = {\n    // name,  unit\n    ceil:  null,\n    floor: null,\n    sqrt:  null,\n    abs:   null,\n    tan:   '',\n    sin:   '',\n    cos:   '',\n    atan:  'rad',\n    asin:  'rad',\n    acos:  'rad'\n};\n\nfor (const f in mathFunctions) {\n    if (mathFunctions.hasOwnProperty(f)) {\n        mathFunctions[f] = mathHelper.bind(null, Math[f], mathFunctions[f]);\n    }\n}\n\nmathFunctions.round = (n, f) => {\n    const fraction = typeof f === 'undefined' ? 0 : f.value;\n    return mathHelper(num => num.toFixed(fraction), null, n);\n};\n\nexport default mathFunctions;\n","import Dimension from '../tree/dimension';\nimport Anonymous from '../tree/anonymous';\nimport mathHelper from './math-helper.js';\n\nconst minMax = function (isMin, args) {\n    args = Array.prototype.slice.call(args);\n    switch (args.length) {\n        case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n    }\n    let i; // key is the unit.toString() for unified Dimension values,\n    let j;\n    let current;\n    let currentUnified;\n    let referenceUnified;\n    let unit;\n    let unitStatic;\n    let unitClone;\n\n    const // elems only contains original argument values.\n        order  = [];\n\n    const values = {};\n    // value is the index into the order array.\n    for (i = 0; i < args.length; i++) {\n        current = args[i];\n        if (!(current instanceof Dimension)) {\n            if (Array.isArray(args[i].value)) {\n                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n            }\n            continue;\n        }\n        currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n        unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n        unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n        unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n        j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n        if (j === undefined) {\n            if (unitStatic !== undefined && unit !== unitStatic) {\n                throw { type: 'Argument', message: 'incompatible types' };\n            }\n            values[unit] = order.length;\n            order.push(current);\n            continue;\n        }\n        referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n        if ( isMin && currentUnified.value < referenceUnified.value ||\n            !isMin && currentUnified.value > referenceUnified.value) {\n            order[j] = current;\n        }\n    }\n    if (order.length == 1) {\n        return order[0];\n    }\n    args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n    return new Anonymous(`${isMin ? 'min' : 'max'}(${args})`);\n};\n\nexport default {\n    min: function(...args) {\n        return minMax(true, args);\n    },\n    max: function(...args) {\n        return minMax(false, args);\n    },\n    convert: function (val, unit) {\n        return val.convertTo(unit.value);\n    },\n    pi: function () {\n        return new Dimension(Math.PI);\n    },\n    mod: function(a, b) {\n        return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function(x, y) {\n        if (typeof x === 'number' && typeof y === 'number') {\n            x = new Dimension(x);\n            y = new Dimension(y);\n        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n            throw { type: 'Argument', message: 'arguments must be numbers' };\n        }\n\n        return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function (n) {\n        const result = mathHelper(num => num * 100, '%', n);\n\n        return result;\n    }\n};\n","/**\n * Plugin Manager\n */\nclass PluginManager {\n    constructor(less) {\n        this.less = less;\n        this.visitors = [];\n        this.preProcessors = [];\n        this.postProcessors = [];\n        this.installedPlugins = [];\n        this.fileManagers = [];\n        this.iterator = -1;\n        this.pluginCache = {};\n        this.Loader = new less.PluginLoader(less);\n    }\n\n    /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n    addPlugins(plugins) {\n        if (plugins) {\n            for (let i = 0; i < plugins.length; i++) {\n                this.addPlugin(plugins[i]);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param plugin\n     * @param {String} filename\n     */\n    addPlugin(plugin, filename, functionRegistry) {\n        this.installedPlugins.push(plugin);\n        if (filename) {\n            this.pluginCache[filename] = plugin;\n        }\n        if (plugin.install) {\n            plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n        }\n    }\n\n    /**\n     *\n     * @param filename\n     */\n    get(filename) {\n        return this.pluginCache[filename];\n    }\n\n    /**\n     * Adds a visitor. The visitor object has options on itself to determine\n     * when it should run.\n     * @param visitor\n     */\n    addVisitor(visitor) {\n        this.visitors.push(visitor);\n    }\n\n    /**\n     * Adds a pre processor object\n     * @param {object} preProcessor\n     * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n     */\n    addPreProcessor(preProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n            if (this.preProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.preProcessors.splice(indexToInsertAt, 0, {preProcessor, priority});\n    }\n\n    /**\n     * Adds a post processor object\n     * @param {object} postProcessor\n     * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n     */\n    addPostProcessor(postProcessor, priority) {\n        let indexToInsertAt;\n        for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n            if (this.postProcessors[indexToInsertAt].priority >= priority) {\n                break;\n            }\n        }\n        this.postProcessors.splice(indexToInsertAt, 0, {postProcessor, priority});\n    }\n\n    /**\n     *\n     * @param manager\n     */\n    addFileManager(manager) {\n        this.fileManagers.push(manager);\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPreProcessors() {\n        const preProcessors = [];\n        for (let i = 0; i < this.preProcessors.length; i++) {\n            preProcessors.push(this.preProcessors[i].preProcessor);\n        }\n        return preProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getPostProcessors() {\n        const postProcessors = [];\n        for (let i = 0; i < this.postProcessors.length; i++) {\n            postProcessors.push(this.postProcessors[i].postProcessor);\n        }\n        return postProcessors;\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getVisitors() {\n        return this.visitors;\n    }\n\n    visitor() {\n        const self = this;\n        return {\n            first: function() {\n                self.iterator = -1;\n                return self.visitors[self.iterator];\n            },\n            get: function() {\n                self.iterator += 1;\n                return self.visitors[self.iterator];\n            }\n        };\n    }\n\n    /**\n     *\n     * @returns {Array}\n     * @private\n     */\n    getFileManagers() {\n        return this.fileManagers;\n    }\n}\n\nlet pm;\n\nfunction PluginManagerFactory(less, newFactory) {\n    if (newFactory || !pm) {\n        pm = new PluginManager(less);\n    }\n    return pm;\n};\n\n//\nexport default PluginManagerFactory;\n","import Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport JavaScript from '../tree/javascript';\n\nexport default {\n    e: function (str) {\n        return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\n    },\n    escape: function (str) {\n        return new Anonymous(\n            encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n                .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function (string, pattern, replacement, flags) {\n        let result = string.value;\n        replacement = (replacement.type === 'Quoted') ?\n            replacement.value : replacement.toCSS();\n        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n        return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function (string /* arg, arg, ... */) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        let result = string.value;\n\n        for (let i = 0; i < args.length; i++) {\n            /* jshint loopfunc:true */\n            result = result.replace(/%[sda]/i, token => {\n                const value = ((args[i].type === 'Quoted') &&\n                    token.match(/s/i)) ? args[i].value : args[i].toCSS();\n                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n            });\n        }\n        result = result.replace(/%%/g, '%');\n        return new Quoted(string.quote || '', result, string.escaped);\n    }\n};\n","import Keyword from '../tree/keyword';\nimport DetachedRuleset from '../tree/detached-ruleset';\nimport Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Quoted from '../tree/quoted';\nimport Anonymous from '../tree/anonymous';\nimport URL from '../tree/url';\nimport Operation from '../tree/operation';\n\nconst isa = (n, Type) => (n instanceof Type) ? Keyword.True : Keyword.False;\nconst isunit = (n, unit) => {\n    if (unit === undefined) {\n        throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n    }\n    unit = typeof unit.value === 'string' ? unit.value : unit;\n    if (typeof unit !== 'string') {\n        throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n    }\n    return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n};\n\nexport default {\n    isruleset: function (n) {\n        return isa(n, DetachedRuleset);\n    },\n    iscolor: function (n) {\n        return isa(n, Color);\n    },\n    isnumber: function (n) {\n        return isa(n, Dimension);\n    },\n    isstring: function (n) {\n        return isa(n, Quoted);\n    },\n    iskeyword: function (n) {\n        return isa(n, Keyword);\n    },\n    isurl: function (n) {\n        return isa(n, URL);\n    },\n    ispixel: function (n) {\n        return isunit(n, 'px');\n    },\n    ispercentage: function (n) {\n        return isunit(n, '%');\n    },\n    isem: function (n) {\n        return isunit(n, 'em');\n    },\n    isunit,\n    unit: function (val, unit) {\n        if (!(val instanceof Dimension)) {\n            throw { type: 'Argument',\n                message: `the first argument to unit must be a number${val instanceof Operation ? '. Have you forgotten parenthesis?' : ''}` };\n        }\n        if (unit) {\n            if (unit instanceof Keyword) {\n                unit = unit.value;\n            } else {\n                unit = unit.toCSS();\n            }\n        } else {\n            unit = '';\n        }\n        return new Dimension(val.value, unit);\n    },\n    'get-unit': function (n) {\n        return new Anonymous(n.unit);\n    }\n};\n","import functionRegistry from './function-registry';\nimport functionCaller from './function-caller';\n\nimport boolean from './boolean';\nimport defaultFunc from './default';\nimport color from './color';\nimport colorBlending from './color-blending';\nimport dataUri from './data-uri';\nimport list from './list';\nimport math from './math';\nimport number from './number';\nimport string from './string';\nimport svg from './svg';\nimport types from './types';\n\nexport default environment => {\n    const functions = { functionRegistry, functionCaller };\n\n    // register functions\n    functionRegistry.addMultiple(boolean);\n    functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\n    functionRegistry.addMultiple(color);\n    functionRegistry.addMultiple(colorBlending);\n    functionRegistry.addMultiple(dataUri(environment));\n    functionRegistry.addMultiple(list);\n    functionRegistry.addMultiple(math);\n    functionRegistry.addMultiple(number);\n    functionRegistry.addMultiple(string);\n    functionRegistry.addMultiple(svg(environment));\n    functionRegistry.addMultiple(types);\n\n    return functions;\n};\n","import Quoted from '../tree/quoted';\nimport URL from '../tree/url';\nimport * as utils from '../utils';\nimport logger from '../logger';\n\nexport default environment => {\n    \n    const fallback = (functionThis, node) => new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);    \n\n    return { 'data-uri': function(mimetypeNode, filePathNode) {\n\n        if (!filePathNode) {\n            filePathNode = mimetypeNode;\n            mimetypeNode = null;\n        }\n\n        let mimetype = mimetypeNode && mimetypeNode.value;\n        let filePath = filePathNode.value;\n        const currentFileInfo = this.currentFileInfo;\n        const currentDirectory = currentFileInfo.rewriteUrls ?\n            currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n\n        const fragmentStart = filePath.indexOf('#');\n        let fragment = '';\n        if (fragmentStart !== -1) {\n            fragment = filePath.slice(fragmentStart);\n            filePath = filePath.slice(0, fragmentStart);\n        }\n        const context = utils.clone(this.context);\n        context.rawBuffer = true;\n\n        const fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n\n        if (!fileManager) {\n            return fallback(this, filePathNode);\n        }\n\n        let useBase64 = false;\n\n        // detect the mimetype if not given\n        if (!mimetypeNode) {\n\n            mimetype = environment.mimeLookup(filePath);\n\n            if (mimetype === 'image/svg+xml') {\n                useBase64 = false;\n            } else {\n                // use base 64 unless it's an ASCII or UTF-8 format\n                const charset = environment.charsetLookup(mimetype);\n                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n            }\n            if (useBase64) { mimetype += ';base64'; }\n        }\n        else {\n            useBase64 = /;base64$/.test(mimetype);\n        }\n\n        const fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n        if (!fileSync.contents) {\n            logger.warn(`Skipped data-uri embedding of ${filePath} because file not found`);\n            return fallback(this, filePathNode || mimetypeNode);\n        }\n        let buf = fileSync.contents;\n        if (useBase64 && !environment.encodeBase64) {\n            return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n\n        const uri = `data:${mimetype},${buf}${fragment}`;\n\n        return new URL(new Quoted(`\"${uri}\"`, uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import Dimension from '../tree/dimension';\nimport Color from '../tree/color';\nimport Expression from '../tree/expression';\nimport Quoted from '../tree/quoted';\nimport URL from '../tree/url';\n\nexport default environment => {\n    return { 'svg-gradient': function(direction) {\n        let stops;\n        let gradientDirectionSvg;\n        let gradientType = 'linear';\n        let rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\n        const renderEnv = {compress: false};\n        let returner;\n        const directionValue = direction.toCSS(renderEnv);\n        let i;\n        let color;\n        let position;\n        let positionValue;\n        let alpha;\n\n        function throwArgumentDescriptor() {\n            throw { type: 'Argument',\n                message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n                            ' end_color [end_position] or direction, color list' };\n        }\n\n        if (arguments.length == 2) {\n            if (arguments[1].value.length < 2) {\n                throwArgumentDescriptor();\n            }\n            stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n            throwArgumentDescriptor();\n        } else {\n            stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n            case 'to bottom':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                break;\n            case 'to right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'to bottom right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                break;\n            case 'to top right':\n                gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                break;\n            case 'ellipse':\n            case 'ellipse at center':\n                gradientType = 'radial';\n                gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                break;\n            default:\n                throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\n                    ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\n        }\n        returner = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1 1\"><${gradientType}Gradient id=\"g\" ${gradientDirectionSvg}>`;\n\n        for (i = 0; i < stops.length; i += 1) {\n            if (stops[i] instanceof Expression) {\n                color = stops[i].value[0];\n                position = stops[i].value[1];\n            } else {\n                color = stops[i];\n                position = undefined;\n            }\n\n            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                throwArgumentDescriptor();\n            }\n            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n            alpha = color.alpha;\n            returner += `<stop offset=\"${positionValue}\" stop-color=\"${color.toRGB()}\"${alpha < 1 ? ` stop-opacity=\"${alpha}\"` : ''}/>`;\n        }\n        returner += `</${gradientType}Gradient><rect ${rectangleDimension} fill=\"url(#g)\" /></svg>`;\n\n        returner = encodeURIComponent(returner);\n\n        returner = `data:image/svg+xml,${returner}`;\n        return new URL(new Quoted(`'${returner}'`, returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n    }};\n};\n","import contexts from './contexts';\nimport visitor from './visitors';\nimport tree from './tree';\n\nexport default (root, options = {}) => {\n    let evaldRoot;\n    let variables = options.variables;\n    const evalEnv = new contexts.Eval(options);\n\n    //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Declaration('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n    if (typeof variables === 'object' && !Array.isArray(variables)) {\n        variables = Object.keys(variables).map(k => {\n            let value = variables[k];\n\n            if (!(value instanceof tree.Value)) {\n                if (!(value instanceof tree.Expression)) {\n                    value = new tree.Expression([value]);\n                }\n                value = new tree.Value([value]);\n            }\n            return new tree.Declaration(`@${k}`, value, false, null, 0);\n        });\n        evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    const visitors = [\n        new visitor.JoinSelectorVisitor(),\n        new visitor.MarkVisibleSelectorsVisitor(true),\n        new visitor.ExtendVisitor(),\n        new visitor.ToCSSVisitor({compress: Boolean(options.compress)})\n    ];\n\n    const preEvalVisitors = [];\n    let v;\n    let visitorIterator;\n\n    /**\n     * first() / get() allows visitors to be added while visiting\n     * \n     * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n     */\n    if (options.pluginManager) {\n        visitorIterator = options.pluginManager.visitor();\n        for (var i = 0; i < 2; i++) {\n            visitorIterator.first();\n            while ((v = visitorIterator.get())) {\n                if (v.isPreEvalVisitor) {\n                    if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                        preEvalVisitors.push(v);\n                        v.run(root);\n                    }\n                }\n                else {\n                    if (i === 0 || visitors.indexOf(v) === -1) {\n                        if (v.isPreVisitor) {\n                            visitors.unshift(v);\n                        }\n                        else {\n                            visitors.push(v);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (var i = 0; i < visitors.length; i++) {\n        visitors[i].run(evaldRoot);\n    }\n\n    // Run any remaining visitors added after eval pass\n    if (options.pluginManager) {\n        visitorIterator.first();\n        while ((v = visitorIterator.get())) {\n            if (visitors.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                v.run(evaldRoot);\n            }\n        }\n    }\n\n    return evaldRoot;\n};\n","/* global window, XMLHttpRequest */\n\nimport AbstractFileManager from '../less/environment/abstract-file-manager.js';\n\nlet options;\nlet logger;\nlet fileCache = {};\n\n// TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\nclass FileManager extends AbstractFileManager {\n    alwaysMakePathsAbsolute() {\n        return true;\n    }\n\n    join(basePath, laterPath) {\n        if (!basePath) {\n            return laterPath;\n        }\n        return this.extractUrlParts(laterPath, basePath).path;\n    }\n\n    doXHR(url, type, callback, errback) {\n        const xhr = new XMLHttpRequest();\n        const async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n            xhr.overrideMimeType('text/css');\n        }\n        logger.debug(`XHR: Getting '${url}'`);\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                callback(xhr.responseText,\n                    xhr.getResponseHeader('Last-Modified'));\n            } else if (typeof errback === 'function') {\n                errback(xhr.status, url);\n            }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n            if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                callback(xhr.responseText);\n            } else {\n                errback(xhr.status, url);\n            }\n        } else if (async) {\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == 4) {\n                    handleResponse(xhr, callback, errback);\n                }\n            };\n        } else {\n            handleResponse(xhr, callback, errback);\n        }\n    }\n\n    supports() {\n        return true;\n    }\n\n    clearFileCache() {\n        fileCache = {};\n    }\n\n    loadFile(filename, currentDirectory, options, environment) {\n        // TODO: Add prefix support like less-node?\n        // What about multiple paths?\n\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n            filename = currentDirectory + filename;\n        }\n\n        filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n\n        options = options || {};\n\n        // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n        const hrefParts = this.extractUrlParts(filename, window.location.href);\n        const href      = hrefParts.url;\n        const self      = this;\n        \n        return new Promise((resolve, reject) => {\n            if (options.useFileCache && fileCache[href]) {\n                try {\n                    const lessText = fileCache[href];\n                    return resolve({ contents: lessText, filename: href, webInfo: { lastModified: new Date() }});\n                } catch (e) {\n                    return reject({ filename: href, message: `Error loading file ${href} error was ${e.message}` });\n                }\n            }\n\n            self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                // per file cache\n                fileCache[href] = data;\n\n                // Use remote copy (re-parse)\n                resolve({ contents: data, filename: href, webInfo: { lastModified }});\n            }, function doXHRError(status, url) {\n                reject({ type: 'File', message: `'${url}' wasn't found (${status})`, href });\n            });\n        });\n    }\n}\n\nexport default (opts, log) => {\n    options = opts;\n    logger = log;\n    return FileManager;\n}\n","import data from './data';\nimport tree from './tree';\nimport Environment from './environment/environment';\nimport AbstractFileManager from './environment/abstract-file-manager';\nimport AbstractPluginLoader from './environment/abstract-plugin-loader';\nimport visitors from './visitors';\nimport Parser from './parser/parser';\nimport Functions from './functions';\nimport contexts from './contexts';\nimport sourceMapOutput from './source-map-output';\nimport sourceMapBuilder from './source-map-builder';\nimport parseTree from './parse-tree';\nimport importManager from './import-manager';\nimport Render from './render';\nimport Parse from './parse';\nimport LessError from './less-error';\nimport transformTree from './transform-tree';\nimport * as utils from './utils';\nimport PluginManager from './plugin-manager';\nimport logger from './logger';\n\nexport default (environment, fileManagers) => {\n    /**\n     * @todo\n     * This original code could be improved quite a bit.\n     * Many classes / modules currently add side-effects / mutations to passed in objects,\n     * which makes it hard to refactor and reason about. \n     */\n    environment = new Environment(environment, fileManagers);\n\n    const SourceMapOutput = sourceMapOutput(environment);\n    const SourceMapBuilder = sourceMapBuilder(SourceMapOutput, environment);\n    const ParseTree = parseTree(SourceMapBuilder);\n    const ImportManager = importManager(environment);\n    const render = Render(environment, ParseTree, ImportManager);\n    const parse = Parse(environment, ParseTree, ImportManager);\n    const functions = Functions(environment);\n\n    /**\n     * @todo\n     * This root properties / methods need to be organized.\n     * It's not clear what should / must be public and why.\n     */\n    const initial = {\n        version: [3, 11, 0],\n        data,\n        tree,\n        Environment,\n        AbstractFileManager,\n        AbstractPluginLoader,\n        environment,\n        visitors,\n        Parser,\n        functions,\n        contexts,\n        SourceMapOutput,\n        SourceMapBuilder,\n        ParseTree,\n        ImportManager,\n        render,\n        parse,\n        LessError,\n        transformTree,\n        utils,\n        PluginManager,\n        logger\n    };\n\n    // Create a public API\n    const ctor = t => function (...args) {\n        return new t(...args);\n    };\n\n    let t;\n    const api = Object.create(initial);\n    for (const n in initial.tree) {\n        /* eslint guard-for-in: 0 */\n        t = initial.tree[n];\n        if (typeof t === 'function') {\n            api[n.toLowerCase()] = ctor(t);\n        }\n        else {\n            api[n] = Object.create(null);\n            for (const o in t) {\n                /* eslint guard-for-in: 0 */\n                api[n][o.toLowerCase()] = ctor(t[o]);\n            }\n        }\n    }\n\n    return api;\n};\n","export default environment => {\n    class SourceMapOutput {\n        constructor(options) {\n            this._css = [];\n            this._rootNode = options.rootNode;\n            this._contentsMap = options.contentsMap;\n            this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n            if (options.sourceMapFilename) {\n                this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n            }\n            this._outputFilename = options.outputFilename;\n            this.sourceMapURL = options.sourceMapURL;\n            if (options.sourceMapBasepath) {\n                this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n            }\n            if (options.sourceMapRootpath) {\n                this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n                if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                    this._sourceMapRootpath += '/';\n                }\n            } else {\n                this._sourceMapRootpath = '';\n            }\n            this._outputSourceFiles = options.outputSourceFiles;\n            this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n\n            this._lineNumber = 0;\n            this._column = 0;\n        }\n\n        removeBasepath(path) {\n            if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n                path = path.substring(this._sourceMapBasepath.length);\n                if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                    path = path.substring(1);\n                }\n            }\n\n            return path;\n        }\n\n        normalizeFilename(filename) {\n            filename = filename.replace(/\\\\/g, '/');\n            filename = this.removeBasepath(filename);\n            return (this._sourceMapRootpath || '') + filename;\n        }\n\n        add(chunk, fileInfo, index, mapLines) {\n            // ignore adding empty strings\n            if (!chunk) {\n                return;\n            }\n\n            let lines;\n            let sourceLines;\n            let columns;\n            let sourceColumns;\n            let i;\n\n            if (fileInfo && fileInfo.filename) {\n                let inputSource = this._contentsMap[fileInfo.filename];\n\n                // remove vars/banner added to the top of the file\n                if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                    // adjust the index\n                    index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                    if (index < 0) { index = 0; }\n                    // adjust the source\n                    inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n                }\n\n                // ignore empty content\n                if (inputSource === undefined) {\n                    return;\n                }\n\n                inputSource = inputSource.substring(0, index);\n                sourceLines = inputSource.split('\\n');\n                sourceColumns = sourceLines[sourceLines.length - 1];\n            }\n\n            lines = chunk.split('\\n');\n            columns = lines[lines.length - 1];\n\n            if (fileInfo && fileInfo.filename) {\n                if (!mapLines) {\n                    this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column},\n                        original: { line: sourceLines.length, column: sourceColumns.length},\n                        source: this.normalizeFilename(fileInfo.filename)});\n                } else {\n                    for (i = 0; i < lines.length; i++) {\n                        this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0},\n                            original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0},\n                            source: this.normalizeFilename(fileInfo.filename)});\n                    }\n                }\n            }\n\n            if (lines.length === 1) {\n                this._column += columns.length;\n            } else {\n                this._lineNumber += lines.length - 1;\n                this._column = columns.length;\n            }\n\n            this._css.push(chunk);\n        }\n\n        isEmpty() {\n            return this._css.length === 0;\n        }\n\n        toCSS(context) {\n            this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n\n            if (this._outputSourceFiles) {\n                for (const filename in this._contentsMap) {\n                    if (this._contentsMap.hasOwnProperty(filename)) {\n                        let source = this._contentsMap[filename];\n                        if (this._contentsIgnoredCharsMap[filename]) {\n                            source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                        }\n                        this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                    }\n                }\n            }\n\n            this._rootNode.genCSS(context, this);\n\n            if (this._css.length > 0) {\n                let sourceMapURL;\n                const sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n                if (this.sourceMapURL) {\n                    sourceMapURL = this.sourceMapURL;\n                } else if (this._sourceMapFilename) {\n                    sourceMapURL = this._sourceMapFilename;\n                }\n                this.sourceMapURL = sourceMapURL;\n\n                this.sourceMap = sourceMapContent;\n            }\n\n            return this._css.join('');\n        }\n    }\n\n    return SourceMapOutput;\n};\n","export default (SourceMapOutput, environment) => {\n    class SourceMapBuilder {\n        constructor(options) {\n            this.options = options;\n        }\n\n        toCSS(rootNode, options, imports) {\n            const sourceMapOutput = new SourceMapOutput(\n                {\n                    contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                    rootNode,\n                    contentsMap: imports.contents,\n                    sourceMapFilename: this.options.sourceMapFilename,\n                    sourceMapURL: this.options.sourceMapURL,\n                    outputFilename: this.options.sourceMapOutputFilename,\n                    sourceMapBasepath: this.options.sourceMapBasepath,\n                    sourceMapRootpath: this.options.sourceMapRootpath,\n                    outputSourceFiles: this.options.outputSourceFiles,\n                    sourceMapGenerator: this.options.sourceMapGenerator,\n                    sourceMapFileInline: this.options.sourceMapFileInline\n                });\n\n            const css = sourceMapOutput.toCSS(options);\n            this.sourceMap = sourceMapOutput.sourceMap;\n            this.sourceMapURL = sourceMapOutput.sourceMapURL;\n            if (this.options.sourceMapInputFilename) {\n                this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n            }\n            if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n                this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n            }\n            return css + this.getCSSAppendage();\n        }\n\n        getCSSAppendage() {\n\n            let sourceMapURL = this.sourceMapURL;\n            if (this.options.sourceMapFileInline) {\n                if (this.sourceMap === undefined) {\n                    return '';\n                }\n                sourceMapURL = `data:application/json;base64,${environment.encodeBase64(this.sourceMap)}`;\n            }\n\n            if (sourceMapURL) {\n                return `/*# sourceMappingURL=${sourceMapURL} */`;\n            }\n            return '';\n        }\n\n        getExternalSourceMap() {\n            return this.sourceMap;\n        }\n\n        setExternalSourceMap(sourceMap) {\n            this.sourceMap = sourceMap;\n        }\n\n        isInline() {\n            return this.options.sourceMapFileInline;\n        }\n\n        getSourceMapURL() {\n            return this.sourceMapURL;\n        }\n\n        getOutputFilename() {\n            return this.options.sourceMapOutputFilename;\n        }\n\n        getInputFilename() {\n            return this.sourceMapInputFilename;\n        }\n    }\n\n    return SourceMapBuilder;\n};\n","import LessError from './less-error';\nimport transformTree from './transform-tree';\nimport logger from './logger';\n\nexport default SourceMapBuilder => {\n    class ParseTree {\n        constructor(root, imports) {\n            this.root = root;\n            this.imports = imports;\n        }\n\n        toCSS(options) {\n            let evaldRoot;\n            const result = {};\n            let sourceMapBuilder;\n            try {\n                evaldRoot = transformTree(this.root, options);\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            try {\n                const compress = Boolean(options.compress);\n                if (compress) {\n                    logger.warn('The compress option has been deprecated. ' + \n                        'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n                }\n\n                const toCSSOptions = {\n                    compress,\n                    dumpLineNumbers: options.dumpLineNumbers,\n                    strictUnits: Boolean(options.strictUnits),\n                    numPrecision: 8};\n\n                if (options.sourceMap) {\n                    sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                    result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n                } else {\n                    result.css = evaldRoot.toCSS(toCSSOptions);\n                }\n            } catch (e) {\n                throw new LessError(e, this.imports);\n            }\n\n            if (options.pluginManager) {\n                const postProcessors = options.pluginManager.getPostProcessors();\n                for (let i = 0; i < postProcessors.length; i++) {\n                    result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options, imports: this.imports });\n                }\n            }\n            if (options.sourceMap) {\n                result.map = sourceMapBuilder.getExternalSourceMap();\n            }\n\n            result.imports = [];\n            for (const file in this.imports.files) {\n                if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n                    result.imports.push(file);\n                }\n            }\n            return result;\n        }\n    }\n\n    return ParseTree;\n};\n","import contexts from './contexts';\nimport Parser from './parser/parser';\nimport LessError from './less-error';\nimport * as utils from './utils';\nimport logger from './logger';\n\nexport default environment => {\n    // FileInfo = {\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n\n    class ImportManager {\n        constructor(less, context, rootFileInfo) {\n            this.less = less;\n            this.rootFilename = rootFileInfo.filename;\n            this.paths = context.paths || [];  // Search paths, when importing\n            this.contents = {};             // map - filename to contents of all the files\n            this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n            this.mime = context.mime;\n            this.error = null;\n            this.context = context;\n            // Deprecated? Unused outside of here, could be useful.\n            this.queue = [];        // Files which haven't been imported yet\n            this.files = {};        // Holds the imported parse trees.\n        }\n\n        /**\n         * Add an import to be imported\n         * @param path - the raw path\n         * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n         * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n         * @param importOptions - import options\n         * @param callback - callback for when it is imported\n         */\n        push(path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n            const importManager = this;\n            const pluginLoader = this.context.pluginManager.Loader;\n\n            this.queue.push(path);\n\n            const fileParsedFunc = (e, root, fullPath) => {\n                importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n                const importedEqualsRoot = fullPath === importManager.rootFilename;\n                if (importOptions.optional && e) {\n                    callback(null, {rules:[]}, false, null);\n                    logger.info(`The file ${fullPath} was skipped because it was not found and the import was marked optional.`);\n                }\n                else {\n                    // Inline imports aren't cached here.\n                    // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n                    // same name as they used to do before this comment and the condition below have been added.\n                    if (!importManager.files[fullPath] && !importOptions.inline) {\n                        importManager.files[fullPath] = { root, options: importOptions };\n                    }\n                    if (e && !importManager.error) { importManager.error = e; }\n                    callback(e, root, importedEqualsRoot, fullPath);\n                }\n            };\n\n            const newFileInfo = {\n                rewriteUrls: this.context.rewriteUrls,\n                entryPath: currentFileInfo.entryPath,\n                rootpath: currentFileInfo.rootpath,\n                rootFilename: currentFileInfo.rootFilename\n            };\n\n            const fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n            if (!fileManager) {\n                fileParsedFunc({ message: `Could not find a file-manager for ${path}` });\n                return;\n            }\n\n            const loadFileCallback = loadedFile => {\n                let plugin;\n                const resolvedFilename = loadedFile.filename;\n                const contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n\n                // Pass on an updated rootpath if path of imported file is relative and file\n                // is in a (sub|sup) directory\n                //\n                // Examples:\n                // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/module/nav/'\n                // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n                //   then rootpath should become 'less/../'\n                newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n                if (newFileInfo.rewriteUrls) {\n                    newFileInfo.rootpath = fileManager.join(\n                        (importManager.context.rootpath || ''),\n                        fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n                    if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                        newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                    }\n                }\n                newFileInfo.filename = resolvedFilename;\n\n                const newEnv = new contexts.Parse(importManager.context);\n\n                newEnv.processImports = false;\n                importManager.contents[resolvedFilename] = contents;\n\n                if (currentFileInfo.reference || importOptions.reference) {\n                    newFileInfo.reference = true;\n                }\n\n                if (importOptions.isPlugin) {\n                    plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                    if (plugin instanceof LessError) {\n                        fileParsedFunc(plugin, null, resolvedFilename);\n                    }\n                    else {\n                        fileParsedFunc(null, plugin, resolvedFilename);\n                    }\n                } else if (importOptions.inline) {\n                    fileParsedFunc(null, contents, resolvedFilename);\n                } else {\n\n                    // import (multiple) parse trees apparently get altered and can't be cached.\n                    // TODO: investigate why this is\n                    if (importManager.files[resolvedFilename]\n                        && !importManager.files[resolvedFilename].options.multiple\n                        && !importOptions.multiple) {\n\n                        fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                    }\n                    else {\n                        new Parser(newEnv, importManager, newFileInfo).parse(contents, (e, root) => {\n                            fileParsedFunc(e, root, resolvedFilename);\n                        });\n                    }\n                }\n            };\n            let promise;\n            const context = utils.clone(this.context);\n\n            if (tryAppendExtension) {\n                context.ext = importOptions.isPlugin ? '.js' : '.less';\n            }\n\n            if (importOptions.isPlugin) {\n                context.mime = 'application/javascript';\n                promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n            }\n            else {\n                promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment,\n                    (err, loadedFile) => {\n                        if (err) {\n                            fileParsedFunc(err);\n                        } else {\n                            loadFileCallback(loadedFile);\n                        }\n                    });\n            }\n            if (promise) {\n                promise.then(loadFileCallback, fileParsedFunc);\n            }\n        }\n    }\n\n    return ImportManager;\n};\n","let PromiseConstructor;\nimport * as utils from './utils';\n\nexport default (environment, ParseTree, ImportManager) => {\n    const render = function (input, options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise((resolve, reject) => {\n                render.call(self, input, options, (err, output) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            this.parse(input, options, (err, root, imports, options) => {\n                if (err) { return callback(err); }\n\n                let result;\n                try {\n                    const parseTree = new ParseTree(root, imports);\n                    result = parseTree.toCSS(options);\n                }\n                catch (err) { return callback(err); }\n\n                callback(null, result);\n            });\n        }\n    };\n\n    return render;\n};\n","let PromiseConstructor;\nimport contexts from './contexts';\nimport Parser from './parser/parser';\nimport PluginManager from './plugin-manager';\nimport LessError from './less-error';\nimport * as utils from './utils';\n\nexport default (environment, ParseTree, ImportManager) => {\n    const parse = function (input, options, callback) {\n\n        if (typeof options === 'function') {\n            callback = options;\n            options = utils.copyOptions(this.options, {});\n        }\n        else {\n            options = utils.copyOptions(this.options, options || {});\n        }\n\n        if (!callback) {\n            const self = this;\n            return new Promise((resolve, reject) => {\n                parse.call(self, input, options, (err, output) => {\n                    if (err) {\n                        reject(err);\n                    } else {\n                        resolve(output);\n                    }\n                });\n            });\n        } else {\n            let context;\n            let rootFileInfo;\n            const pluginManager = new PluginManager(this, !options.reUsePluginManager);\n\n            options.pluginManager = pluginManager;\n\n            context = new contexts.Parse(options);\n\n            if (options.rootFileInfo) {\n                rootFileInfo = options.rootFileInfo;\n            } else {\n                const filename = options.filename || 'input';\n                const entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n                rootFileInfo = {\n                    filename,\n                    rewriteUrls: context.rewriteUrls,\n                    rootpath: context.rootpath || '',\n                    currentDirectory: entryPath,\n                    entryPath,\n                    rootFilename: filename\n                };\n                // add in a missing trailing slash\n                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                    rootFileInfo.rootpath += '/';\n                }\n            }\n\n            const imports = new ImportManager(this, context, rootFileInfo);\n            this.importManager = imports;\n\n            // TODO: allow the plugins to be just a list of paths or names\n            // Do an async plugin queue like lessc\n\n            if (options.plugins) {\n                options.plugins.forEach(plugin => {\n                    let evalResult;\n                    let contents;\n                    if (plugin.fileContent) {\n                        contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                        evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n                        if (evalResult instanceof LessError) {\n                            return callback(evalResult);\n                        }\n                    }\n                    else {\n                        pluginManager.addPlugin(plugin);\n                    }\n                });\n            }\n\n            new Parser(context, imports, rootFileInfo)\n                .parse(input, (e, root) => {\n                    if (e) { return callback(e); }\n                    callback(null, root, imports, options);\n                }, options);\n        }\n    };\n    return parse;\n};\n","// TODO: Add tests for browser @plugin\n/* global window */\n\nimport AbstractPluginLoader from '../less/environment/abstract-plugin-loader.js';\n\n/**\n * Browser Plugin Loader\n */\nclass PluginLoader extends AbstractPluginLoader {\n    constructor(less) {\n        super();\n\n        this.less = less;\n        // Should we shim this.require for browser? Probably not?\n    }\n\n    loadPlugin(filename, basePath, context, environment, fileManager) {\n        return new Promise((fulfill, reject) => {\n            fileManager.loadFile(filename, basePath, context, environment)\n                .then(fulfill).catch(reject);\n        });\n    }\n}\n\nexport default PluginLoader;\n\n","import * as utils from './utils';\nimport browser from './browser';\n\nexport default (window, less, options) => {\n\n    function errorHTML(e, rootHref) {\n        const id = `less-error-message:${utils.extractId(rootHref || '')}`;\n        const template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n        const elem = window.document.createElement('div');\n        let timer;\n        let content;\n        const errors = [];\n        const filename = e.filename || rootHref;\n        const filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n\n        elem.id        = id;\n        elem.className = 'less-error-message';\n\n        content = `<h3>${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'}` + \n            `</h3><p>in <a href=\"${filename}\">${filenameNoPath}</a> `;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += `on line ${e.line}, column ${e.column + 1}:</p><ul>${errors.join('')}</ul>`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `<br/>Stack Trace</br />${e.stack.split('\\n').slice(1).join('<br/>')}`;\n        }\n        elem.innerHTML = content;\n\n        // CSS for error messages\n        browser.createCSS(window.document, [\n            '.less-error-message ul, .less-error-message li {',\n            'list-style-type: none;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message label {',\n            'font-size: 12px;',\n            'margin-right: 15px;',\n            'padding: 4px 0;',\n            'color: #cc7777;',\n            '}',\n            '.less-error-message pre {',\n            'color: #dd6666;',\n            'padding: 4px 0;',\n            'margin: 0;',\n            'display: inline-block;',\n            '}',\n            '.less-error-message pre.line {',\n            'color: #ff0000;',\n            '}',\n            '.less-error-message h3 {',\n            'font-size: 20px;',\n            'font-weight: bold;',\n            'padding: 15px 0 5px 0;',\n            'margin: 0;',\n            '}',\n            '.less-error-message a {',\n            'color: #10a',\n            '}',\n            '.less-error-message .error {',\n            'color: red;',\n            'font-weight: bold;',\n            'padding-bottom: 2px;',\n            'border-bottom: 1px dashed red;',\n            '}'\n        ].join('\\n'), { title: 'error-message' });\n\n        elem.style.cssText = [\n            'font-family: Arial, sans-serif',\n            'border: 1px solid #e00',\n            'background-color: #eee',\n            'border-radius: 5px',\n            '-webkit-border-radius: 5px',\n            '-moz-border-radius: 5px',\n            'color: #e00',\n            'padding: 15px',\n            'margin-bottom: 15px'\n        ].join(';');\n\n        if (options.env === 'development') {\n            timer = setInterval(() => {\n                const document = window.document;\n                const body = document.body;\n                if (body) {\n                    if (document.getElementById(id)) {\n                        body.replaceChild(elem, document.getElementById(id));\n                    } else {\n                        body.insertBefore(elem, body.firstChild);\n                    }\n                    clearInterval(timer);\n                }\n            }, 10);\n        }\n    }\n\n    function removeErrorHTML(path) {\n        const node = window.document.getElementById(`less-error-message:${utils.extractId(path)}`);\n        if (node) {\n            node.parentNode.removeChild(node);\n        }\n    }\n\n    function removeErrorConsole(path) {\n        // no action\n    }\n\n    function removeError(path) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            removeErrorHTML(path);\n        } else if (options.errorReporting === 'console') {\n            removeErrorConsole(path);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('remove', path);\n        }\n    }\n\n    function errorConsole(e, rootHref) {\n        const template = '{line} {content}';\n        const filename = e.filename || rootHref;\n        const errors = [];\n        let content = `${e.type || 'Syntax'}Error: ${e.message || 'There is an error in your .less file'} in ${filename}`;\n\n        const errorline = (e, i, classname) => {\n            if (e.extract[i] !== undefined) {\n                errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                    .replace(/\\{class\\}/, classname)\n                    .replace(/\\{content\\}/, e.extract[i]));\n            }\n        };\n\n        if (e.line) {\n            errorline(e, 0, '');\n            errorline(e, 1, 'line');\n            errorline(e, 2, '');\n            content += ` on line ${e.line}, column ${e.column + 1}:\\n${errors.join('\\n')}`;\n        }\n        if (e.stack && (e.extract || options.logLevel >= 4)) {\n            content += `\\nStack Trace\\n${e.stack}`;\n        }\n        less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n        if (!options.errorReporting || options.errorReporting === 'html') {\n            errorHTML(e, rootHref);\n        } else if (options.errorReporting === 'console') {\n            errorConsole(e, rootHref);\n        } else if (typeof options.errorReporting === 'function') {\n            options.errorReporting('add', e, rootHref);\n        }\n    }\n\n    return {\n        add: error,\n        remove: removeError\n    };\n};\n","/**\n * Kicks off less and compiles any stylesheets\n * used in the browser distributed version of less\n * to kick-start less using the browser api\n */\n/* global window, document */\n\nimport defaultOptions from '../less/default-options';\nimport addDefaultOptions from './add-default-options';\nimport root from './index';\n\nconst options = defaultOptions();\n\nif (window.less) {\n    for (const key in window.less) {\n        if (window.less.hasOwnProperty(key)) {\n            options[key] = window.less[key];\n        }\n    }\n}\naddDefaultOptions(window, options);\n\noptions.plugins = options.plugins || [];\n\nif (window.LESS_PLUGINS) {\n    options.plugins = options.plugins.concat(window.LESS_PLUGINS);\n}\n\nconst less = root(window, options);\nexport default less;\n\nwindow.less = less;\n\nlet css;\nlet head;\nlet style;\n\n// Always restore page visibility\nfunction resolveOrReject(data) {\n    if (data.filename) {\n        console.warn(data);\n    }\n    if (!options.async) {\n        head.removeChild(style);\n    }\n}\n\nif (options.onReady) {\n    if (/!watch/.test(window.location.hash)) {\n        less.watch();\n    }\n    // Simulate synchronous stylesheet loading by hiding page rendering\n    if (!options.async) {\n        css = 'body { display: none !important }';\n        head = document.head || document.getElementsByTagName('head')[0];\n        style = document.createElement('style');\n\n        style.type = 'text/css';\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n\n        head.appendChild(style);\n    }\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n}\n","// Export a new default each time\nexport default () => ({\n    /* Inline Javascript - @plugin still allowed */\n    javascriptEnabled: false,\n\n    /* Outputs a makefile import dependency list to stdout. */\n    depends: false,\n\n    /* (DEPRECATED) Compress using less built-in compression. \n  * This does an okay job but does not utilise all the tricks of \n  * dedicated css compression. */\n    compress: false,\n\n    /* Runs the less parser and just reports errors without any output. */\n    lint: false,\n\n    /* Sets available include paths.\n  * If the file in an @import rule does not exist at that exact location, \n  * less will look for it at the location(s) passed to this option. \n  * You might use this for instance to specify a path to a library which \n  * you want to be referenced simply and relatively in the less files. */\n    paths: [],\n\n    /* color output in the terminal */\n    color: true,\n\n    /* The strictImports controls whether the compiler will allow an @import inside of either \n  * @media blocks or (a later addition) other selector blocks.\n  * See: https://github.com/less/less.js/issues/656 */\n    strictImports: false,\n\n    /* Allow Imports from Insecure HTTPS Hosts */\n    insecure: false,\n\n    /* Allows you to add a path to every generated import and url in your css. \n  * This does not affect less import statements that are processed, just ones \n  * that are left in the output css. */\n    rootpath: '',\n\n    /* By default URLs are kept as-is, so if you import a file in a sub-directory \n  * that references an image, exactly the same URL will be output in the css. \n  * This option allows you to re-write URL's in imported files so that the \n  * URL is always relative to the base imported file */\n    rewriteUrls: false,\n\n    /* How to process math \n  *   0 always           - eagerly try to solve all operations\n  *   1 parens-division  - require parens for division \"/\"\n  *   2 parens | strict  - require parens for all operations\n  *   3 strict-legacy    - legacy strict behavior (super-strict)\n  */\n    math: 0,\n\n    /* Without this option, less attempts to guess at the output unit when it does maths. */\n    strictUnits: false,\n\n    /* Effectively the declaration is put at the top of your base Less file, \n  * meaning it can be used but it also can be overridden if this variable \n  * is defined in the file. */\n    globalVars: null,\n\n    /* As opposed to the global variable option, this puts the declaration at the\n  * end of your base file, meaning it will override anything defined in your Less file. */\n    modifyVars: null,\n\n    /* This option allows you to specify a argument to go on to every URL.  */\n    urlArgs: ''\n});","import {addDataAttr} from './utils';\nimport browser from './browser';\n\nexport default (window, options) => {\n\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n        options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    }\n\n    // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false;\n\n    // Interval between watch polls\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n\n    options.env = options.env || (window.location.hostname == '127.0.0.1' ||\n        window.location.hostname == '0.0.0.0'   ||\n        window.location.hostname == 'localhost' ||\n        (window.location.port &&\n            window.location.port.length > 0)      ||\n        options.isFileProtocol                   ? 'development'\n        : 'production');\n\n    const dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n    if (dumpLineNumbers) {\n        options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n        options.useFileCache = true;\n    }\n\n    if (options.onReady === undefined) {\n        options.onReady = true;\n    }\n\n    if (options.relativeUrls) {\n        options.rewriteUrls = 'all';\n    }\n};\n","//\n// index.js\n// Should expose the additional browser functions on to the less object\n//\nimport {addDataAttr} from './utils';\nimport lessRoot from '../less';\nimport browser from './browser';\nimport FM from './file-manager';\nimport PluginLoader from './plugin-loader';\nimport LogListener from './log-listener';\nimport ErrorReporting from './error-reporting';\nimport Cache from './cache';\nimport ImageSize from './image-size';\n\nexport default (window, options) => {\n    const document = window.document;\n    const less = lessRoot();\n\n    less.options = options;\n    const environment = less.environment;\n    const FileManager = FM(options, less.logger);\n    const fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n    less.PluginLoader = PluginLoader;\n\n    LogListener(less, options);\n    const errors = ErrorReporting(window, less, options);\n    const cache = less.cache = options.cache || Cache(window, options, less.logger);\n    ImageSize(less.environment);\n\n    // Setup user functions - Deprecate?\n    if (options.functions) {\n        less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    const typePattern = /^text\\/(x-)?less$/;\n\n    function clone(obj) {\n        const cloned = {};\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                cloned[prop] = obj[prop];\n            }\n        }\n        return cloned;\n    }\n\n    // only really needed for phantom\n    function bind(func, thisArg) {\n        const curryArgs = Array.prototype.slice.call(arguments, 2);\n        return function() {\n            const args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n            return func.apply(thisArg, args);\n        };\n    }\n\n    function loadStyles(modifyVars) {\n        const styles = document.getElementsByTagName('style');\n        let style;\n\n        for (let i = 0; i < styles.length; i++) {\n            style = styles[i];\n            if (style.type.match(typePattern)) {\n                const instanceOptions = clone(options);\n                instanceOptions.modifyVars = modifyVars;\n                const lessText = style.innerHTML || '';\n                instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n\n                /* jshint loopfunc:true */\n                // use closure to store current style\n                less.render(lessText, instanceOptions,\n                    bind((style, e, result) => {\n                        if (e) {\n                            errors.add(e, 'inline');\n                        } else {\n                            style.type = 'text/css';\n                            if (style.styleSheet) {\n                                style.styleSheet.cssText = result.css;\n                            } else {\n                                style.innerHTML = result.css;\n                            }\n                        }\n                    }, null, style));\n            }\n        }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n\n        const instanceOptions = clone(options);\n        addDataAttr(instanceOptions, sheet);\n        instanceOptions.mime = sheet.type;\n\n        if (modifyVars) {\n            instanceOptions.modifyVars = modifyVars;\n        }\n\n        function loadInitialFileCallback(loadedFile) {\n            const data = loadedFile.contents;\n            const path = loadedFile.filename;\n            const webInfo = loadedFile.webInfo;\n\n            const newFileInfo = {\n                currentDirectory: fileManager.getPath(path),\n                filename: path,\n                rootFilename: path,\n                rewriteUrls: instanceOptions.rewriteUrls\n            };\n\n            newFileInfo.entryPath = newFileInfo.currentDirectory;\n            newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n            if (webInfo) {\n                webInfo.remaining = remaining;\n\n                const css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                if (!reload && css) {\n                    webInfo.local = true;\n                    callback(null, css, data, sheet, webInfo, path);\n                    return;\n                }\n\n            }\n\n            // TODO add tests around how this behaves when reloading\n            errors.remove(path);\n\n            instanceOptions.rootFileInfo = newFileInfo;\n            less.render(data, instanceOptions, (e, result) => {\n                if (e) {\n                    e.href = path;\n                    callback(e);\n                } else {\n                    cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                    callback(null, result.css, data, sheet, webInfo, path);\n                }\n            });\n        }\n\n        fileManager.loadFile(sheet.href, null, instanceOptions, environment)\n            .then(loadedFile => {\n                loadInitialFileCallback(loadedFile);\n            }).catch(err => {\n                console.log(err);\n                callback(err);\n            });\n\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n        for (let i = 0; i < less.sheets.length; i++) {\n            loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n        }\n    }\n\n    function initRunningMode() {\n        if (less.env === 'development') {\n            less.watchTimer = setInterval(() => {\n                if (less.watchMode) {\n                    fileManager.clearFileCache();\n                    loadStyleSheets((e, css, _, sheet, webInfo) => {\n                        if (e) {\n                            errors.add(e, e.href || sheet.href);\n                        } else if (css) {\n                            browser.createCSS(window.document, css, sheet);\n                        }\n                    });\n                }\n            }, options.poll);\n        }\n    }\n\n    //\n    // Watch mode\n    //\n    less.watch   = function () {\n        if (!less.watchMode ) {\n            less.env = 'development';\n            initRunningMode();\n        }\n        this.watchMode = true;\n        return true;\n    };\n\n    less.unwatch = function () {clearInterval(less.watchTimer); this.watchMode = false; return false; };\n\n    //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n    less.registerStylesheetsImmediately = () => {\n        const links = document.getElementsByTagName('link');\n        less.sheets = [];\n\n        for (let i = 0; i < links.length; i++) {\n            if (links[i].rel === 'stylesheet/less' || (links[i].rel.match(/stylesheet/) &&\n                (links[i].type.match(typePattern)))) {\n                less.sheets.push(links[i]);\n            }\n        }\n    };\n\n    //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n    less.registerStylesheets = () => new Promise((resolve, reject) => {\n        less.registerStylesheetsImmediately();\n        resolve();\n    });\n\n    //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n    less.modifyVars = record => less.refresh(true, record, false);\n\n    less.refresh = (reload, modifyVars, clearFileCache) => {\n        if ((reload || clearFileCache) && clearFileCache !== false) {\n            fileManager.clearFileCache();\n        }\n        return new Promise((resolve, reject) => {\n            let startTime;\n            let endTime;\n            let totalMilliseconds;\n            let remainingSheets;\n            startTime = endTime = new Date();\n\n            // Set counter for remaining unprocessed sheets\n            remainingSheets = less.sheets.length;\n\n            if (remainingSheets === 0) {\n\n                endTime = new Date();\n                totalMilliseconds = endTime - startTime;\n                less.logger.info('Less has finished and no sheets were loaded.');\n                resolve({\n                    startTime,\n                    endTime,\n                    totalMilliseconds,\n                    sheets: less.sheets.length\n                });\n\n            } else {\n                // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                loadStyleSheets((e, css, _, sheet, webInfo) => {\n                    if (e) {\n                        errors.add(e, e.href || sheet.href);\n                        reject(e);\n                        return;\n                    }\n                    if (webInfo.local) {\n                        less.logger.info(`Loading ${sheet.href} from cache.`);\n                    } else {\n                        less.logger.info(`Rendered ${sheet.href} successfully.`);\n                    }\n                    browser.createCSS(window.document, css, sheet);\n                    less.logger.info(`CSS for ${sheet.href} generated in ${new Date() - endTime}ms`);\n\n                    // Count completed sheet\n                    remainingSheets--;\n\n                    // Check if the last remaining sheet was processed and then call the promise\n                    if (remainingSheets === 0) {\n                        totalMilliseconds = new Date() - startTime;\n                        less.logger.info(`Less has finished. CSS generated in ${totalMilliseconds}ms`);\n                        resolve({\n                            startTime,\n                            endTime,\n                            totalMilliseconds,\n                            sheets: less.sheets.length\n                        });\n                    }\n                    endTime = new Date();\n                }, reload, modifyVars);\n            }\n\n            loadStyles(modifyVars);\n        });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n};\n","export default (less, options) => {\n    const logLevel_debug = 4;\n    const logLevel_info = 3;\n    const logLevel_warn = 2;\n    const logLevel_error = 1;\n\n    // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ?  logLevel_info : logLevel_error);\n\n    if (!options.loggers) {\n        options.loggers = [{\n            debug: function(msg) {\n                if (options.logLevel >= logLevel_debug) {\n                    console.log(msg);\n                }\n            },\n            info: function(msg) {\n                if (options.logLevel >= logLevel_info) {\n                    console.log(msg);\n                }\n            },\n            warn: function(msg) {\n                if (options.logLevel >= logLevel_warn) {\n                    console.warn(msg);\n                }\n            },\n            error: function(msg) {\n                if (options.logLevel >= logLevel_error) {\n                    console.error(msg);\n                }\n            }\n        }];\n    }\n    for (let i = 0; i < options.loggers.length; i++) {\n        less.logger.addListener(options.loggers[i]);\n    }\n};\n","// Cache system is a bit outdated and could do with work\n\nexport default (window, options, logger) => {\n    let cache = null;\n    if (options.env !== 'development') {\n        try {\n            cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\n        } catch (_) {}\n    }\n    return {\n        setCSS: function(path, lastModified, modifyVars, styles) {\n            if (cache) {\n                logger.info(`saving ${path} to cache.`);\n                try {\n                    cache.setItem(path, styles);\n                    cache.setItem(`${path}:timestamp`, lastModified);\n                    if (modifyVars) {\n                        cache.setItem(`${path}:vars`, JSON.stringify(modifyVars));\n                    }\n                } catch (e) {\n                    // TODO - could do with adding more robust error handling\n                    logger.error(`failed to save \"${path}\" to local storage for caching.`);\n                }\n            }\n        },\n        getCSS: function(path, webInfo, modifyVars) {\n            const css       = cache && cache.getItem(path);\n            const timestamp = cache && cache.getItem(`${path}:timestamp`);\n            let vars      = cache && cache.getItem(`${path}:vars`);\n\n            modifyVars = modifyVars || {};\n            vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\n\n            if (timestamp && webInfo.lastModified &&\n                (new Date(webInfo.lastModified).valueOf() ===\n                    new Date(timestamp).valueOf()) &&\n                JSON.stringify(modifyVars) === vars) {\n                // Use local copy\n                return css;\n            }\n        }\n    };\n};\n","\nimport functionRegistry from './../less/functions/function-registry';\n\nexport default () => {\n    function imageSize() {\n        throw {\n            type: 'Runtime',\n            message: 'Image size functions are not supported in browser version of less'\n        };\n    }\n\n    const imageFunctions = {\n        'image-size': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-width': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        },\n        'image-height': function(filePathNode) {\n            imageSize(this, filePathNode);\n            return -1;\n        }\n    };\n\n    functionRegistry.addMultiple(imageFunctions);\n};\n"],"names":["extractId","href","replace","addDataAttr","options","tag","opt","dataset","hasOwnProperty","JSON","parse","_","createCSS","document","styles","sheet","id","title","utils.extractId","oldStyleNode","getElementById","keepOldStyleNode","styleNode","createElement","setAttribute","media","styleSheet","appendChild","createTextNode","childNodes","length","firstChild","nodeValue","head","getElementsByTagName","nextEl","nextSibling","parentNode","insertBefore","removeChild","cssText","e","Error","currentScript","window","scripts","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","m","cm","mm","in","px","pt","pc","duration","s","ms","angle","rad","Math","PI","deg","grad","turn","colors","unitConversions","this","parent","visibilityBlocks","undefined","nodeVisible","rootNode","parsed","self","Object","defineProperty","get","fileInfo","getIndex","Node","nodes","set","node","Array","isArray","forEach","_index","_fileInfo","context","strs","genCSS","add","chunk","index","push","isEmpty","join","output","value","visitor","visit","op","a","b","precision","numPrecision","Number","toFixed","info","compare","type","i_1","numericCompare","rgb","originalForm","_super","_this","match","map","c","i","parseInt","alpha","split","__extends","Color","r","g","pow","toCSS","doNotCompress","color","colorFunction","compress","args","fround","indexOf","clamp","round","concat","toHSL","h","l","toRGB","splitcolor","other","_operate","toHex","max","min","d","v","x","toString","prototype","fromKeyword","keyword","key","toLowerCase","slice","Paren","eval","_noSpaceCombinators"," ","|","emptyOrWhitespace","trim","Combinator","spaceOrEmpty","combinator","isVariable","currentFileInfo","visibilityInfo","copyVisibilityInfo","setParent","Element","firstSelector","charAt","ALWAYS","PARENS_DIVISION","PARENS","STRICT_LEGACY","RewriteUrls","OFF","LOCAL","ALL","clone","_instanceof","obj","nativeMap","nativeSet","nativePromise","Map","Set","Promise","circular","depth","includeNonEnumerable","allParents","allChildren","useBuffer","Buffer","Infinity","_clone","child","proto","resolve","reject","then","err","__isArray","__isRegExp","RegExp","source","__getRegExpFlags","lastIndex","__isDate","Date","getTime","isBuffer","allocUnsafe","copy","create","getPrototypeOf","keyChild","valueChild","entryChild","attrs","getOwnPropertyDescriptor","getOwnPropertySymbols","symbols","symbol","descriptor","enumerable","allPropertyNames","getOwnPropertyNames","propertyName","__objToStr","o","call","re","flags","global","ignoreCase","multiline","clonePrototype","module","exports","getLocation","inputStream","n","line","column","copyArray","arr","cloned","prop","defaults","obj1","obj2","newObj","_defaults","defaults_1","CloneHelper","assign","copyOptions","opts","strictMath","math","Constants.Math","relativeUrls","rewriteUrls","Constants.RewriteUrls","flattenArray","result","length_1","LessError","fileContentMap","currentFilename","filename","message","stack","input","contents","loc","utils.getLocation","col","callLine","lines","found","callExtract","extract","F","constructor","error","stylize","str","errorTxt","substr","elements","extendList","condition","evaldCondition","getElements","mixinElements_","Selector","visitArray","newSelector","mediaEmpty","els","parseNode","imports","sels","olen","len","mixinElements","shift","extend","createDerived","Value","Keyword","True","False","mapLines","rulesetLike","allowRoot","Anonymous","Boolean","MATH","name","important","merge","inline","variable","Declaration","lastRule","prevMath","evaldValue","mathBypass","evalName","importantScope","importantResult","pop","debugInfo","ctx","lineSeparator","dumpLineNumbers","asComment","asMediaQuery","lineNumber","fileName","filenameWithProtocol","test","isLineComment","Comment","getDebugInfo","isCompressed","contexts","copyFromOriginal","original","destination","propertiesToCopy","parseCopyProperties","Parse","paths","evalCopyProperties","isPathRelative","path","isPathLocalRelative","Eval","frames","inCalc","mathOn","calcStack","parensStack","rootpath","newPath","normalizePath","segment","segments","reverse","makeRegistry","base","_data","func","addMultiple","functions","keys","getLocalFunctions","inherit","defaultFunc","value_","error_","reset","selectors","rules","strictImports","_lookups","_variables","_properties","Ruleset","selCnt","selector","hasVariable","hasOnePassingSelector","j","toParseSelectors","utils.flattenArray","rule","subRule","utils.copyArray","ruleset","originalRuleset","root","firstRoot","allowImports","functionRegistry","globalFunctionRegistry","ctxFrames","unshift","ctxSelectors","evalImports","rsRules","evalFirst","mediaBlockCount","mediaBlocks","filter","splice","resetCache","isJustParentSelector","bubbleSelectors","importRules","makeImportant","lastSelector","_rulesets","reduce","hash","variables","vars","name_1","name_2","decl","parseValue","properties","toParse","transformDeclaration","nodes_1","filtRules","isRuleset","foundMixins","rulesets","find","i_2","apply","ruleNodes","tabLevel","sep","tabRuleStr","tabSetStr","charsetNodeIndex","importNodeIndex","isCharset","pathCnt","pathSubCnt","currentLastRule","isRulesetLike","isVisible","joinSelector","createParenthesis","elementsToPak","originalElement","replacementParen","insideParent","createSelector","containedElement","element","addReplacementIntoPath","beginningPath","addPath","replacedElement","originalSelector","newSelectorPath","newJoinedSelector","parentEl","restOfPath","addAllReplacementsIntoPath","addPaths","mergeElementsOnToSelectors","sel","deriveSelector","deriveFrom","newPaths","replaceParentSelector","inSelector","k","currentElements","newSelectors","selectorsMultiplied","el","maybeSelector","hadParentSelector","nestedSelector","replaced","nestedPaths","replacedNewSelectors","concatenated","bind","isRooted","createEmptySelectors","AtRule","outputRuleset","mediaPathBackup","mediaBlocksBackup","mediaPath","_i","ruleCnt","DetachedRuleset","numerator","denominator","backupUnit","sort","Unit","strictUnits","returnStr","is","unitString","toUpperCase","callback","group","mapUnit","groupName","atomicUnit","counter","count","unit","parseFloat","isNaN","Dimension","isSingular","strValue","String","isLength","convertTo","usedUnits","cancel","unify","conversions","targetUnit","applyUnit","derivedConversions","operands","isSpaced","Operation","isMathOn","toColor","operate","noSpacing","Expression","returnValue","inParenthesis","parens","parensInOp","doubleParen","outOfParenthesis","functionCaller","item","subNodes","calc","Call","currentMathContext","enterCalc","exitCalc","funcCaller","FunctionCaller","isValid","columnNumber","Variable","evaluating","frame","fun","Property","property","mergeRules","pluginManager","less","visitors","ToCSSVisitor","_mergeRules","vArr","Attribute","content","escaped","quote","variableRegex","propRegex","Quoted","that","iterativeReplace","regexp","replacementFnc","evaluatedValue","val","isEvald","URL","pathRequiresRewrite","rewritePath","urlArgs","features","Media","evalTop","evalNested","multiMedia","permute","fragment","rest","css","pathValue","getPath","Import","isPlugin","reference","containsVariables","doEval","blocksVisibility","addVisibilityBlock","registry","skip","importedFilename","newImport","evalPath","string","expression","JavaScript","evaluateJavaScript","JsEvalNode","evalContext","javascriptEnabled","jsify","Function","toJS","Assignment","negate","lvalue","rvalue","Condition","UnicodeDescriptor","Negative","option","object_id","Extend","next_id","parent_ids","allowBefore","allowAfter","selectorElements","selfElements","selfSelectors","VariableCall","detachedRuleset","callEval","ruleCall","lookups","NamespaceValue","lastDeclaration","substring","params","variadic","arity","optionalParameters","required","p","Definition","mixinEnv","evaldArguments","varargs","arg","isNamedFound","argIndex","argsLength","prependRule","_arguments","mixinFrames","evalParams","allArgsCnt","requiredArgsCnt","arguments","MixinCall","mixins","mixin","mixinPath","argValue","f","isRecursive","isOneFound","candidate","defaultResult","noArgumentsFilter","candidates","conditionResult","defFalseEitherCase","defNone","defTrue","defFalse","calcDefGroup","namespace","matchCondition","expand","matchArgs","MixinDefinition","format","newRules","evalCall","_setVisibilityToReplacement","replacement","msg","_fireEvent","warn","debug","addListener","listener","_listeners","removeListener","logFunction","externalEnvironment","fileManagers","requiredFunctions","propName","environmentFunc","environment","currentDirectory","isSync","logger","getFileManagers","fileManager","AbstractFileManager","lastIndexOf","ext","tryAppendExtension","basePath","laterPath","url","baseUrl","urlDirectories","baseUrlDirectories","urlParts","extractUrlParts","baseUrlParts","diff","hostPart","directories","urlPartsRegex","returner","rawDirectories","rawPath","fileUrl","require","AbstractPluginLoader","pluginOptions","pluginObj","localModule","shortname","FileManager","trySetOptions","use","loader","tree","validatePlugin","minVersion","compareVersion","addPlugin","plugin","setOptions","version","versionToString","aVersion","bVersion","versionString","plugins","i_3","printUsage","_visitArgs","visitDeeper","_hasIndexed","_noop","implementation","_implementation","_visitInCache","_visitOutCache","indexNodeTypes","ticker","typeIndex","Visitor","nodeTypeIndex","fnName","impl","funcOut","visitArgs","newNode","isReplacing","accept","nonReplacing","cnt","out","evald","flatten","nestedCnt","nestedItem","onSequencerEmpty","variableImports","_onSequencerEmpty","_currentDepth","ImportSequencer","importSequencer","importItem","isReady","tryRun","variableImport","ImportVisitor","importer","finish","_visitor","_importer","_finish","importCount","onceFileDetectionMap","recursionDetector","_sequencer","run","isFinished","visitImport","importNode","inlineCSS","importParent","isVariableImport","addVariableImport","processImportNode","evaldImportNode","evalForImport","multiple","importMultiple","tryAppendLessExtension","onImported","sequencedOnImported","addImport","importedAtRoot","fullPath","importVisitor","isOptional","optional","duplicateImport","oldContext","visitDeclaration","declNode","visitDeclarationOut","visitAtRule","atRuleNode","visitAtRuleOut","visitMixinDefinition","mixinDefinitionNode","visitMixinDefinitionOut","visitRuleset","rulesetNode","visitRulesetOut","visitMedia","mediaNode","visitMediaOut","visible","SetTreeVisibilityVisitor","ensureVisibility","ensureInvisibility","allExtendsStack","ExtendFinderVisitor","allExtends","allSelectorsExtendList","extendOnEveryPath","selectorPath","selExtendList","allSelectorsExtend","foundExtends","findSelfSelectors","firstExtendOnThisSelectorPath","ProcessExtendsVisitor","extendFinder","extendIndices","doExtendChaining","newRoot","checkExtendsForNonMatched","indices","hasFoundMatches","extendsList","extendsListTarget","iterationCount","extendIndex","targetExtendIndex","matches","targetExtend","newExtend","extendsToAdd","extendVisitor","findMatch","selfSelector","extendSelector","extendChainCount","selectorOne","selectorTwo","ruleNode","selectorNode","pathIndex","selectorsToAdd","extendedSelectors","haystackSelectorPath","haystackSelectorIndex","hackstackSelector","hackstackElementIndex","haystackElement","targetCombinator","potentialMatch","needleElements","potentialMatches","matched","initialCombinator","isElementValuesEqual","finished","endPathIndex","endPathElementIndex","elementValue1","elementValue2","replacementSelector","matchIndex","firstElement","newElements","currentSelectorPathIndex","currentSelectorPathElementIndex","currentValue","derived","newAllExtends","JoinSelectorVisitor","getIsOutput","joinSelectors","_context","CSSVisitorUtils","bodyRules","isSilent","owner","thing","originalRules","containsSilentNonBlockedChild","compiledRulesBody","keepOnlyVisibleChilds","removeVisibilityBlock","hasVisibleSelector","utils","mixinNode","visitExtend","extendNode","visitComment","commentNode","resolveVisibility","visitAtRuleWithBody","visitAtRuleWithoutBody","visitAnonymous","anonymousNode","nodeRules","hasFakeRuleset","getBodyRules","charset","comment","checkValidNodes","isRoot","_compileRulesetPaths","nodeRuleCnt","_removeDuplicateRules","isVisibleRuleset","ruleList","ruleCache","ruleCSS","groups","groupsArr","result_1","space_1","comma_1","MarkVisibleSelectorsVisitor","ExtendVisitor","furthest","furthestPossibleErrorMessage","chunks","current","currentPos","saveStack","parserInput","CHARCODE_SPACE","CHARCODE_TAB","CHARCODE_LF","CHARCODE_CR","CHARCODE_FORWARD_SLASH","skipWhitespace","nextChar","oldi","oldj","curr","endIndex","mem","inp","charCodeAt","autoCommentAbsorb","nextNewLine","text","commentStore","nextStarSlash","save","restore","possibleErrorMessage","state","forget","isWhitespace","offset","pos","code","$re","tok","exec","$char","$str","tokLength","$quoted","startChar","currentPosition","$parseUntil","testChar","returnVal","inComment","blockDepth","blockStack","parseGroups","startPos","lastPos","loop","char","expected","peek","peekChar","currentChar","prevChar","getInput","peekNotNumeric","start","chunkInput","failFunction","fail","lastOpening","lastOpeningParen","lastMultiComment","lastMultiCommentEndBrace","chunkerCurrentIndex","currentChunkStartIndex","cc","cc2","level","parenLevel","emitFrom","emitChunk","force","fromCharCode","chunker","end","furthestReachedEnd","furthestChar","Parser","parsers","getParserInput","expect","expectChar","parseList","currentIndex","returnNodes","parser","additionalData","globalVars","modifyVars","ignored","preText","serializeVars","preProcessors","getPreProcessors","process","banner","contentsIgnoredChars","primary","endInfo","processImports","extendRule","definition","declaration","variableCall","entities","atrule","foundSemiColon","mixinLookup","quoted","forceEscaped","isEscaped","customFuncCall","stop","ieAlpha","boolean","if","prevArgs","isSemiColonSeparated","argsComma","argsSemiColon","assignment","literal","dimension","unicodeDescriptor","entity","ch","variableCurly","curly","propertyCurly","colorKeyword","ud","javascript","js","escape","parsedName","inValue","ruleLookups","isRule","getLookup","hasParens","elem","elemIndex","isCall","expressionContainsNamed","nameLoop","expressions","hasSep","throwAwayComments","cond","argInfo","conditions","block","lookupValue","attribute","slashedCombinator","isLess","when","blockRuleset","hasDR","ruleProperty","permissiveValue","anonymousValue","untilTokens","done","testCurrentChar","import","dir","options_1","importOptions","mediaFeatures","optionName","importOption","mediaFeature","pluginArgs","nonVendorSpecificName","hasIdentifier","hasExpression","hasUnknown","hasBlock","sub","addition","multiplication","operation","operand","needsParens","logical","next","conditionAnd","negatedCondition","parenthesisCondition","atomicCondition","body","me","tryConditionFollowedByParenthesis","delim","simpleProperty","colorFunctions","trueValue","falseValue","hsla","origColor","hsl","toHSV","number","rgba","size","m1_1","m2_1","hue","hsv","hsva","vs","floor","perm","saturation","lightness","hsvhue","hsvsaturation","hsvvalue","luma","luminance","saturate","amount","method","desaturate","lighten","darken","fadein","fadeout","fade","spin","mix","color1","color2","weight","w","w1","w2","greyscale","contrast","dark","light","threshold","t","argb","toARGB","tint","shade","colorBlend","mode","cb","cs","ar","cr","ab","as","colorBlendModeFunctions","multiply","screen","overlay","softlight","sqrt","hardlight","difference","abs","exclusion","average","negation","getItemsFromNode","_SELF","values","range","step","from","to","stepValue","list","each","rs","iterator","Quote","valueName","keyName","indexName","MathHelper","fn","mathFunctions","ceil","sin","cos","atan","asin","acos","mathHelper","fraction","num","pm","minMax","isMin","currentUnified","referenceUnified","unitStatic","unitClone","order","convert","pi","mod","y","percentage","evaluated","encodeURI","pattern","%","token","encodeURIComponent","isa","Type","isunit","isruleset","iscolor","isnumber","isstring","iskeyword","isurl","ispixel","ispercentage","isem","get-unit","colorBlending","fallback","functionThis","data-uri","mimetypeNode","filePathNode","mimetype","filePath","entryPath","fragmentStart","utils.clone","rawBuffer","getFileManager","useBase64","mimeLookup","charsetLookup","fileSync","loadFileSync","buf","encodeBase64","uri","dataUri","svg-gradient","direction","stops","gradientDirectionSvg","position","positionValue","gradientType","rectangleDimension","renderEnv","directionValue","throwArgumentDescriptor","types","evaldRoot","evalEnv","visitorIterator","preEvalVisitors","first","isPreEvalVisitor","isPreVisitor","postProcessors","installedPlugins","pluginCache","Loader","PluginLoader","PluginManager","install","preProcessor","priority","indexToInsertAt","postProcessor","manager","PluginManagerFactory","newFactory","SourceMapOutput","_css","_rootNode","_contentsMap","contentsMap","_contentsIgnoredCharsMap","contentsIgnoredCharsMap","sourceMapFilename","_sourceMapFilename","_outputFilename","outputFilename","sourceMapURL","sourceMapBasepath","_sourceMapBasepath","sourceMapRootpath","_sourceMapRootpath","_outputSourceFiles","outputSourceFiles","_sourceMapGeneratorConstructor","getSourceMapGenerator","_lineNumber","_column","removeBasepath","sourceLines","columns","sourceColumns","inputSource","_sourceMapGenerator","addMapping","generated","normalizeFilename","file","sourceRoot","setSourceContent","sourceMapContent","stringify","toJSON","sourceMap","sourceMapOutput","Environment","SourceMapBuilder","sourceMapOutputFilename","sourceMapGenerator","sourceMapFileInline","sourceMapInputFilename","getCSSAppendage","sourceMapBuilder","ParseTree","transformTree","toCSSOptions","getPostProcessors","file_1","getExternalSourceMap","files","rootFilename","parseTree","ImportManager","rootFileInfo","mime","queue","importManager","pluginLoader","fileParsedFunc","importedEqualsRoot","newFileInfo","promise","loadFileCallback","loadedFile","resolvedFilename","pathDiff","isPathAbsolute","alwaysMakePathsAbsolute","newEnv","evalPlugin","loadPlugin","loadFile","render","utils.copyOptions","self_1","Render","context_1","pluginManager_1","reUsePluginManager","imports_1","evalResult","fileContent","Functions","initial","data","ctor","api","fileCache","errback","xhr","XMLHttpRequest","async","isFileProtocol","fileAsync","handleResponse","status","responseText","getResponseHeader","overrideMimeType","open","setRequestHeader","send","onreadystatechange","readyState","location","useFileCache","lessText_1","webInfo","lastModified","doXHR","log","fulfill","catch","rootHref","errorReporting","errors","errorline","classname","logLevel","errorConsole","timer","filenameNoPath","className","innerHTML","browser","style","env","setInterval","replaceChild","clearInterval","errorHTML","remove","removeErrorHTML","depends","lint","insecure","protocol","poll","hostname","port","onReady","addDefaultOptions","LESS_PLUGINS","lessRoot","FM","addFileManager","loggers","console","LogListener","ErrorReporting","cache","localStorage","setCSS","setItem","getCSS","getItem","timestamp","valueOf","Cache","imageSize","imageFunctions","image-size","image-width","image-height","ImageSize","typePattern","thisArg","curryArgs","loadStyles","instanceOptions","loadStyleSheet","reload","remaining","local","loadInitialFileCallback","loadStyleSheets","sheets","watch","watchMode","watchTimer","clearFileCache","unwatch","registerStylesheetsImmediately","links","rel","registerStylesheets","record","refresh","startTime","endTime","totalMilliseconds","remainingSheets","refreshStyles","resolveOrReject","pageLoadFinished"],"mappings":"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"}